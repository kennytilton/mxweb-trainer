{"version":3,"sources":["tiltontec/model/core.cljc"],"mappings":"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","names":["tiltontec.model.core/matrix","cljs.core.atom","tiltontec.model.core/md-name","me","cljs.core/deref","tiltontec.model.core/md-get","slot","js/Error","tiltontec.util.core/any-ref?","temp__5751__auto__","c","tiltontec.model.base/md-cell","tiltontec.cell.evaluate/c-get","G__29543","tiltontec.model.core/mget","tiltontec.model.core/md-getx","tag","tiltontec.model.core/*par*","tiltontec.model.core/md-reset!","new-value","tiltontec.cell.core/c-reset!","cljs.core.println","cljs.core/meta","cljs.core/contains?","tiltontec.util.core/err","cljs.core/str","tiltontec.cell.base/ia-type","cljs.core/keys","tiltontec.model.core/mset!","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","tiltontec.model.core/mswap!","seq29557","G__29558","cljs.core/first","cljs.core/next","G__29559","G__29560","self__4851__auto__","swap-fn","swap-fn-args","cljs.core.apply","tiltontec.model.core/backdoor-reset!?","tiltontec.util.core/rmap-setf","tiltontec.model.core/backdoor-reset!","tiltontec.model.core/make","seq29592","self__4852__auto__","cljs.core/seq","arg-list","cljs.core/odd?","cljs.core/count","iargs","cljs.core/hash-map","cljs.core.merge","cljs.core.partition","cljs.core.filter","p__29646","vec__29648","cljs.core.nth","v","cljs.core._EQ_","cljs.core.map","p__29638","vec__29639","k","cljs.core/PersistentVector","tiltontec.cell.base/c-ref?","tiltontec.cell.base/unbound","cljs.core.into","cljs.core/select-keys","tiltontec.util.core/rmap-meta-setf","p__29653","vec__29654","tiltontec.model.base/md-install-cell","cljs.core/vec","tiltontec.cell.integrity/call-with-integrity","opcode","defer-info","tiltontec.model.base/md-awaken","tiltontec.model.core/mm-obj","js/Object","tiltontec.model.core/md-kids","tiltontec.model.core/fm-kids-observe","newk","oldk","lostks","clojure.set.difference","cljs.core/set","cljs.core/empty?","seq__29666","chunk__29667","count__29668","i__29669","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","tiltontec.cell.evaluate/not-to-be","tiltontec.cell.observer/observe","_","seq__29680","chunk__29681","count__29682","i__29683","tiltontec.cell.base/md-ref?","tiltontec.cell.evaluate/not-to-be-self","tiltontec.model.core/mx-par","tiltontec.model.core/fget=","seek","poss","cljs.core/fn?","cljs.core/Keyword","cljs.core.isa_QMARK_","tiltontec.util.base.call_trc","tiltontec.model.core/fasc","seq29697","G__29698","G__29699","what","where","options","and__4251__auto__","*depender*-orig-val__29701","*depender*-temp-val__29702","tiltontec.cell.base/*depender*","or__4253__auto__","par","tiltontec.model.core.fasc","tiltontec.model.core/nextsib","mx","*depender*-orig-val__29705","*depender*-temp-val__29706","sibs","cljs.core/second","cljs.core/rest","tiltontec.model.core/prevsib","*depender*-orig-val__29710","*depender*-temp-val__29711","tiltontec.model.core/fget","seq29721","G__29722","G__29723","*depender*-orig-val__29750","*depender*-temp-val__29751","kids","netkids","cljs.core.remove","p1__29720#","cljs.core/some","tiltontec.model.core.fget","tiltontec.model.core/fm!","tiltontec.model.core/mxu-find-name","name","p1__29768#","tiltontec.model.core/mxu-find-id","id","p1__29772#","tiltontec.model.core/mxu-find-type","type","visited","tiltontec.model.core/fmi-w-class","class","p1__29776#","tiltontec.model.core/mxi-find","property","value","p1__29779#","tiltontec.model.core/fmo","id-name","G__29781","tiltontec.model.core/fmov","tiltontec.model.core.fmov","slot-name","tiltontec.model.core/kid-values-kids","x-kids","k-key","cljs.core.not_EQ_","iter__4652__auto__","s__29784","cljs.core/LazySeq","c__4650__auto__","size__4651__auto__","b__29786","cljs.core/chunk-buffer","i__29785","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29783","cljs.core/cons","k-factory","cljs.core.doall","cljs.core.map_indexed","idx","kid-value","cljs.core.get","*par*-orig-val__29791","*par*-temp-val__29792"],"sourcesContent":["(ns tiltontec.model.core\n  #?(:cljs (:require-macros\n             [tiltontec.model.core :refer [cFkids with-par]]))\n  (:require\n    [clojure.set :refer [difference]]\n    #?(:cljs [tiltontec.util.base\n              :refer-macros [trx prog1 *trx?* def-rmap-slots]]\n       :clj  [tiltontec.util.base\n              :refer :all])\n    [tiltontec.util.core\n     :refer [any-ref? type-of err rmap-setf rmap-meta-setf pln]]\n    #?(:clj  [tiltontec.cell.base :refer :all :as cty]\n       :cljs [tiltontec.cell.base\n              :refer-macros [without-c-dependency]\n              :refer [cells-init c-optimized-away? c-formula? c-value c-optimize\n                      c-unbound? c-input? ia-type? ia-type\n                      c-model mdead? c-valid? c-useds c-ref? md-ref?\n                      c-state +pulse+ c-pulse-observed\n                      *call-stack* *defer-changes* unbound\n                      c-rule c-me c-value-state c-callers caller-ensure\n                      unlink-from-callers *causation*\n                      c-synaptic? caller-drop\n                      c-pulse c-pulse-last-changed c-ephemeral? c-slot c-slots\n                      *depender* *not-to-be*\n                      *c-prop-depth* md-slot-owning? c-lazy] :as cty])\n    #?(:cljs [tiltontec.cell.integrity\n              :refer-macros [with-integrity]]\n       :clj  [tiltontec.cell.integrity :refer [with-integrity]])\n\n    [tiltontec.cell.observer\n     :refer [observe]]\n\n    [tiltontec.cell.evaluate :refer [not-to-be not-to-be-self]]\n\n    #?(:cljs [tiltontec.cell.core\n              :refer-macros [cF cF+ c-reset-next! cFonce cFn]\n              :refer [cI c-reset! make-cell]]\n       :clj  [tiltontec.cell.core :refer :all])\n\n    [tiltontec.cell.evaluate :refer [c-get c-awaken not-to-be]]\n    [tiltontec.model.base :refer [md-cell md-install-cell md-awaken]]\n    ))\n\n(def matrix\n  \"Each app will populate this with the root of its application matrix.\"\n  (atom nil))\n\n(defn md-name [me]\n  (:name @me))\n\n(defn md-get [me slot]\n  ;; (trx :md-get slot me)\n  (assert me (str \"md-get passed nil for me accessing slot: \" slot))\n  (when (any-ref? me)\n    (if-let [c (md-cell me slot)]\n      (c-get c)\n      (slot @me))))\n\n(defn mget [me slot] (md-get me slot))\n\n(defn md-getx [tag me slot]\n  (md-get me slot)\n  #_(wtrx [0 100 (str \"md-getx \" tag slot (ia-type me))]\n      (if-let [c (md-cell me slot)]\n        (c-get c)\n        (slot @me))))\n\n(def ^:dynamic *par* nil)\n\n(defmacro with-par [meform & body]\n  `(binding [tiltontec.model.core/*par* ~meform]\n     ~@body))\n\n;;; --- accessors ----\n\n(defn md-reset! [me slot new-value]\n  ;; (println :md-reset slot )\n  (assert me)\n  (if-let [c (md-cell me slot)]\n    (do                                                     ;; (println :gotc!)\n      (c-reset! c new-value))\n    (do\n      (println :reset-oops)\n      (println :reset-meta (meta me))\n      (println :cz (:cz (meta me)))\n      (if (contains? @me slot)\n        (err str \"change not mediated by cell \" slot \"/\" (ia-type me))\n        (err str \"change to slot not mediated by cell and map lacks slot \"\n          slot \"\n         ;; but has \" (str (keys @me))\n          )))))\n\n(defn mset! [me slot new-value]\n  (md-reset! me slot new-value))\n\n(defn mswap! [me slot swap-fn & swap-fn-args]\n  (mset! me slot (apply swap-fn (mget me slot) swap-fn-args)))\n\n(defn backdoor-reset!? [me slot new-value]\n  (if-let [c (md-cell me slot)]\n    (c-reset! c new-value)\n    (rmap-setf [slot me] new-value)))\n\n(defn backdoor-reset! [me slot new-value]\n  (rmap-setf [slot me] new-value))\n\n(defn make [& arg-list]\n  ;; (prn :make-entry (count arg-list) (first arg-list))\n  (cond\n    (odd? (count arg-list)) (apply make :type arg-list)\n    :else\n    (#?(:clj dosync :cljs do)\n      ;;(println :md-making (nth arg-list 1))\n\n      (let [iargs (apply hash-map arg-list)\n            me (#?(:clj ref :cljs atom)\n                 (merge {:par *par*}\n                   (->> arg-list\n                     (partition 2)\n                     (filter (fn [[slot v]]\n                               (not (= :type slot))))\n                     (map (fn [[k v]]\n                            (vector k (if (c-ref? v)\n                                        unbound\n                                        v))))\n                     (into {})))\n                 :meta (merge\n                         {:state :nascent}\n                         (select-keys iargs [:type])))]\n        (assert (meta me))\n        #_(when-not (:par @me)\n            (println :no-par!!!! me))\n        (rmap-meta-setf\n          [:cz me]\n          (->> arg-list\n            (partition 2)\n            (filter (fn [[slot v]]\n                      (md-install-cell me slot v)))\n            (map vec)\n            (into {})))\n\n        (with-integrity (:awaken me)\n          (md-awaken me)\n          #_(println :md-awaken-complete))\n        me))))\n\n;;; --- family ------------------------------------\n\n(def mm-obj #?(:clj Object :cljs js/Object))\n\n(defn md-kids [me] (md-get me :kids))\n\n(defn fm-kids-observe [me newk oldk c]\n  (when-not (= oldk unbound)\n    ;;(prn :fm-kids-observe)\n    (let [lostks (difference (set oldk) (set newk))]\n      (when-not (empty? lostks)\n        (doseq [k lostks]\n          ;;(prn :obs-k-not2be!! k)\n          (not-to-be k))))))\n\n(defmethod observe [:kids ::family]\n  [_ me newk oldk c]\n  ;;(prn :observe-kids-family-method)\n  (fm-kids-observe me newk oldk c))\n\n(defmethod not-to-be [::family]\n  [me]\n  ;;(prn :family-not-to-be! me)\n  (doseq [k (:kids @me)]\n    (when (md-ref? k)\n      ;;(prn :fm-not-to-be-kid!)\n      (not-to-be k)))\n  (not-to-be-self me))\n\n(defn mx-par [me]\n  (:par @me))\n\n(defn fget= [seek poss]\n  (assert (or (any-ref? poss) (string? poss))\n    (str \"poss not ref \" (string? poss)))\n  ;; (println :fget= (fn? seek) (keyword? seek))\n  (cond\n    (not (any-ref? poss))                                   ;; string child of html label?\n    (do (println :fget=bailnotref poss)\n        false)\n\n    (fn? seek) (do                                          ;; (println :trying-fn)\n                 (seek poss))\n    (keyword? seek) (do\n                      ;; (trx :fget=sees seek (:name @poss) (ia-type poss))\n                      (or (= seek (:name @poss))\n                        (isa? (ia-type poss) seek)))\n    :else (do (trx :fget=-else-pplain=! seek)\n              (= seek poss))))\n\n(defn fasc [what where & options]\n  (when (and where what)\n    (let [options (merge {:me? false :wocd? true}\n                    (apply hash-map options))]\n      (binding [*depender* (if (:wocd? options) nil *depender*)]\n        (or (and (:me? options)\n                 (fget= what where)\n                 where)\n\n          (when-let [par (:par @where)]\n            (fasc what par\n              :me? true))\n\n          (when (:must? options)\n            (err :fasc-must-failed what where options)))))))\n\n(defn nextsib [mx]\n  (without-c-dependency\n    (loop [sibs (md-kids (mx-par mx))]\n      (when sibs\n        (if (= mx (first sibs))\n          (second sibs)\n          (recur (rest sibs)))))))\n\n(defn prevsib [mx]\n  (without-c-dependency\n    (loop [sibs (md-kids (mx-par mx))]\n      (when sibs\n        (cond\n          (= mx (first sibs)) nil\n          (= mx (second sibs)) (first sibs)\n          :default\n          (recur (rest sibs)))))))\n\n(defn fget [what where & options]\n  ;;(println :fget-entry (if (any-ref? where) [(:tag @where)(:class @where)] where) (any-ref? where))\n  (when (and where what (any-ref? where))\n    ;(println :w)\n    (let [options (merge {:me? false, :inside? false, :up? true, :wocd? true ;; without-c-dependency\n                          } (apply hash-map options))]\n      ;;(println :fget-opts options)\n      ;(println :T)\n      (binding [*depender* (if (:wocd? options) nil *depender*)]\n\n        (when (any-ref? where)\n          ;(println :f)\n          (or (and (:me? options)\n                   (fget= what where)\n                   where)\n\n            (and (:inside? options)\n                 (if-let [kids (md-get where :kids)]\n                   (do\n                     (trx nil :inside-kids!!! (:name @where))\n                     (if-let [netkids (remove #{(:skip options)} kids)]\n                       (do\n                         (some #(fget what %\n                                  :me? true\n                                  :inside? true\n                                  :up? false) netkids))\n                       (trx nil :no-net-kids)))\n                   (trx nil :inside-no-kids (:name @where))))\n\n            (and (:up? options)\n                 (when-let [par (:par @where)]\n                   (fget what par\n                     :up? true\n                     :me? true\n                     :skip where\n                     :inside? true)))\n\n            (when (:must? options)\n              (err :fget-must-failed what where options))))))))\n\n(defn fm! [what where]\n  (fget what where :me? false :inside? true :must? true :up? true))\n\n(defmacro mdv! [what slot & [me]]\n  (let [me (or me 'me)]\n    `(md-get (tiltontec.model.core/fm! ~what ~me) ~slot)))\n\n(defn mxu-find-name\n  \"Search up the matrix from node 'where' looking for element with given name\"\n  [where name]\n  (fget #(= name (md-get % :name))\n    where :me? false :up? true :inside? false))\n\n(defmacro fmu [name & [me]]\n  (let [me-ref (or me 'me)]\n    `(let [name# ~name]\n       (fget #(= name# (md-get % :name))\n         ~me-ref :me? false :up? true :inside? false))))\n\n(defn mxu-find-id\n  \"Search up the matrix from node 'where' looking for element with given id\"\n  [where id]\n  (fget #(= id (md-get % :id))\n    where :me? false :up? true :inside? false))\n\n(defn mxu-find-type\n  \"Search matrix ascendants only from node 'me' for first with given tag\"\n  [me type]\n  (assert me)\n  (fasc (fn [visited]\n          (= type (ia-type visited))) me))\n\n(defn fmi-w-class [where class]\n  (fget #(when (any-ref? %)\n           (= class (md-get % :class)))\n    where :inside? true :up? false))\n\n(defn mxi-find\n  \"Search matrix below node 'where' for node with property and value\"\n  [where property value]\n  (fget #(when (any-ref? %)\n           (= value (md-get % property)))\n    where :inside? true :up? false))\n\n(defn fmo [me id-name]\n  (or (mxu-find-name me id-name)\n    (mxu-find-id me id-name)\n    (throw (str \"fmo> not id or name \" id-name))))\n\n(defn fmov\n  ([me id-name]\n   (fmov me id-name :value))\n  ([me id-name slot-name]\n   (when-let [mx (fmo me id-name)]\n     (if (contains? @mx slot-name)\n       (mget mx slot-name)\n       (throw (str \"fmov> \" id-name \" lacks \" slot-name \" property\"))))))\n\n(defmacro the-kids [& tree]\n  `(binding [*par* ~'me]\n     (assert *par*)\n     ;;(println :bingo-par (any-ref? *par*))\n     (doall (remove nil? (flatten (list ~@tree))))))\n\n(defmacro cFkids [& tree]\n  `(cF (assert ~'me \"no me for cFkids\")\n     ;;(print :cFkids-me!!! (:id (deref ~'me)))\n     (the-kids ~@tree)))\n\n(defn kid-values-kids [me x-kids]\n  (let [k-key (md-get me :kid-key)\n        _ (assert k-key)\n        x-kids (when (not= x-kids unbound)\n                 (into {} (for [k x-kids]\n                            [(k-key k) k])))\n        k-factory (md-get me :kid-factory)]\n    (assert (and k-factory))\n\n    (doall\n      (map-indexed\n        (fn [idx kid-value]\n          (or (and x-kids (get x-kids kid-value))\n            (binding [*par* me]\n              (k-factory me kid-value))))\n        (md-get me :kid-values)))))\n\n"]}