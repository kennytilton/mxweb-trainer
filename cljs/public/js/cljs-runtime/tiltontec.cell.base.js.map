{"version":3,"sources":["tiltontec/cell/base.cljc"],"mappings":"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","names":["tiltontec.cell.base/+pulse+","cljs.core.atom","cljs.core/deref","tiltontec.cell.base/pulse-now","tiltontec.cell.base/cells-init","cljs.core/reset!","tiltontec.cell.base/*causation*","tiltontec.cell.base/*call-stack*","tiltontec.cell.base/*depender*","tiltontec.cell.base/*defer-changes*","tiltontec.cell.base/+client-q-handler+","js/tiltontec","js/tiltontec.cell","js/tiltontec.cell.base","js/tiltontec.cell.base.unbound","tiltontec.cell.base/unbound","cljs.core.gensym","tiltontec.cell.base/when-bound","x","cljs.core.not_EQ_","js/tiltontec.cell.base.uncurrent","tiltontec.cell.base/uncurrent","tiltontec.cell.base/*not-to-be*","tiltontec.cell.base/*unfinished-business*","tiltontec.cell.base/*within-integrity*","tiltontec.cell.base/*finbiz-id*","tiltontec.cell.base/*c-prop-depth*","tiltontec.cell.base/+c-debug+","tiltontec.cell.base/+stop+","var_args","G__26746","tiltontec.cell.base/cells-reset","js/Error","tiltontec.cell.base.cells_reset","options","tiltontec.cell.base/+cause","cljs.core/first","tiltontec.cell.base/c-stopper","why","tiltontec.cell.base/+c-stopper+","G__26752","tiltontec.cell.base/c-stop","tiltontec.cell.base.c_stop","fexpr__26753","tiltontec.cell.base/c-stopped","tiltontec.cell.base/ustack$","tag","cljs.core/vec","cljs.core.map","c","G__26759","tiltontec.cell.base/c-assert","args-arr__4885__auto__","len__4864__auto__","i__4865__auto__","argseq__4886__auto__","cljs.core/IndexedSeq","seq26756","G__26757","cljs.core/next","G__26758","self__4851__auto__","assertion","cljs.core.println","fmt$","fmt-args","args__4870__auto__","argseq__4871__auto__","tiltontec.cell.base/c-break","seq26761","self__4852__auto__","cljs.core/seq","args","tiltontec.cell.base/c-warn","seq26763","cljs.core.apply","cljs.core/str","cljs.core.derive","tiltontec.cell.base/ia-type","it","cljs.core/Atom","cljs.core/meta","cljs.core/type","tiltontec.cell.base/ia-type?","typ","cljs.core.isa_QMARK_","tiltontec.cell.base/c-formula?","tiltontec.cell.base/c-ref?","tiltontec.cell.base/c-me","ref","tiltontec.cell.base/c-slot","tiltontec.cell.base/c-state","tiltontec.cell.base/c-input?","tiltontec.cell.base/c-rule","tiltontec.cell.base/c-pulse","tiltontec.cell.base/c-pulse-last-changed","tiltontec.cell.base/c-pulse-observed","tiltontec.cell.base/c-useds","tiltontec.cell.base/c-users","tiltontec.cell.base/c-callers","tiltontec.cell.base/c-optimize","tiltontec.cell.base/c-ephemeral?","tiltontec.cell.base/c-lazy","tiltontec.cell.base/c-synapses","tiltontec.cell.base/c-synaptic?","tiltontec.cell.base/c-value","tiltontec.util.core/any-ref?","cljs.core/map?","tiltontec.cell.base/c-optimized-away?","cljs.core/contains?","cljs.core._EQ_","tiltontec.cell.base/c-model","rc","tiltontec.cell.base/c-md-name","temp__5751__auto__","md","or__4253__auto__","tiltontec.cell.base/c-slot-name","tiltontec.cell.base/c-value-state","v","tiltontec.cell.base/c-unbound?","tiltontec.cell.base/c-valid?","tiltontec.cell.base/caller-ensure","used","new-caller","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.conj","tiltontec.cell.base/caller-drop","caller","cljs.core.disj","tiltontec.cell.base/unlink-from-callers","iter__4652__auto__","s__26784","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__26786","cljs.core/chunk-buffer","i__26785","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26783","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","tiltontec.util.core/rmap-setf","tiltontec.cell.base/c-slots","k","cljs.core/set","G__26787","tiltontec.cell.base/md-ref?","js/tiltontec.cell.base.mdead?","method-table__4747__auto__","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__26788","cljs.core/MultiFn","cljs.core.symbol","tiltontec.cell.base/mdead?","me","m","cljs.core/*print-level*","tiltontec.cell.base/md-slot-owning?","class-name","slot-name","tiltontec.cell.base/c-debug","cljs.core/chunk-first"],"sourcesContent":["(ns tiltontec.cell.base\n  (:require\n   #?(:cljs [tiltontec.util.base :as utm\n             :refer-macros [prog1 b-when def-rmap-slots]]\n      :clj  [tiltontec.util.base :as utm\n             :refer :all])\n   #?(:cljs [cljs.test\n             :refer-macros [deftest is]])\n\n    #?(:cljs [tiltontec.util.core\n              :refer [cl-find set-ify any-ref? err ia-ref\n                      make-fifo-queue fifo-empty? fifo-peek fifo-pop\n                      fifo-data fifo-add rmap-setf\n                      wtrx-test]\n              :as ut]\n       :clj [tiltontec.util.core :refer :all :as ut])))\n\n\n;; --- the Cells beef -----------------------\n\n(def +pulse+ (#?(:clj ref :cljs atom) 0))\n\n(defn pulse-now [] @+pulse+)\n\n(defn cells-init []\n  #?(:cljs (reset! +pulse+ 0)\n     :clj (dosync\n           (ref-set +pulse+ 0))))\n\n(def ^:dynamic *causation* '())\n(def ^:dynamic *call-stack* nil)\n(def ^:dynamic *depender*\n  \"*depender* let's us differentiate between the call stack and\nand dependency. The problem with overloading *call-stack* with both roles\nis that we miss cyclic reentrance when we use without-c-dependency in a\nrule to get once behavior or just when fm-traversing to find someone\"\n  nil)\n\n(def ^:dynamic *defer-changes* false)\n(def +client-q-handler+ (atom nil))\n\n\n(defonce unbound (gensym \"unbound-cell-value\"))\n(defn when-bound [x]\n  (when (not= x unbound) x))\n\n(defonce uncurrent (gensym \"uncurrent-formulaic-value\"))\n\n(def ^:dynamic *not-to-be* false)\n(def ^:dynamic *unfinished-business* nil)\n(def ^:dynamic *within-integrity* false)\n\n;; --- debug stuff -----------------------------\n(def ^:dynamic *finbiz-id* 0)\n(def ^:dynamic *c-prop-depth* 0)\n\n(def +c-debug+ (atom false))\n(def ^:dynamic +stop+ (atom false)) ;; emergency brake\n\n(defmacro pcell [tag c]\n  `(println :pcell ~tag (c-slot ~c)(c-state ~c)))\n\n;; --- procedure division ----------------------\n\n(defn cells-reset\n  ([] (cells-reset {}))\n  ([options]\n   (reset! +c-debug+ (:debug options false))\n   (reset! +pulse+ 0)\n   (reset! +client-q-handler+ (:client-queue-handler options))))\n\n(defmacro without-c-dependency [& body]\n  `(binding [*depender* nil]\n      ~@body))\n\n(defmacro cpr [& r]\n  `(without-c-dependency\n    (pln @+pulse+ ~@r)))\n\n(defn +cause []\n    (first *causation*))\n\n;; --- 19000 ----------------------------------\n\n(defn c-stopper [why]\n  (reset! +stop+ why)) ;; in webserver, make sure each thread binds this freshly\n\n(def +c-stopper+ (atom c-stopper))\n\n(defn c-stop\n  ([] (c-stop true))\n  ([why]\n   (@+c-stopper+ why)))\n\n(defn c-stopped []\n  @+stop+)\n\n(defmacro un-stopped [& body]\n  `(when-not @+stop+\n     ~@body))\n\n(defn ustack$ [tag] ;; debug aid\n  (str tag \"ustack> \"(vec (map (fn [c] (:slot @c)) *call-stack*))))\n\n(defn c-assert\n  ([assertion] (when-not assertion\n                 (println #_ ut/err \"c-assert anon failed\")))\n  ([assertion fmt$ & fmt-args]\n   (when-not +stop+\n           (when-not assertion\n                   (println #_ ut/err (str \"c-assert> \" fmt$ fmt-args))))))\n\n(defn c-break [& args]\n  (when-not +stop+\n    (println #_ ut/err (str args))))\n\n(defn c-warn [& args]\n  (when-not +stop+\n    (println (apply str \"WARNING: \" args))))\n\n;; ------------------------------------------------------\n\n(derive ::model ::object)\n(derive ::cell ::object)\n(derive ::c-formula ::cell)\n\n(defn ia-type [it]\n #?(:clj (type it)\n    :cljs (cond\n            (instance? cljs.core.Atom it)\n            (:type (meta it))\n            :default (type it))))\n\n(defn ia-type? [it typ]\n  (isa? (ia-type it) typ))\n\n(defn c-formula? [c]\n  (ia-type? c ::c-formula))\n\n(defn c-ref? [x]\n  (ia-type? x ::cell))\n\n(def-rmap-slots c-\n  me slot state input? rule pulse pulse-last-changed pulse-observed\n  useds users callers optimize ephemeral?\n  lazy synapses synaptic?)\n\n(defn c-value [c]\n  (assert (any-ref? c))\n  (cond\n    (and (c-ref? c)\n         (map? @c)) (:value @c)\n    :else @c))\n\n(defn c-optimized-away? [c]\n  (cond\n    (c-ref? c) (or (not (map? @c))\n                 (not (contains? @c ::state))\n                   (= :optimized-away (::state @c)))\n    :else true))\n\n(defn c-model [rc]\n  (:me @rc))\n\n(defn c-md-name [c]\n  (if-let [md (c-model c)]\n    (or (:name @md)\n      \"anon\")\n    \"no-md\"))\n\n(defn c-slot-name [rc]\n  (:slot @rc))\n\n(defn c-value-state [rc]\n  (let [v (c-value rc)]\n    (cond\n      (= v unbound) :unbound\n      (= v uncurrent) :uncurrent\n      :else :valid)))\n\n(defn c-unbound? [rc]\n  (= :unbound (c-value-state rc)))\n\n(defn c-valid? [rc]\n  (= :valid (c-value-state rc)))\n\n;; --- dependency maintenance --------------------------------\n\n(defn caller-ensure [used new-caller]\n  ;; (trx :caller-ensure :used (c-slot used) (c-slot new-caller))\n  (#?(:clj alter :cljs swap!)\n   used assoc :callers (conj (c-callers used) new-caller)))\n\n(defn caller-drop [used caller]\n  (#?(:clj alter :cljs swap!)\n   used assoc :callers (disj (c-callers used) caller)))\n\n(defn unlink-from-callers [c]\n  (for [caller (c-callers c)]\n    (caller-drop c caller))\n  (rmap-setf [:callers c] nil))\n\n;; debug aids --------------\n\n(defn c-slots [c k]\n  (assert (c-ref? c))\n  (set (map c-slot (k @c))))\n\n;; --- defmodel rizing ---------------------\n\n(defn md-ref? [x]\n  ;;(trx :md-ref?-sees x)\n  (and (any-ref? x)))\n       ;; hhack (ia-type? x ::model)\n\n\n;; --- mdead? ---\n\n(defmulti mdead? (fn [me]\n                   (assert (or (nil? me)\n                               (md-ref? me)))\n                   [(type (when me @me))]))\n\n(defmethod mdead? :default [me]\n  (if-let [m (meta me)]\n    (= :dead (::state m))\n    false))\n\n;;---\n\n#?(:cljs (set! *print-level* 3)) ;; cells are recursive data for now\n\n(defn md-slot-owning? [class-name slot-name]\n  ;; hhack\n  false)\n\n(defn c-debug [c tag])\n"]}