{"version":3,"sources":["tiltontec/mxweb/gen.cljc"],"mappings":"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","names":["tiltontec.mxweb.gen/tagfo","me","cljs.core/deref","cljs.core/select-keys","tiltontec.mxweb.gen/+tag-sid+","cljs.core.atom","tiltontec.mxweb.gen/mxweb-init!","cljs.core/reset!","tiltontec.mxweb.gen/tag-by-id","tiltontec.mxweb.gen/dom-tag","dom","cljs.core.println","cljs.core._EQ_","G__29799","tag","cljs.core.get","js/Error","tiltontec.mxweb.gen/make-tag","attrs","aux","cFkids","tag-id","or__4253__auto__","cljs.core.swap_BANG_","cljs.core/inc","mx-tag","cljs.core.apply","tiltontec.model.core/make","cljs.core.distinct","cljs.core.conj","cljs.core/keys","cljs.core.concat","cljs.core/vec","cljs.core/concat","cljs.core/seq","cljs.core.dissoc","cljs.core/assoc","tiltontec.cell.evaluate/not-to-be","temp__5753__auto__","style","tiltontec.cell.base/md-ref?","seq__29866","chunk__29867","count__29868","i__29869","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","k","cljs.core/dissoc","tiltontec.model.core/mget","tiltontec.cell.evaluate/not-to-be-self","tiltontec.mxweb.gen/evt-mx","e","tiltontec.mxweb.gen/target-value","evt","goog.dom.forms/getValue"],"sourcesContent":["(ns tiltontec.mxweb.gen\n  (:refer-clojure :exclude [map meta time])\n  (:require\n    #?(:cljs [goog.dom.forms :as form])\n    #?(:clj [clojure.pprint :refer :all]\n       :cljs cljs.pprint :clj :refer [pprint cl-format])\n            [tiltontec.cell.base :refer [md-ref? ia-type unbound]]\n            [tiltontec.cell.evaluate :refer [not-to-be not-to-be-self]]\n            [tiltontec.model.core :refer [make mget] :as md]))\n\n(defn tagfo [me]\n  (select-keys @me [:id :tag :class :name]))\n\n(def +tag-sid+ (atom -1))\n\n(defn mxweb-init! []\n  (reset! +tag-sid+ -1))\n\n(def tag-by-id (atom {}))\n\n(defn dom-tag [dom]\n  (cond\n    (nil? dom) (do (println :outthetop!!!)\n                   nil)\n\n    ;; where we specify string content to, eg, button, we get an\n    ;; automatic span for the string that has no ID. Hopefully, where\n    ;; dom-tiltontec.mxweb is requested they will be OK with us tracking the nearest ascendant.\n    (= \"\" (.-id dom)) (do ;;(println :no-id-try-pa (.-parentNode dom))\n                          (dom-tag (.-parentNode dom)))\n    :default (do\n               ;;(println :dom-tiltontec.mxweb-really-sees-id (.-id dom)(type (.-id dom)))\n               (let [tag (get @tag-by-id (.-id dom))]\n                 (assert tag (str \"dom-tiltontec.mxweb did not find js for id \" (.-id dom)\n                                  \" of dom \" dom))\n                 tag))))\n\n(defn make-tag [tag attrs aux cFkids]\n  ;;(prn :make-tiltontec.mxweb tiltontec.mxweb attrs aux)\n  (let [tag-id (str (or (:id attrs)\n                        (str tag \"-\" (swap! +tag-sid+ inc))))\n        mx-tag (apply make\n                      :type :mxweb.base/tag\n                      :tag tag\n                      :id tag-id\n                      :attr-keys (distinct (conj (keys attrs) :id))\n                      :kids cFkids\n                      (concat (vec (apply concat (seq (dissoc attrs :id))))\n                              (vec (apply concat (seq aux)))))]\n    ;;(println :made-tiltontec.mxweb!! tiltontec.mxweb-id (keys @mx-tiltontec.mxweb))\n    (swap! tag-by-id assoc tag-id mx-tag)\n    mx-tag))\n\n(defmethod not-to-be [:mxweb.base/tag] [me]\n  ;; todo: worry about leaks\n  ;; (println :not-to-be-tiltontec.mxweb!!! (tagfo me))\n\n  (when-let [style (:style @me)]\n    (when (md-ref? style)\n      ;;(println :popping-style style)\n      (not-to-be style)))\n\n  (doseq [k (:kids @me)]\n    (when (md-ref? k)\n      (not-to-be k)))\n  (swap! tag-by-id dissoc (mget me :id))\n  (not-to-be-self me))\n\n;;; n.b. Above list of tags needs to be extended, or just use make-tiltontec.mxweb\n\n;;; --- event conveniences -------------------\n\n(defn evt-mx [e]\n  (dom-tag (.-target e)))\n\n#?(:cljs\n   (defn target-value [evt]\n     (form/getValue (.-target evt))))\n\n"]}