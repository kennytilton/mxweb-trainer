{"version":3,"sources":["tiltontec/cell/integrity.cljc"],"mappings":"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","names":["cljs.core/*print-level*","tiltontec.cell.integrity/*one-pulse?*","tiltontec.cell.integrity/*dp-log*","var_args","G__27012","tiltontec.cell.integrity/data-pulse-next","js/Error","tiltontec.cell.integrity.data_pulse_next","pulse-info","tiltontec.util.base.call_trc","cljs.core/deref","tiltontec.cell.base/+pulse+","cljs.core.swap_BANG_","cljs.core/inc","tiltontec.cell.integrity/c-current?","c","cljs.core._EQ_","tiltontec.cell.base/c-pulse","tiltontec.cell.integrity/c-pulse-update","key","tiltontec.cell.base/c-optimized-away?","cljs.core/assoc","tiltontec.cell.integrity/+ufb-opcodes+","tiltontec.cell.integrity/unfin-biz","cljs.core.into","iter__4652__auto__","s__27034","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__27036","cljs.core/chunk-buffer","i__27035","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27033","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.atom","tiltontec.cell.integrity/ufb-queue","opcode","or__4253__auto__","tiltontec.util.core/err","tiltontec.cell.integrity/ufb-queue-ensure","tiltontec.cell.integrity/ufb-add","continuation","tiltontec.util.core/fifo-add","tiltontec.cell.integrity/ufb-assert-q-empty","temp__5751__auto__","uqp","tiltontec.util.core/fifo-peek","tiltontec.cell.integrity/*ufb-do-q*","G__27090","tiltontec.cell.integrity/ufb-do","tiltontec.cell.integrity.ufb_do","q","vec__27096","cljs.core.nth","defer-info","task","tiltontec.util.core/fifo-pop","tiltontec.cell.integrity/finish-business","tiltontec.cell.base/+stop+","tag","G__27100","cljs.core/Keyword","tiltontec.util.core/plnk","clientq","cqh","tiltontec.cell.base/+client-q-handler+","vec__27108","task-fn","tiltontec.cell.integrity/call-with-integrity","action","tiltontec.cell.base/*within-integrity*","result__26632__auto__","*within-integrity*-orig-val__27129","*defer-changes*-orig-val__27130","*within-integrity*-temp-val__27131","*defer-changes*-temp-val__27132","tiltontec.cell.base/*defer-changes*","cljs.core/chunk-first"],"sourcesContent":["(ns tiltontec.cell.integrity\n  (:require\n    ;#?(:clj [taoensso.tufte :as tufte :refer :all]\n    ;  :cljs [taoensso.tufte :as tufte :refer-macros [defnp p profiled profile]])\n    #?(:cljs [tiltontec.util.base\n                      :refer-macros [wtrx trx prog1]]\n               :clj  [tiltontec.util.base\n                      :refer :all])\n\n            [tiltontec.util.core\n             :refer [ensure-vec err pln plnk fifo-add fifo-peek fifo-pop cl-find]]\n            #?(:cljs [tiltontec.cell.base\n                      :refer-macros [pcell un-stopped]\n                      :refer [+pulse+ c-pulse c-optimized-away?\n                              +client-q-handler+ c-stopped\n                              *within-integrity* *defer-changes*\n                              *depender* caller-ensure]]\n               :clj  [tiltontec.cell.base :refer :all])))\n\n;; --- the pulse ------------------------------\n\n#?(:cljs (set! *print-level* 3))\n\n(def ^:dynamic *one-pulse?* false)\n\n(def ^:dynamic *dp-log* false)\n\n(defn data-pulse-next\n  ([] (data-pulse-next :anon))\n  ([pulse-info]\n   (when-not *one-pulse?*\n     (when *dp-log*\n       (trx \"dp-next> \" (inc @+pulse+) pulse-info))\n     (#?(:clj alter :cljs swap!) +pulse+ inc))))            ;; hhack try as commute\n\n(defn c-current? [c]\n  (= (c-pulse c) @+pulse+))\n\n(defn c-pulse-update [c key]\n  ;(pcell :pulse-upd c)\n  ;(println :pulse-upd-opti (c-optimized-away? c))\n  (when-not (c-optimized-away? c)\n    (assert (>= @+pulse+ (c-pulse c)))\n    (#?(:clj alter :cljs swap!) c assoc :pulse @+pulse+)))\n\n;; --- ufb utils ----------------------------\n\n(def +ufb-opcodes+ [:tell-dependents\n                        :awaken\n                        :client\n                        :ephemeral-reset\n                        :change])\n\n(def unfin-biz\n  ;; no nested finbiz allowed as of now, so just\n  ;; build it and in use fill the queues, ufb -do them, and\n  ;; ensure they are empty before continuing.\n  (into {} (for [i +ufb-opcodes+]\n             [i (#?(:cljs atom :clj ref) [])])))\n\n(defn ufb-queue [opcode]\n  (or (opcode unfin-biz)\n      (err (str \"ufb-queue> opcode unknown: \" opcode))))\n\n(defn ufb-queue-ensure [opcode]\n  \"vestigial\"\n  (ufb-queue opcode))\n\n(defn ufb-add [opcode continuation]\n  (fifo-add (ufb-queue-ensure opcode) continuation))\n\n(defn ufb-assert-q-empty [opcode]\n  (if-let [uqp (fifo-peek (ufb-queue-ensure opcode))]\n    (do\n      (err (str \"ufb queue %s not empty, viz %s\")\n           opcode uqp))\n    true))\n\n;; --- the ufb and integrity beef ----------------------\n;;    proper ordering of state propagation\n\n\n(def ^:dynamic *ufb-do-q* nil)                              ;; debug aid\n\n(defn ufb-do\n  ([opcode]\n   (ufb-do (ufb-queue opcode) opcode))\n\n  ([q opcode]\n   (when-let [[defer-info task] (fifo-pop q)]\n     (trx nil :ufb-do-yep defer-info task)\n     (task opcode defer-info)\n     (recur q opcode))))\n\n(defn finish-business []\n  (un-stopped\n    (loop [tag :tell-dependents]\n      (case tag\n        :tell-dependents\n        (do (do ;; p :telldeps\n              (ufb-do :tell-dependents))\n            (ufb-do :awaken)\n\n            (recur\n              (if (fifo-peek (ufb-queue-ensure :tell-dependents))\n                :tell-dependents\n                :handle-clients)))\n\n        :handle-clients\n        (do\n          (plnk :handle-clients!!!)\n          (when-let [clientq (ufb-queue :client)]\n            (if-let [cqh @+client-q-handler+]\n              (cqh clientq)\n              (ufb-do clientq :client))\n\n            (recur\n              (if (fifo-peek (ufb-queue :client))\n                (do (plnk :re-handling-clients!!!!)\n                    :handle-clients)\n                :ephemeral-reset))))\n\n        :ephemeral-reset\n        (do (ufb-do :ephemeral-reset)\n            (recur :deferred-state-change))\n\n        :deferred-state-change\n        (when-let [[defer-info task-fn] (fifo-pop (ufb-queue :change))]\n          (data-pulse-next :defferred-state-chg)\n          (task-fn :change defer-info)\n          (recur :tell-dependents))))))\n\n(declare call-with-integrity)\n\n(defmacro with-integrity [[opcode info] & body]\n  `(call-with-integrity\n    ~opcode\n    ~info\n    (fn [~'opcode ~'defer-info]\n      ~@body)))\n\n(defmacro with-cc [id & body]\n  `(with-integrity (:change ~id)\n     ~@body))\n\n(defmacro without-integrity [& body]\n  `(binding\n       [*within-integrity* false\n        *defer-changes* false\n        *call-stack* '()]\n     ~@body))\n\n(defn call-with-integrity [opcode defer-info action]\n  ;;; hhack\n  ;    (when opcode\n  ;  (assert (cl-find opcode +ufb-opcodes+)\n  ;          (str \"Invalid opcode for with-integrity: %s. Allowed values: %s\"\n  ;                  opcode +ufb-opcodes+)))\n  #_ (when (and  opcode *within-integrity*)\n    (println :cwi opcode *within-integrity*))\n  (do                                                       ;; wtrx (0 100 \"cwi-begin\" opcode *within-integrity*)\n    (do ;; hun-stopped\n     (#?(:cljs do :clj dosync)\n      (cond\n        ;; hhack (c-stopped) (println :cwi-sees-stop!!!!!!!!!!!)\n\n        *within-integrity*\n        (if opcode\n          (prog1\n           :deferred-to-ufb-1\n           ;; SETF is supposed to return the value being installed\n           ;; in the place, but if the SETF is deferred we return\n           ;; something that will help someone who tries to use\n           ;; the setf'ed value figure out what is going on:\n           ;; (pln :cwi-defers opcode (first (ensure-vec defer-info)))\n           (ufb-add opcode [defer-info action]))\n\n          ;; thus by not supplying an opcode one can get something\n          ;; executed immediately, potentially breaking data integrity\n          ;; but signifying by having coded the with-integrity macro\n          ;; that one is aware of this.\n          ;;\n          ;; If you have read this comment.\n          ;;\n          (do\n\n            ;;(pln :cwi-bypassing-integrity!!! opcode defer-info)\n             (action opcode defer-info)))\n\n        :else (binding [*within-integrity* true\n                        *defer-changes* false]\n                ;;(println :cwi-go-1)\n                (when (or (zero? @+pulse+)\n                          (= opcode :change))\n                  (data-pulse-next [:cwi opcode defer-info]))\n\n                ;;(pln :cwi-action!! opcode )\n                (prog1\n                 (action opcode defer-info)\n\n                 (do ;; tufte/p :finbiz\n                    (finish-business))\n                 (ufb-assert-q-empty :tell-dependents)\n                 (ufb-assert-q-empty :change))))))))\n\n\n\n:integrity-ok\n"]}