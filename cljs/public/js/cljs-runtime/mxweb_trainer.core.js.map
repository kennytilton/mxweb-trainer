{"version":3,"sources":["mxweb_trainer/core.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","mxweb-trainer.core/color-input","tiltontec.mxweb.gen/make-tag","tiltontec.cell.core.make_c_formula","tiltontec.cell.base/unbound","slot-c#","me","tiltontec.cell.base/c-model","cell","slot-name","tiltontec.cell.base/c-slot","cache","tiltontec.cell.base/c-value","js/Error","*par*-orig-val__36570","tiltontec.model.core/*par*","*par*-temp-val__36571","cljs.core.doall","cljs.core.remove","cljs.core/nil?","cljs.core/flatten","cljs.core/List","tiltontec.cell.core/cI","e","cljs.core.prn","tiltontec.mxweb.gen/evt-mx","tiltontec.mxweb.gen/target-value","tiltontec.model.core/mset!","mxweb-trainer.core/clock","tiltontec.model.core/mget","tiltontec.model.core/mxu-find-name","js/Date","clojure.string.split","cljs.core/first","tiltontec.cell.core.cI","js/setInterval","mxweb-trainer.core/start","js/console.log","root","goog.dom/getElement","app-matrix","tiltontec.model.core.make","*depender*-orig-val__36572","tiltontec.cell.base/*depender*","*depender*-temp-val__36573","*par*-orig-val__36574","*par*-temp-val__36575","*par*-orig-val__36576","*par*-temp-val__36577","*par*-orig-val__36578","*par*-temp-val__36579","app-dom","tiltontec.mxweb.html.tag_dom_create","goog.dom/appendChild","mxweb-trainer.core/init","mxweb-trainer.core/stop"],"sourcesContent":["(ns mxweb-trainer.core\n  (:require [goog.dom :as dom]\n            [clojure.string :as str]\n            [tiltontec.cell.core :refer-macros [cF cFonce] :refer [cI]]\n            [tiltontec.model.core\n             :refer [matrix mx-par mget mget mset! mset!\n                     mxi-find mxu-find-name] :as md]\n            [tiltontec.mxweb.gen-macro\n             :refer-macros [section header h1 input footer p a span label ul li div button br]]\n            [tiltontec.mxweb.gen\n             :refer [make-tag dom-tag evt-mx target-value]]\n            [tiltontec.mxweb.html :refer [tag-dom-create]]))\n\n(enable-console-print!)\n\n(defn color-input []\n  (div {:class \"color-input\"}\n    \"Time color: \"\n    (input {:name     :timecolor\n            :tag/type \"text\"\n            :value    (cI \"#f00\")\n            :onchange (fn [e]\n                        (prn :evt (evt-mx e) (target-value e))\n                        (mset! (evt-mx e)\n                         :value (target-value e)))})))\n\n(defn clock []\n  (div {:class   \"example-clock\"\n        :style   (cF (str \"color:\" (mget (mxu-find-name me :timecolor) :value)))\n\n        :content (cF (if (mget me :tick)\n                       (-> (js/Date.)\n                         .toTimeString\n                         (str/split \" \")\n                         first)\n                       \"*checks watch*\"))}\n    {:tick   (cI false :ephemeral? true)\n     :ticker (cF (js/setInterval\n                   #(mset! me :tick true) 1000))}))\n\n;; start is called by init and after code reloading finishes\n(defn ^:dev/after-load start []\n  (js/console.log \"start\")\n  (let [root (dom/getElement \"app\")\n        app-matrix (md/make\n                     ::ticktock\n                     :mx-dom (cFonce (md/with-par me\n                                       [(div {}\n                                          (h1 {} \"Hello, world. 'Tis now....\")\n                                          (clock)\n                                          (color-input)\n                                          )])))\n        app-dom (tag-dom-create\n                  (md/mget app-matrix :mx-dom))]\n\n    (set! (.-innerHTML root) nil)\n    (dom/appendChild root app-dom)))\n\n(defn init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (js/console.log \"init\")\n  (start))\n\n;; this is called before any code is reloaded\n(defn ^:dev/before-load stop []\n  (js/console.log \"stop\"))\n\n(comment\n  (ns ticktock.core\n    (:require [goog.dom :as dom]\n              [clojure.string :as str]\n              [tiltontec.cell.core :refer-macros [cF cFonce] :refer [cI]]\n              [tiltontec.model.core\n               :refer [matrix mx-par <mget <mget mset!> mset!>\n                       mxi-find mxu-find-name] :as md]\n              [mxweb.gen\n               :refer [evt-tag target-value]\n               :refer-macros [h1 input div span]]\n              [mxweb.html :refer [tag-dom-create]]))\n\n  (enable-console-print!)\n\n  (defn clock []\n    (div {:class   \"example-clock\"\n          :style   (cF (str \"color:\" (<mget (mxu-find-name me :timecolor) :value)))\n\n          :content (cF (if (<mget me :tick)\n                         (-> (js/Date.)\n                           .toTimeString\n                           (str/split \" \")\n                           first)\n                         \"*checks watch*\"))}\n      {:tick   (cI false :ephemeral? true)\n       :ticker (cF (js/setInterval\n                     #(mset!> me :tick true) 1000))}))\n\n  (defn color-input []\n    (div {:class \"color-input\"}\n      \"Time color: \"\n      (input {:name     :timecolor\n              :tag/type \"text\"\n              :value    (cI \"#f00\")\n              :onchange #(mset!> (evt-tag %)\n                           :value (target-value %))})))\n\n  (let [root (dom/getElement \"tagroot\")\n        app-matrix (md/make\n                     ::ticktock\n                     :mx-dom (cFonce (md/with-par me\n                                       [(div {}\n                                          (h1 {} \"Hello, world. 'Tis now....\")\n                                          (clock)\n                                          (color-input))])))\n        app-dom (tag-dom-create\n                  (md/<mget app-matrix :mx-dom))]\n\n    (set! (.-innerHTML root) nil)\n    (dom/appendChild root app-dom)))"]}