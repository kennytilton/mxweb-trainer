{"version":3,"sources":["mxweb_trainer/core.cljs"],"mappings":";AAcA,AAACA;AAID,2BAAA,3BAAuBC;AAAvB,AACE,YAAA,ZAACC;;AACD,IAAMC,OAAK,oBAAA,pBAACC;IACNC,aAAW,iHAAA,iGAAA,lNAACC,4QAES,AAAAC,0HAAA,qDAAA,AAAA,wcAAA,0DAAA,KAAA,sDAAAC,4BAAA,oDAAA,WAAAC;AAAA,AAAA,IAAAC,KAAA,AAAAC,4BAAAF;IAAAG,OAAAH;IAAAI,YAAA,AAAAC,2BAAAL;IAAAM,QAAA,AAAAC,4BAAAP;AAAA,AAAA,IAAAQ,uCAAAC;IAAAC,uCAAA;AAAA,AAAA,CAAAD,2CAAAC;;AAAA,IAAA,AAAQ,IAAAC,kCAAAC;IAAAC,kCAAaZ;AAAb,AAAA,CAAAW,uCAAAC;;AAAA,IAAA,AAAA,0FACG,AAACC;UADJ,AAAA,CAAAF,uCAAAD;WAAR,AAAA,CAAAF,2CAAAD;;IAErBO,UAAQ,AAACC,kEACC,qCAAA,rCAACC,0BAAQrB;AANzB,AAQE,kBAAA,jBAAM,AAAaF;;AACnB,OAACwB,qBAAgBxB,KAAKqB;;AAE1B,0BAAA,1BAAMI;AAAN,AAIE,YAAA,ZAAC1B;;AACD,OAACD;;AAGH,0BAAA,1BAAwB4B;AAAxB,AACE,mBAAA,ZAAC3B;;AAEH","names":["cljs.core/enable-console-print!","mxweb-trainer.core/start","js/console.log","root","goog.dom/getElement","app-matrix","tiltontec.model.core.make","tiltontec.cell.core.make_c_formula","tiltontec.cell.base/unbound","slot-c#","me","tiltontec.cell.base/c-model","cell","slot-name","tiltontec.cell.base/c-slot","cache","tiltontec.cell.base/c-value","*depender*-orig-val__33193","tiltontec.cell.base/*depender*","*depender*-temp-val__33194","*par*-orig-val__33195","tiltontec.model.core/*par*","*par*-temp-val__33196","mxweb-trainer.mission.just-html/mission","app-dom","tiltontec.mxweb.html.tag_dom_create","tiltontec.model.core/mget","goog.dom/appendChild","mxweb-trainer.core/init","mxweb-trainer.core/stop"],"sourcesContent":["(ns mxweb-trainer.core\n  (:require [goog.dom :as dom]\n            [clojure.string :as str]\n            [tiltontec.cell.core :refer-macros [cF cFonce] :refer [cI]]\n            [tiltontec.model.core\n             :refer [matrix mx-par mget mget mset! mset!\n                     mxi-find mxu-find-name] :as md]\n            [tiltontec.mxweb.gen-macro\n             :refer-macros [section audio img header h1 h2 h3 input footer p a span label ul li div button br]]\n            [tiltontec.mxweb.gen\n             :refer [make-tag dom-tag evt-mx target-value]]\n            [tiltontec.mxweb.html :refer [tag-dom-create]]\n            [mxweb-trainer.mission.just-html :as ex1]))\n\n(enable-console-print!)\n\n\n;; start is called by init and after code reloading finishes\n(defn ^:dev/after-load start []\n  (js/console.log \"start\")\n  (let [root (dom/getElement \"app\")\n        app-matrix (md/make\n                     ::ticktock\n                     :mx-dom (cFonce (md/with-par me\n                                       [(ex1/mission)])))\n        app-dom (tag-dom-create\n                  (md/mget app-matrix :mx-dom))]\n\n    (set! (.-innerHTML root) nil)\n    (dom/appendChild root app-dom)))\n\n(defn init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (js/console.log \"init\")\n  (start))\n\n;; this is called before any code is reloaded\n(defn ^:dev/before-load stop []\n  (js/console.log \"stop\"))\n\n(comment\n  (ns ticktock.core\n    (:require [goog.dom :as dom]\n              [clojure.string :as str]\n              [tiltontec.cell.core :refer-macros [cF cFonce] :refer [cI]]\n              [tiltontec.model.core\n               :refer [matrix mx-par <mget <mget mset!> mset!>\n                       mxi-find mxu-find-name] :as md]\n              [mxweb.gen\n               :refer [evt-tag target-value]\n               :refer-macros [h1 input div span]]\n              [mxweb.html :refer [tag-dom-create]]))\n\n  (enable-console-print!)\n\n  (defn clock []\n    (div {:class   \"example-clock\"\n          :style   (cF (str \"color:\" (<mget (mxu-find-name me :timecolor) :value)))\n\n          :content (cF (if (<mget me :tick)\n                         (-> (js/Date.)\n                           .toTimeString\n                           (str/split \" \")\n                           first)\n                         \"*checks watch*\"))}\n      {:tick   (cI false :ephemeral? true)\n       :ticker (cF (js/setInterval\n                     #(mset!> me :tick true) 1000))}))\n\n  (defn color-input []\n    (div {:class \"color-input\"}\n      \"Time color: \"\n      (input {:name     :timecolor\n              :tag/type \"text\"\n              :value    (cI \"#f00\")\n              :onchange #(mset!> (evt-tag %)\n                           :value (target-value %))})))\n\n  (let [root (dom/getElement \"tagroot\")\n        app-matrix (md/make\n                     ::ticktock\n                     :mx-dom (cFonce (md/with-par me\n                                       [(div {}\n                                          (h1 {} \"Hello, world. 'Tis now....\")\n                                          (clock)\n                                          (color-input))])))\n        app-dom (tag-dom-create\n                  (md/<mget app-matrix :mx-dom))]\n\n    (set! (.-innerHTML root) nil)\n    (dom/appendChild root app-dom)))"]}