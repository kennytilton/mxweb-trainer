{"version":3,"sources":["tiltontec/model/base.cljc"],"mappings":"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","names":["tiltontec.model.base/md-name","ref","cljs.core/deref","tiltontec.model.base/md-state","cljs.core/meta","tiltontec.model.base/md-cz","tiltontec.model.base/md-cell","me","slot","G__29419","tiltontec.model.base/md-install-cell","c","tiltontec.cell.base/c-ref?","cljs.core.swap_BANG_","cljs.core/assoc","tiltontec.util.core/rmap-setf","tiltontec.cell.base/c-input?","tiltontec.cell.base/c-value","js/tiltontec","js/tiltontec.model","js/tiltontec.model.base","js/tiltontec.model.base.md-awaken-before","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__29449","cljs.core/MultiFn","cljs.core.symbol","tiltontec.model.base/md-awaken-before","tiltontec.cell.base/ia-type","tiltontec.model.base/md-awaken","js/Error","tiltontec.cell.base.c_assert","cljs.core._EQ_","tiltontec.util.core/rmap-meta-setf","cljs.core.doall","iter__4652__auto__","s__29470","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__29472","cljs.core/chunk-buffer","i__29471","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29469","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/keys","G__29491","G__29492","G__29502","G__29503","tiltontec.cell.observer/observe","G__29499","G__29506","tiltontec.cell.base/unbound","tiltontec.cell.evaluate/c-awaken","cljs.core/chunk-first"],"sourcesContent":["(ns tiltontec.model.base\n  (:require\n   #?(:clj [clojure.test :refer :all]\n      :cljs [cljs.test\n             :refer-macros [deftest is are]])\n   #?(:cljs [tiltontec.util.base\n             :refer-macros [trx wtrx prog1 *trx?* def-rmap-slots def-rmap-meta-slots]]\n      :clj  [tiltontec.util.base :refer :all])\n   [tiltontec.util.core :refer [type-of err rmap-setf rmap-meta-setf]]\n   #?(:clj [tiltontec.cell.base :refer :all :as cty]\n      :cljs [tiltontec.cell.base\n             :refer-macros [without-c-dependency]\n             :refer [cells-init c-optimized-away? c-formula? c-value c-optimize\n                     c-unbound? c-input? ia-type? ia-type\n                     c-model mdead? c-valid? c-useds c-ref? md-ref?\n                     c-state +pulse+ c-pulse-observed c-assert\n                     *call-stack* *defer-changes* unbound\n                     c-rule c-me c-value-state c-callers caller-ensure\n                     unlink-from-callers *causation* c-md-name\n                      c-synaptic? caller-drop\n                     c-pulse c-pulse-last-changed c-ephemeral? c-slot c-slots\n                     *depender* *not-to-be*\n                     *c-prop-depth* md-slot-owning? c-lazy] :as cty])\n   #?(:cljs [tiltontec.cell.integrity\n             :refer-macros [with-integrity]]\n      :clj [tiltontec.cell.integrity :refer [with-integrity]])\n   #?(:clj [tiltontec.cell.observer\n            :refer [observe]]\n      :cljs [tiltontec.cell.observer\n             :refer [observe]])\n\n   #?(:cljs [tiltontec.cell.core\n             :refer-macros [cF cF+ c-reset-next! cFonce cFn]\n             :refer [cI c-reset! make-cell]]\n      :clj [tiltontec.cell.core :refer :all])\n\n   [tiltontec.cell.evaluate :refer [c-get c-awaken]]\n   #?(:clj [tiltontec.model.macros :refer :all]\n      :cljs [tiltontec.model.macros\n             :refer-macros [pme]])\n   ))\n\n(def-rmap-slots md-\n  name)\n\n(def-rmap-meta-slots md-\n  state cz)\n\n(defn md-cell [me slot]\n  (slot (:cz (meta me))))\n\n;;; --- md initialization ---\n\n(declare md-awaken)\n\n(defn md-install-cell [me slot c]\n  ;; note that c (a misnomer) might not be a Cell\n  (cond\n    (c-ref? c) (do\n                 (#?(:clj alter :cljs swap!) c assoc\n                        :slot slot\n                        :me me)\n                 (rmap-setf [slot me]\n                            (when (c-input? c)\n                              (c-value c)))\n                 true)\n    :else (do\n            (rmap-setf [slot me] c)\n            false)))\n\n(defmulti md-awaken-before ia-type)\n\n(defmethod md-awaken-before :default [me]\n  #_(println :awaken-before-default!!!!!!!!!!!!\n    (ia-type me) (meta me)))\n\n(defn md-awaken\n  \"(1) do initial evaluation of all ruled slots\n   (2) call observers of all slots\"\n  [me]\n  (assert me \"md-awaken passed nil\")\n  ;;(println :md-awaken!!!!!!!!)\n  (md-awaken-before me)\n  (c-assert (= :nascent (md-state me)))\n  (rmap-meta-setf [:state me] :awakening)\n  (doall\n   (for [slot (keys @me)]\n     ;; next is tricky: if slot is in :cz but nil, it has been \n     ;; optimized-away and observed then in the rare case\n     ;; it gets optimized away on other than the initial\n     ;; value.\n     (when-let [c (slot (md-cz me) :not-found)]\n       (cond\n         (= c :not-found)\n         ;; these need at least an initial observe\n         (do #_(when (and (= slot :kids)(slot @me))\n               (pme :md-awaken-kids-nocz-nonnil-obs slot\n                 (keys (md-cz me))\n                 (:kids (md-cz me) :hunh))\n               )\n             (observe slot me (slot @me) unbound nil))\n         :else (c-awaken c)))))\n  (rmap-meta-setf [:state me] :awake)\n  me)\n\n\n\n\n\n\n"]}