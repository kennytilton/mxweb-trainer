{"version":3,"sources":["tiltontec/mxweb/style.cljs"],"mappings":"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","names":["tiltontec.mxweb.style/tag-dom","me","id","tiltontec.model.core/mget","js/Error","or__4253__auto__","temp__5751__auto__","dom","goog.dom/getElement","tiltontec.model.core/backdoor-reset!","cljs.core.println","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","tiltontec.mxweb.style/make-css-inline","seq29820","G__29821","cljs.core/first","cljs.core/next","self__4851__auto__","tag","stylings","tiltontec.mxweb.base/tag?","cljs.core.apply","tiltontec.model.core/make","iter__4652__auto__","s__29844","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__29846","cljs.core/chunk-buffer","i__29845","vec__29853","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29843","cljs.core/chunk-rest","vec__29863","cljs.core/cons","cljs.core/rest","k","_","cljs.core.partition","tiltontec.mxweb.style/style-string","s","cljs.core/map?","clojure.string.join","s__29873","b__29875","i__29874","vec__29876","iter__29872","vec__29879","v","cljs.pprint.cl_format","cljs.core/name","cljs.core._EQ_","tiltontec.cell.base/ia-type","G__29882","cljs.core/deref","cljs.core/select-keys","cljs.core/type","tiltontec.cell.observer/observe-by-type","slot","newv","oldv","cljs.core.not_EQ_","tiltontec.cell.base/unbound","goog.style/setStyle","cljs.core/chunk-first"],"sourcesContent":["(ns tiltontec.mxweb.style\n  (:require\n    [tiltontec.util.base :refer [type-cljc]]\n    [tiltontec.util.core :refer [pln]]\n    [tiltontec.cell.base :refer [md-ref? ia-type unbound]]\n    [tiltontec.cell.observer :refer [observe observe-by-type]]\n    [tiltontec.cell.evaluate :refer [not-to-be not-to-be-self]]\n    [tiltontec.model.core\n     :refer-macros [the-kids mdv!]\n     :refer [mget fasc fm! make mset! backdoor-reset!]\n     :as md]\n    [tiltontec.mxweb.base :refer [tag?]]\n    [goog.dom.classlist :as classlist]\n    [goog.style :as gstyle]\n    [goog.dom :as dom]\n    [cljs.pprint :as pp]\n    [clojure.string :as str]))\n\n;; todo move to utill or put all this in tiltontec.mxweb\n\n(defn tag-dom [me]\n  ;; This will return nil when 'me' is being awakened and rules\n  ;; are firing for the first time, because 'me' has not yet\n  ;; been installed in the actual DOM, so call this only\n  ;; from event handlers and the like.\n  (let [id (mget me :id)]\n    (assert id)\n    (or (mget me :dom-cache)\n        (if-let [dom (dom/getElement (str id))]\n          (backdoor-reset! me :dom-cache dom)\n          (println :style-no-element id :found)))))\n\n(defn make-css-inline [tag & stylings]\n  (assert (tag? tag))\n  (apply make\n         :type :mxweb.css/css\n         ;;:tiltontec.mxweb-id (when tiltontec.mxweb (:id @tiltontec.mxweb))\n         :tag tag\n         :css-keys (for [[k _] (partition 2 stylings)] k)\n         stylings))\n\n(defn style-string [s]\n  (cond\n    (string? s) s\n    (nil? s) \"\"\n\n    (map? s)\n    (str/join \";\"\n      (for [[k v] s]\n        (pp/cl-format nil \"~a:~a\" (name k) v)))\n\n    (= :mxweb.css/css (ia-type s))\n    (style-string (select-keys @s (:css-keys @s)))\n\n    :default\n    (do\n      (println :ss-unknown s (type s))\n      \"\")))\n\n(defmethod observe-by-type [:mxweb.css/css] [slot me newv oldv _]\n  (when (not= oldv unbound)\n    (let [dom (tag-dom (:tag @me))]\n      ;;(println :dom-hit-setStyle!!! slot newv oldv)\n      (gstyle/setStyle dom (name slot) newv))))"]}