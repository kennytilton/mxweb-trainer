{"version":3,"sources":["tiltontec/cell/observer.cljc"],"mappings":"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","names":["js/tiltontec","js/tiltontec.cell","js/tiltontec.cell.observer","js/tiltontec.cell.observer.observe-by-type","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__29223","cljs.core/MultiFn","cljs.core.symbol","tiltontec.cell.observer/observe-by-type","slot-name","me","new-val","old-val","c","tiltontec.util.base/type-cljc","slot","js/tiltontec.cell.observer.observe","fexpr__29224","tiltontec.cell.observer/observe","tiltontec.cell.observer/+observe-default-handler+","temp__5751__auto__","cljs.core/deref","obs","var_args","G__29226","tiltontec.cell.observer/c-observe","js/Error","why","tiltontec.cell.observer.c_observe","tiltontec.cell.base/unbound","prior-value","tiltontec.cell.base/c-ref?","cljs.core/integer?","tiltontec.cell.base/+pulse+","tiltontec.util.core/rmap-setf","tiltontec.cell.base/c-slot","tiltontec.cell.base/c-model","tiltontec.cell.base/c-value","temp__5753__auto__","cell-observer","G__29227","G__29228","G__29229","G__29230","G__29231"],"sourcesContent":["(ns tiltontec.cell.observer\n  (:require\n   #?(:cljs [tiltontec.util.base\n             :refer [type-cljc]\n             :refer-macros [trx]]\n      :clj  [tiltontec.util.base\n             :refer :all])\n\n    #?(:cljs [tiltontec.util.core\n              :refer [cl-find set-ify any-ref? err ia-ref\n                      make-fifo-queue fifo-empty? fifo-peek fifo-pop\n                      fifo-data fifo-add rmap-setf\n                      wtrx-test]\n              :as ut]\n       :clj [tiltontec.util.core :refer :all :as ut])\n\n   [tiltontec.cell.base\n    :refer [c-ref? md-ref? unbound\n            +pulse+ c-slot c-value c-md-name\n            c-model] :as cty]\n\n   #?(:clj [tiltontec.model.macros :refer :all]\n      :cljs [tiltontec.model.macros\n             :refer-macros [pme]])))\n\n(defmulti observe-by-type (fn [slot-name me new-val old-val c]\n                    [(type-cljc me)]))\n\n(defmethod observe-by-type :default [slot me new-val old-val c]\n  #_ (when (not= old-val unbound)\n    (println :obs-by-typefallthru slot (type-cljc me) new-val)))    \n\n(defmulti observe (fn [slot-name me new-val old-val c]\n                    [slot-name (type-cljc me)]))\n\n(def +observe-default-handler+ (atom nil))\n\n(defmethod observe :default [slot me new-val old-val c]\n  (if-let [obs @+observe-default-handler+]\n    (do ;; (println :app-def-obs-hanler!!!)\n        (obs slot me new-val old-val c))\n    (observe-by-type slot me new-val old-val c)))\n\n(defmacro defobserver [slot types params & body]\n     (assert (keyword? slot) \"defobserver> slot should be a keyword.\")\n     (let [ftypes (concat types (take-last (- 1 (count types))\n                                           '(:tiltontec.cell.base/model\n                                             ;;js/Object js/Object\n                                             )))\n           fparams (concat params\n                           (take-last (- 4 (count params))\n                                      '(me new-value old-value c)))]\n       `(defmethod tiltontec.cell.observer/observe\n          [~slot ~@ftypes][~'slot ~@fparams]\n          ~@body)))\n\n(defmacro fn-obs\n  \"Shortcut definer for cell-specific observers.\nbody can be multiple sexprs with access to\ncall parameters: slot, me, new, old, and c.\"\n  [& body]\n  `(fn [~'slot ~'me ~'new ~'old ~'c]\n     ~@body))\n\n(defn c-observe\n  ([c why]\n   (c-observe c unbound why))\n  ([c prior-value why]\n   (assert (c-ref? c))\n   (assert (integer? @+pulse+))\n   (rmap-setf [:pulse-observed c] @+pulse+)\n   (observe (c-slot c)(c-model c)(c-value c) prior-value c)\n   (when-let [cell-observer (:obs @c)]\n     (cell-observer (c-slot c)(c-model c)(c-value c) prior-value c))))\n\n\n"]}