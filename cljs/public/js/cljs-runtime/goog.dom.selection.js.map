{
"version":3,
"file":"goog.dom.selection.js",
"lineCount":144,
"mappings":"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",
"sources":["goog/dom/selection.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for working with selections in input boxes and text\n * areas.\n *\n * @see ../demos/dom_selection.html\n */\n\n\ngoog.provide('goog.dom.selection');\n\ngoog.require('goog.dom.InputType');\ngoog.require('goog.string');\n\n\n/**\n * Sets the place where the selection should start inside a textarea or a text\n * input\n * @param {Element} textfield A textarea or text input.\n * @param {number} pos The position to set the start of the selection at.\n */\ngoog.dom.selection.setStart = function(textfield, pos) {\n  'use strict';\n  if (goog.dom.selection.useSelectionProperties_(textfield)) {\n    textfield.selectionStart = pos;\n  }\n};\n\n\n/**\n * Return the place where the selection starts inside a textarea or a text\n * input\n * @param {Element} textfield A textarea or text input.\n * @return {number} The position where the selection starts or 0 if it was\n *     unable to find the position or no selection exists. Note that we can't\n *     reliably tell the difference between an element that has no selection and\n *     one where it starts at 0.\n */\ngoog.dom.selection.getStart = function(textfield) {\n  'use strict';\n  return goog.dom.selection.getEndPoints_(textfield, true)[0];\n};\n\n\n/**\n * Returns the start and end points of the selection within a textarea in IE.\n * IE treats newline characters as \\r\\n characters, and we need to check for\n * these characters at the edge of our selection, to ensure that we return the\n * right cursor position.\n * @param {TextRange} range Complete range object, e.g., \"Hello\\r\\n\".\n * @param {TextRange} selRange Selected range object.\n * @param {boolean} getOnlyStart Value indicating if only start\n *     cursor position is to be returned. In IE, obtaining the end position\n *     involves extra work, hence we have this parameter for calls which need\n *     only start position.\n * @return {!Array<number>} An array with the start and end positions where the\n *     selection starts and ends or [0,0] if it was unable to find the\n *     positions or no selection exists. Note that we can't reliably tell the\n *     difference between an element that has no selection and one where\n *     it starts and ends at 0. If getOnlyStart was true, we return\n *     -1 as end offset.\n * @private\n */\ngoog.dom.selection.getEndPointsTextareaIe_ = function(\n    range, selRange, getOnlyStart) {\n  'use strict';\n  // Create a duplicate of the selected range object to perform our actions\n  // against. Example of selectionRange = \"\" (assuming that the cursor is\n  // just after the \\r\\n combination)\n  var selectionRange = selRange.duplicate();\n\n  // Text before the selection start, e.g.,\"Hello\" (notice how range.text\n  // excludes the \\r\\n sequence)\n  var beforeSelectionText = range.text;\n  // Text before the selection start, e.g., \"Hello\" (this will later include\n  // the \\r\\n sequences also)\n  var untrimmedBeforeSelectionText = beforeSelectionText;\n  // Text within the selection , e.g. \"\" assuming that the cursor is just after\n  // the \\r\\n combination.\n  var selectionText = selectionRange.text;\n  // Text within the selection, e.g.,  \"\" (this will later include the \\r\\n\n  // sequences also)\n  var untrimmedSelectionText = selectionText;\n\n  // Boolean indicating whether we are done dealing with the text before the\n  // selection's beginning.\n  var isRangeEndTrimmed = false;\n  // Go over the range until it becomes a 0-lengthed range or until the range\n  // text starts changing when we move the end back by one character.\n  // If after moving the end back by one character, the text remains the same,\n  // then we need to add a \"\\r\\n\" at the end to get the actual text.\n  while (!isRangeEndTrimmed) {\n    if (range.compareEndPoints('StartToEnd', range) == 0) {\n      isRangeEndTrimmed = true;\n    } else {\n      range.moveEnd('character', -1);\n      if (range.text == beforeSelectionText) {\n        // If the start position of the cursor was after a \\r\\n string,\n        // we would skip over it in one go with the moveEnd call, but\n        // range.text will still show \"Hello\" (because of the IE range.text\n        // bug) - this implies that we should add a \\r\\n to our\n        // untrimmedBeforeSelectionText string.\n        untrimmedBeforeSelectionText += '\\r\\n';\n      } else {\n        isRangeEndTrimmed = true;\n      }\n    }\n  }\n\n  if (getOnlyStart) {\n    // We return -1 as end, since the caller is only interested in the start\n    // value.\n    return [untrimmedBeforeSelectionText.length, -1];\n  }\n  // Boolean indicating whether we are done dealing with the text inside the\n  // selection.\n  var isSelectionRangeEndTrimmed = false;\n  // Go over the selected range until it becomes a 0-lengthed range or until\n  // the range text starts changing when we move the end back by one character.\n  // If after moving the end back by one character, the text remains the same,\n  // then we need to add a \"\\r\\n\" at the end to get the actual text.\n  while (!isSelectionRangeEndTrimmed) {\n    if (selectionRange.compareEndPoints('StartToEnd', selectionRange) == 0) {\n      isSelectionRangeEndTrimmed = true;\n    } else {\n      selectionRange.moveEnd('character', -1);\n      if (selectionRange.text == selectionText) {\n        // If the selection was not empty, and the end point of the selection\n        // was just after a \\r\\n, we would have skipped it in one go with the\n        // moveEnd call, and this implies that we should add a \\r\\n to the\n        // untrimmedSelectionText string.\n        untrimmedSelectionText += '\\r\\n';\n      } else {\n        isSelectionRangeEndTrimmed = true;\n      }\n    }\n  }\n  return [\n    untrimmedBeforeSelectionText.length,\n    untrimmedBeforeSelectionText.length + untrimmedSelectionText.length\n  ];\n};\n\n\n/**\n * Returns the start and end points of the selection inside a textarea or a\n * text input.\n * @param {Element} textfield A textarea or text input.\n * @return {!Array<number>} An array with the start and end positions where the\n *     selection starts and ends or [0,0] if it was unable to find the\n *     positions or no selection exists. Note that we can't reliably tell the\n *     difference between an element that has no selection and one where\n *     it starts and ends at 0.\n */\ngoog.dom.selection.getEndPoints = function(textfield) {\n  'use strict';\n  return goog.dom.selection.getEndPoints_(textfield, false);\n};\n\n\n/**\n * Returns the start and end points of the selection inside a textarea or a\n * text input.\n * @param {Element} textfield A textarea or text input.\n * @param {boolean} getOnlyStart Value indicating if only start\n *     cursor position is to be returned. In IE, obtaining the end position\n *     involves extra work, hence we have this parameter. In FF, there is not\n *     much extra effort involved.\n * @return {!Array<number>} An array with the start and end positions where the\n *     selection starts and ends or [0,0] if it was unable to find the\n *     positions or no selection exists. Note that we can't reliably tell the\n *     difference between an element that has no selection and one where\n *     it starts and ends at 0. If getOnlyStart was true, we return\n *     -1 as end offset.\n * @private\n */\ngoog.dom.selection.getEndPoints_ = function(textfield, getOnlyStart) {\n  'use strict';\n  textfield = /** @type {!HTMLInputElement|!HTMLTextAreaElement} */ (textfield);\n  var startPos = 0;\n  var endPos = 0;\n  if (goog.dom.selection.useSelectionProperties_(textfield)) {\n    startPos = textfield.selectionStart;\n    endPos = getOnlyStart ? -1 : textfield.selectionEnd;\n  }\n  return [startPos, endPos];\n};\n\n\n/**\n * Sets the place where the selection should end inside a text area or a text\n * input\n * @param {Element} textfield A textarea or text input.\n * @param {number} pos The position to end the selection at.\n */\ngoog.dom.selection.setEnd = function(textfield, pos) {\n  'use strict';\n  if (goog.dom.selection.useSelectionProperties_(textfield)) {\n    textfield.selectionEnd = pos;\n  }\n};\n\n\n/**\n * Returns the place where the selection ends inside a textarea or a text input\n * @param {Element} textfield A textarea or text input.\n * @return {number} The position where the selection ends or 0 if it was\n *     unable to find the position or no selection exists.\n */\ngoog.dom.selection.getEnd = function(textfield) {\n  'use strict';\n  return goog.dom.selection.getEndPoints_(textfield, false)[1];\n};\n\n\n/**\n * Sets the cursor position within a textfield.\n * @param {Element} textfield A textarea or text input.\n * @param {number} pos The position within the text field.\n */\ngoog.dom.selection.setCursorPosition = function(textfield, pos) {\n  'use strict';\n  if (goog.dom.selection.useSelectionProperties_(textfield)) {\n    // Mozilla directly supports this\n    textfield.selectionStart = pos;\n    textfield.selectionEnd = pos;\n\n  }\n};\n\n\n/**\n * Sets the selected text inside a textarea or a text input\n * @param {Element} textfield A textarea or text input.\n * @param {string} text The text to change the selection to.\n */\ngoog.dom.selection.setText = function(textfield, text) {\n  'use strict';\n  textfield = /** @type {!HTMLInputElement|!HTMLTextAreaElement} */ (textfield);\n  if (goog.dom.selection.useSelectionProperties_(textfield)) {\n    var value = textfield.value;\n    var oldSelectionStart = textfield.selectionStart;\n    var before = value.substr(0, oldSelectionStart);\n    var after = value.substr(textfield.selectionEnd);\n    textfield.value = before + text + after;\n    textfield.selectionStart = oldSelectionStart;\n    textfield.selectionEnd = oldSelectionStart + text.length;\n  } else {\n    throw new Error('Cannot set the selection end');\n  }\n};\n\n\n/**\n * Returns the selected text inside a textarea or a text input\n * @param {Element} textfield A textarea or text input.\n * @return {string} The selected text.\n */\ngoog.dom.selection.getText = function(textfield) {\n  'use strict';\n  textfield = /** @type {!HTMLInputElement|!HTMLTextAreaElement} */ (textfield);\n  if (goog.dom.selection.useSelectionProperties_(textfield)) {\n    var s = textfield.value;\n    return s.substring(textfield.selectionStart, textfield.selectionEnd);\n  }\n\n  throw new Error('Cannot get the selection text');\n};\n\n\n/**\n * Returns the selected text within a textarea in IE.\n * IE treats newline characters as \\r\\n characters, and we need to check for\n * these characters at the edge of our selection, to ensure that we return the\n * right string.\n * @param {TextRange} selRange Selected range object.\n * @return {string} Selected text in the textarea.\n * @private\n */\ngoog.dom.selection.getSelectionRangeText_ = function(selRange) {\n  'use strict';\n  // Create a duplicate of the selected range object to perform our actions\n  // against. Suppose the text in the textarea is \"Hello\\r\\nWorld\" and the\n  // selection encompasses the \"o\\r\\n\" bit, initial selectionRange will be \"o\"\n  // (assuming that the cursor is just after the \\r\\n combination)\n  var selectionRange = selRange.duplicate();\n\n  // Text within the selection , e.g. \"o\" assuming that the cursor is just after\n  // the \\r\\n combination.\n  var selectionText = selectionRange.text;\n  // Text within the selection, e.g.,  \"o\" (this will later include the \\r\\n\n  // sequences also)\n  var untrimmedSelectionText = selectionText;\n\n  // Boolean indicating whether we are done dealing with the text inside the\n  // selection.\n  var isSelectionRangeEndTrimmed = false;\n  // Go over the selected range until it becomes a 0-lengthed range or until\n  // the range text starts changing when we move the end back by one character.\n  // If after moving the end back by one character, the text remains the same,\n  // then we need to add a \"\\r\\n\" at the end to get the actual text.\n  while (!isSelectionRangeEndTrimmed) {\n    if (selectionRange.compareEndPoints('StartToEnd', selectionRange) == 0) {\n      isSelectionRangeEndTrimmed = true;\n    } else {\n      selectionRange.moveEnd('character', -1);\n      if (selectionRange.text == selectionText) {\n        // If the selection was not empty, and the end point of the selection\n        // was just after a \\r\\n, we would have skipped it in one go with the\n        // moveEnd call, and this implies that we should add a \\r\\n to the\n        // untrimmedSelectionText string.\n        untrimmedSelectionText += '\\r\\n';\n      } else {\n        isSelectionRangeEndTrimmed = true;\n      }\n    }\n  }\n  return untrimmedSelectionText;\n};\n\n\n/**\n * Helper function for returning the range for an object as well as the\n * selection range\n * @private\n * @param {Element} el The element to get the range for.\n * @return {!Array<TextRange>} Range of object and selection range in two\n *     element array.\n */\ngoog.dom.selection.getRangeIe_ = function(el) {\n  'use strict';\n  var doc = el.ownerDocument || el.document;\n\n  var selectionRange = doc.selection.createRange();\n  // el.createTextRange() doesn't work on textareas\n  var range;\n\n  if (/** @type {?} */ (el).type == goog.dom.InputType.TEXTAREA) {\n    range = doc.body.createTextRange();\n    range.moveToElementText(el);\n  } else {\n    range = el.createTextRange();\n  }\n\n  return [range, selectionRange];\n};\n\n\n/**\n * Helper function for canonicalizing a position inside a textfield in IE.\n * Deals with the issue that \\r\\n counts as 2 characters, but\n * move('character', n) passes over both characters in one move.\n * @private\n * @param {Element} textfield The text element.\n * @param {number} pos The position desired in that element.\n * @return {number} The canonicalized position that will work properly with\n *     move('character', pos).\n */\ngoog.dom.selection.canonicalizePositionIe_ = function(textfield, pos) {\n  'use strict';\n  textfield = /** @type {!HTMLTextAreaElement} */ (textfield);\n  if (textfield.type == goog.dom.InputType.TEXTAREA) {\n    // We do this only for textarea because it is the only one which can\n    // have a \\r\\n (input cannot have this).\n    var value = textfield.value.substring(0, pos);\n    pos = goog.string.canonicalizeNewlines(value).length;\n  }\n  return pos;\n};\n\n\n/**\n * Helper function to determine whether it's okay to use\n * selectionStart/selectionEnd.\n *\n * @param {Element} el The element to check for.\n * @return {boolean} Whether it's okay to use the selectionStart and\n *     selectionEnd properties on `el`.\n * @private\n */\ngoog.dom.selection.useSelectionProperties_ = function(el) {\n  'use strict';\n  try {\n    return typeof el.selectionStart == 'number';\n  } catch (e) {\n    // Firefox throws an exception if you try to access selectionStart\n    // on an element with display: none.\n    return false;\n  }\n};\n"],
"names":["goog","provide","require","dom","selection","setStart","goog.dom.selection.setStart","textfield","pos","useSelectionProperties_","selectionStart","getStart","goog.dom.selection.getStart","getEndPoints_","getEndPointsTextareaIe_","goog.dom.selection.getEndPointsTextareaIe_","range","selRange","getOnlyStart","selectionRange","duplicate","beforeSelectionText","text","untrimmedBeforeSelectionText","selectionText","untrimmedSelectionText","isRangeEndTrimmed","compareEndPoints","moveEnd","length","isSelectionRangeEndTrimmed","getEndPoints","goog.dom.selection.getEndPoints","goog.dom.selection.getEndPoints_","startPos","endPos","selectionEnd","setEnd","goog.dom.selection.setEnd","getEnd","goog.dom.selection.getEnd","setCursorPosition","goog.dom.selection.setCursorPosition","setText","goog.dom.selection.setText","value","oldSelectionStart","before","substr","after","Error","getText","goog.dom.selection.getText","s","substring","getSelectionRangeText_","goog.dom.selection.getSelectionRangeText_","getRangeIe_","goog.dom.selection.getRangeIe_","el","doc","ownerDocument","document","createRange","type","InputType","TEXTAREA","body","createTextRange","moveToElementText","canonicalizePositionIe_","goog.dom.selection.canonicalizePositionIe_","string","canonicalizeNewlines","goog.dom.selection.useSelectionProperties_","e"]
}
