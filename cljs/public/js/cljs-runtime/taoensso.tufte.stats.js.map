{"version":3,"sources":["taoensso/tufte/stats.cljc"],"mappings":"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","names":["this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","taoensso.tufte.stats/SortedLongs","taoensso.tufte.stats/->SortedLongs","a","_","taoensso.tufte.stats/sorted-longs?","x","taoensso.tufte.stats/sort-longs","longs","cljs.core/array?","cljs.core/to-array","taoensso.tufte.stats.goog$module$goog$array.sort","taoensso.tufte.stats/long-percentiles","max-idx","Math/round","taoensso.tufte.stats/MinMax","taoensso.tufte.stats/->MinMax","vmin","vmax","taoensso.tufte.stats/min-max","cljs.core/count","vec__33087","cljs.core.nth","v1","min-max","cljs.core.reduce","acc","in","taoensso.tufte.stats/stats","sorted-longs","n","vec__33097","sum","a__4738__auto__","l__4739__auto__","i","mean","mad-sum","Math/abs","mad","p25","p50","p75","p90","p95","p99","taoensso.tufte.stats/merge-stats","m0","m1","map__33108","cljs.core/--destructure-map","cljs.core.get","map__33110","js/Error","n0","min0","max0","sum0","mad-sum0","p25-0","p50-0","p75-0","p90-0","p95-0","p99-0","n1","min1","max1","sum1","mad-sum1","p25-1","p50-1","p75-1","p90-1","p95-1","p99-1","n2","n0-ratio","n1-ratio","sum2","mean2","min2","max2","mad-sum2","p25-2","p50-2","p75-2","p90-2","p95-2","p99-2","mad2","taoensso.tufte.stats/perc","d","round2","taoensso.encore/round2","taoensso.tufte.stats/fmt","nanosecs","ns","G__33117","G__33119","G__33121","G__33123","taoensso.tufte.stats/fmt-comma","cljs.core/reverse","cljs.core.partition","cljs.core.map","clojure.string/join","clojure.string.join","clojure.string/reverse","taoensso.tufte.stats/all-format-columns","taoensso.tufte.stats/default-format-columns","taoensso.tufte.stats/default-format-id-fn","id","p__33130","map__33132","taoensso.tufte.stats/get-max-id-width","stats","format-id-fn","cljs.core/reduce-kv","k","v","c","p__33152","map__33156","taoensso.tufte.stats/format-stats","clock-total","id-stats","columns","sort-fn","max-id-width","opts","m","taoensso.truss.impl/revery?","__in","e","cljs.core/contains?","taoensso.truss.impl/set*","taoensso.truss.impl/-dummy-error","e33163","taoensso.truss.impl/-invar-violation!","cljs.core/long","accounted-total","_id","s","sorted-ids","cljs.core.sort_by","G__33168","taoensso.encore/rcompare","cljs.core/keys","or__4253__auto__","column->pattern","sb","taoensso.encore.str_builder","append-col","column","map__33169","min-width","align","taoensso.encore.sb_append","taoensso.encore.format","G__33172","cljs.core/Keyword","seq__33174","cljs.core/seq","chunk__33175","count__33176","i__33177","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","cljs.core.into","cljs.core._EQ_","cljs.core.get_in","seq__33185","chunk__33186","count__33187","i__33188","seq__33231","chunk__33232","count__33233","i__33234","seq__33261","chunk__33262","count__33263","i__33264","G__33242","G__33254","G__33310","G__33319","seq__33338","chunk__33339","count__33340","i__33341","G__33381","G__33423","seq__33432","chunk__33433","count__33434","i__33435","G__33438","G__33441"],"sourcesContent":["(ns taoensso.tufte.stats\n  \"Basic stats utils. Private, subject to change.\"\n  (:require [taoensso.encore :as enc]\n            [clojure.string  :as str]\n   #?(:cljs [goog.array])))\n\n(comment\n  (do\n    (defn rand-vs [n & [max]] (take n (repeatedly (partial rand-int (or max Integer/MAX_VALUE)))))\n    (def v1 (rand-vs 1e5))\n    (def v1-sorted (sort-longs v1))))\n\n#?(:clj (def ^:const longs-class (Class/forName \"[J\")))\n#?(:clj (defn- longs? [x] (instance? longs-class x)))\n(comment (longs? (long-array 10)))\n\n(deftype SortedLongs [^longs a]\n  #?@(:clj  [clojure.lang.Counted  (count [_] (alength a))]\n      :cljs [            ICounted (-count [_] (alength a))]))\n\n(defn sorted-longs? [x] (instance? SortedLongs x))\n(defn sort-longs ^SortedLongs [longs]\n  (if (sorted-longs? longs)\n    longs\n    #?(:cljs\n       (let [a (if (array? longs) longs (to-array longs))]\n         (goog.array/sort a)\n         (SortedLongs. a))\n\n       :clj\n       (let [^longs a (if (longs? longs) longs (long-array longs))]\n         (java.util.Arrays/sort a) ; O(n.log(n)) on JDK 7+\n         (SortedLongs. a)))))\n\n(comment\n  (vec (.-a (sort-longs nil)))\n  (vec (.-a (sort-longs [])))\n  (vec (.-a (sort-longs (rand-vs 10)))))\n\n(defn long-percentiles\n  \"Returns ?[min p25 p50 p75 p90 p95 p99 max]\"\n  [longs]\n  (let [^longs a (.-a (sort-longs longs))\n        max-idx (dec (alength a))]\n    (if (< max-idx 0)\n      nil\n      [(aget a 0)\n       (aget a (Math/round (* 0.25 max-idx)))\n       (aget a (Math/round (* 0.50 max-idx)))\n       (aget a (Math/round (* 0.75 max-idx)))\n       (aget a (Math/round (* 0.90 max-idx)))\n       (aget a (Math/round (* 0.95 max-idx)))\n       (aget a (Math/round (* 0.99 max-idx)))\n       (aget a                     max-idx)])))\n\n(comment\n  (long-percentiles nil)\n  (long-percentiles [])\n  (enc/qb 100\n    (long-percentiles v1)\n    (long-percentiles v1-sorted)) ; [1580.76 0.02]\n  )\n\n(deftype MinMax [^long vmin ^long vmax])\n(defn min-max \"Returns ?[<min> <max>]\" [longs]\n  (if (sorted-longs? longs)\n    (let [^longs a (.-a ^SortedLongs longs)\n          max-idx (dec (alength a))]\n      (if (< max-idx 0)\n        nil\n        [(aget a 0) (aget a max-idx)]))\n\n    (if (zero? (count longs))\n      nil\n      (let [[v1] longs\n            ^MinMax min-max\n            (reduce\n              (fn [^MinMax acc ^long in]\n                (let [vmin (.-vmin acc)\n                      vmax (.-vmax acc)]\n                  (if (> in vmax)\n                    (MinMax. vmin in)\n                    (if (< in vmin)\n                      (MinMax. in vmin)\n                      acc))))\n              (MinMax. v1 v1)\n              longs)]\n        [(.-vmin min-max) (.-vmax min-max)]))))\n\n(comment (enc/qb 1e6 (min-max [10 9 -3 12]))) ; 267.25\n\n(comment\n  (let [a (long-array v1)]\n    (enc/qb 1e2\n      (reduce (fn [^long acc ^long in] (unchecked-add acc in)) v1)\n      (areduce a idx ret 0 (unchecked-add ret (aget a idx))))))\n\n(defn stats\n  \"Given a collection of longs, returns map with keys:\n  #{:n :min :max :sum :mean :mad-sum :mad :p25 :p50 :p75 :p90 :p95 :p99}, or nil\n  if collection is empty.\"\n  [longs]\n  (when longs\n    (let [sorted-longs (sort-longs longs)\n          ^longs a (.-a sorted-longs)\n          n (alength a)]\n      (if (zero? n)\n        nil\n        (let [sum     (areduce a i acc 0 (+ acc (aget a i)))\n              mean    (/ (double sum) (double n))\n              mad-sum (areduce a i acc 0.0 (+ acc (Math/abs (- (double (aget a i)) mean))))\n              mad     (/ (double mad-sum) (double n))\n\n              [vmin p25 p50 p75 p90 p95 p99 vmax] (long-percentiles sorted-longs)]\n\n          {:n n :min vmin :max vmax :sum sum :mean mean\n           :mad-sum mad-sum :mad mad\n           :p25 p25 :p50 p50 :p75 p75\n           :p90 p90 :p95 p95 :p99 p99})))))\n\n(comment (enc/qb 100 (stats v1) (stats v1-sorted))) ; [1604.23 38.3]\n\n(defn merge-stats\n  \"`(merge-stats (stats c0) (stats c1))` is a basic approximation of `(stats (into c0 c1)))`.\"\n  [m0 m1]\n  (if m0\n    (if m1\n      (let [_ (assert (get m0 :n))\n            _ (assert (get m1 :n))\n\n            {^long   n0       :n\n             ^long   min0     :min\n             ^long   max0     :max\n             ^long   sum0     :sum\n             ^double mad-sum0 :mad-sum\n             ^long   p25-0    :p25\n             ^long   p50-0    :p50\n             ^long   p75-0    :p75\n             ^long   p90-0    :p90\n             ^long   p95-0    :p95\n             ^long   p99-0    :p99} m0\n\n            {^long   n1       :n\n             ^long   min1     :min\n             ^long   max1     :max\n             ^long   sum1     :sum\n             ^double mad-sum1 :mad-sum\n             ^long   p25-1    :p25\n             ^long   p50-1    :p50\n             ^long   p75-1    :p75\n             ^long   p90-1    :p90\n             ^long   p95-1    :p95\n             ^long   p99-1    :p99} m1\n\n            _ (assert (pos? n0))\n            _ (assert (pos? n1))\n\n            n2       (+ n1 n0)\n            n0-ratio (/ (double n0) (double n2))\n            n1-ratio (/ (double n1) (double n2))\n\n            sum2  (+ sum0 sum1)\n            mean2 (/ (double sum2) (double n2))\n            min2  (if (< min0 min1) min0 min1)\n            max2  (if (> max0 max1) max0 max1)\n\n            ;; Batched \"online\" MAD calculation here is better= the standard\n            ;; Knuth/Welford method, Ref. http://goo.gl/QLSfOc,\n            ;;                            http://goo.gl/mx5eSK.\n            ;;\n            ;; Note that there's empirically no advantage in using `mean2` here\n            ;; asap, i.e. to reducing (- v1_i mean2).\n            mad-sum2 (+ mad-sum0 ^double mad-sum1)\n\n            ;;; These are pretty rough approximations. More sophisticated\n            ;;; approaches not worth the extra cost/effort in our case.\n            p25-2 (Math/round (+ (* n0-ratio (double p25-0)) (* n1-ratio (double p25-1))))\n            p50-2 (Math/round (+ (* n0-ratio (double p50-0)) (* n1-ratio (double p50-1))))\n            p75-2 (Math/round (+ (* n0-ratio (double p75-0)) (* n1-ratio (double p75-1))))\n            p90-2 (Math/round (+ (* n0-ratio (double p90-0)) (* n1-ratio (double p90-1))))\n            p95-2 (Math/round (+ (* n0-ratio (double p95-0)) (* n1-ratio (double p95-1))))\n            p99-2 (Math/round (+ (* n0-ratio (double p99-0)) (* n1-ratio (double p99-1))))\n\n            mad2 (/ (double mad-sum2) (double n2))]\n\n        {:n n2 :min min2 :max max2 :sum sum2 :mean mean2\n         :mad-sum mad-sum2 :mad mad2\n         :p25 p25-2 :p50 p50-2 :p75 p75-2\n         :p90 p90-2 :p95 p95-2 :p99 p99-2})\n      m0)\n    m1))\n\n(comment\n  (def v2 [1 2 2 3 2 1])\n  (def v3 [1 3 5 2 1 6])\n  (def v4 (into v2 v3))\n\n  (stats v2) {:min 1, :mean 1.8333333333333333, :mad-sum 3.333333333333333,  :p99 3, :n 6,  :p90 3, :max 3, :mad 0.5555555555555555, :p50 2, :sum 11, :p95 3}\n  (stats v3) {:min 1, :mean 3.0,                :mad-sum 10.0,               :p99 6, :n 6,  :p90 6, :max 6, :mad 1.6666666666666667, :p50 3, :sum 18, :p95 6}\n  (stats v4) {:min 1, :mean 2.4166666666666665, :mad-sum 14.666666666666666, :p99 6, :n 12, :p90 5, :max 6, :mad 1.222222222222222,  :p50 2, :sum 29, :p95 5}\n\n  (merge-stats (stats v2) (stats v3))\n  {:min 1, :mean 2.4166666666666665, :mad-sum 13.333333333333332, :p99 5, :n 12, :p90 5, :max 6, :mad 1.111111111111111, :p50 3, :sum 29, :p95 5}\n\n  (stats (stats v2) v3)\n  {:min 1, :mean 2.4166666666666665, :mad-sum 13.333333333333332, :p99 5, :n 12, :p90 5, :max 6, :mad 1.111111111111111, :p50 3, :sum 29, :p95 5}\n\n  (merge-stats (stats v2) (stats v2))\n  {:min 1, :mean 1.8333333333333333, :mad-sum 6.666666666666666, :p99 3, :n 12, :p90 3, :max 3, :mad 0.5555555555555555, :p50 2, :sum 22, :p95 3}\n\n  (let [v1 (rand-vs 1e5 80)\n        v2 (rand-vs 1e5 20)\n        v3 (into v1 v2)]\n    (mapv :mad\n      [(stats v1)\n       (stats v2)\n       (stats v3)\n       (merge-stats (stats v1) (stats v2))\n       (stats (stats v1) v2)]))\n\n  [19.943705799999858 5.015891904000014 18.906570458826117 12.479798851999936 12.479798851999936]\n  [20.033054674800002 5.013648978000108 18.914174079741983 12.523351826400054 12.523351826400054])\n\n;;;; Formatting\n\n(defn- perc [n d] (str (Math/round (* (/ (double n) (double d)) 100.0)) \"%\"))\n(comment [(perc 1 1) (perc 1 100) (perc 12 44)])\n\n(let [round2 #?(:cljs enc/round2 :clj (fn [n] (format \"%.2f\" n)))]\n  (defn- fmt [nanosecs]\n    (let [ns (double nanosecs)]\n      (cond\n        (>= ns 6e10) (str (round2 (/ ns 6e10)) \"m \")\n        (>= ns 1e9)  (str (round2 (/ ns 1e9))  \"s \")\n        (>= ns 1e6)  (str (round2 (/ ns 1e6))  \"ms\")\n        (>= ns 1e3)  (str (round2 (/ ns 1e3))  \"\u03bcs\")\n        :else        (str (round2    ns)       \"ns\")))))\n\n(comment\n  (format \"%.2f\" 40484.005)\n  (fmt 2387387870))\n\n(defn- fmt-comma [^long n]\n  (str\n    (when (neg? n) \"-\")\n    (->> (str (Math/abs n))\n         (reverse)\n         (partition 3 3 \"\")\n         (map str/join)\n         (str/join \",\")\n         (str/reverse))))\n\n(def     all-format-columns [:n-calls :min   :p25 :p50   :p75 :p90 :p95 :p99 :max :mean :mad :clock :total])\n(def default-format-columns [:n-calls :min #_:p25 :p50 #_:p75 :p90 :p95 :p99 :max :mean :mad :clock :total])\n\n(def default-format-id-fn (fn [id] (str id)))\n\n(defn get-max-id-width [stats {:keys [format-id-fn]\n                               :or   {format-id-fn default-format-id-fn}}]\n  (when stats\n     (reduce-kv\n       (fn [^long acc k v]\n           (let [c (count (format-id-fn k))]\n                (if (> c acc) c acc)))\n       9 ; (count \"Accounted\")\n       stats)))\n\n(defn format-stats\n  \"Returns a formatted table string for given `{<id> <stats>}` map.\n  Assumes nanosecond clock, stats based on profiling id'd nanosecond times.\"\n  [clock-total id-stats {:keys [columns sort-fn format-id-fn max-id-width] :as opts\n                         :or   {columns      default-format-columns\n                                sort-fn      (fn [m] (get m :sum))\n                                format-id-fn default-format-id-fn}}]\n  (when id-stats\n    (enc/have? [:el all-format-columns] :in columns)\n    (let [clock-total (long clock-total)\n          ^long accounted-total\n          (reduce-kv\n            (fn [^long acc _id s]\n              (+ acc (long (get s :sum))))\n            0 id-stats)\n\n          sorted-ids\n          (sort-by\n            (fn [id] (sort-fn (get id-stats id)))\n            enc/rcompare\n            (keys id-stats))\n\n          ^long max-id-width (or max-id-width (get-max-id-width id-stats opts))\n\n          column->pattern\n          {:id      {:heading \"pId\"    :min-width max-id-width :align :left}\n           :n-calls {:heading \"nCalls\"}\n           :min     {:heading \"Min\"}\n           :p25     {:heading \"25% \u2264\"}\n           :p50     {:heading \"50% \u2264\"}\n           :p75     {:heading \"75% \u2264\"}\n           :p90     {:heading \"90% \u2264\"}\n           :p95     {:heading \"95% \u2264\"}\n           :p99     {:heading \"99% \u2264\"}\n           :max     {:heading \"Max\"}\n           :mean    {:heading \"Mean\"}\n           :mad     {:heading \"MAD\"   :min-width 5}\n           :total   {:heading \"Total\" :min-width 6}\n           :clock   {:heading \"Clock\"}}\n\n          sb (enc/str-builder \"\")\n\n          append-col\n          (fn [column s]\n            (let [{:keys [min-width align]\n                   :or   {min-width 10 align :right}}\n                  (get column->pattern column)]\n\n              (enc/sb-append sb\n                (enc/format\n                  (str \"%\" (case align :left \"-\" :right \"\") min-width \"s\")\n                  s))))]\n\n      ; Write header rows\n      (doseq [column (into [:id] columns)]\n        (when-not (= :id column)\n          (enc/sb-append sb \" \"))\n        (append-col column (get-in column->pattern [column :heading])))\n\n      (enc/sb-append sb \"\\n\\n\")\n\n      ; Write id rows\n      (doseq [id sorted-ids]\n        (let [s (get id-stats id)\n              sum  (get s :sum)\n              mean (get s :mean)]\n\n          (append-col :id (format-id-fn id))\n          (doseq [column columns]\n            (enc/sb-append sb \" \")\n            (case column\n              :n-calls (append-col column (fmt-comma (get s :n)))\n              :mean    (append-col column (fmt mean))\n              :mad     (append-col column (str \"\u00b1\" (perc (get s :mad) mean)))\n              :total   (append-col column (perc sum clock-total))\n              :clock   (append-col column (fmt sum))\n              (do      (append-col column (fmt (get s column))))))\n\n          (enc/sb-append sb \"\\n\")))\n\n      ; Write accounted row\n      (enc/sb-append sb \"\\n\")\n      (append-col :id \"Accounted\")\n      (doseq [column columns]\n        (enc/sb-append sb \" \")\n        (case column\n          :total (append-col column (perc accounted-total clock-total))\n          :clock (append-col column (fmt accounted-total))\n          (do    (append-col column \"\"))))\n\n      ; Write clock row\n      (enc/sb-append sb \"\\n\")\n      (append-col :id \"Clock\")\n      (doseq [column columns]\n        (enc/sb-append sb \" \")\n        (case column\n          :total (append-col column \"100%\")\n          :clock (append-col column (fmt clock-total))\n          (do    (append-col column \"\"))))\n\n      (enc/sb-append sb \"\\n\")\n      (str sb))))\n\n(comment\n  (println\n    (format-stats (* 1e6 30)\n      {:foo (stats (rand-vs 1e4 20))\n       :bar (stats (rand-vs 1e2 50))\n       :baz (stats (rand-vs 1e5 30))}) \"\\n\"))\n"]}