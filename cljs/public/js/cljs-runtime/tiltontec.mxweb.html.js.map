{"version":3,"sources":["tiltontec/mxweb/html.cljs"],"mappings":"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","names":["tiltontec.mxweb.html/*mxweb-trace*","tiltontec.mxweb.html/tagfo","me","cljs.core/deref","cljs.core/select-keys","tiltontec.mxweb.html/dom-has-class","dom","class","goog.dom.classlist/contains","tiltontec.mxweb.html/dom-ancestor-by-class","goog.dom/getAncestorByTagNameAndClass","tiltontec.mxweb.html/dom-ancestor-by-tag","tag","tiltontec.mxweb.html/map-less-nils","m","cljs.core.apply","cljs.core/dissoc","iter__4652__auto__","s__35047","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__35049","cljs.core/chunk-buffer","i__35048","vec__35050","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35046","cljs.core/chunk-rest","vec__35056","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","tiltontec.mxweb.html/tag-dom","id","tiltontec.model.core/mget","js/Error","or__4253__auto__","temp__5751__auto__","goog.dom/getElement","tiltontec.model.core/backdoor-reset!","tiltontec.mxweb.html/tag-attrs","mx","beef","cljs.core.remove","cljs.core/nil?","s__35060","b__35062","i__35061","iter__35059","cljs.core/name","G__35067","cljs.core/Keyword","G__35077","tiltontec.mxweb.style/style-string","cljs.core/coll?","clojure.string.join","cljs.core/js-obj","cljs.core/concat","var_args","G__35086","tiltontec.mxweb.html/tag-dom-create","tiltontec.mxweb.html.tag_dom_create","dbg","goog.dom/safeHtmlToNode","goog.html.sanitizer.HtmlSanitizer/sanitize","frag","js/document","seq__35095","chunk__35096","count__35097","i__35098","c__4679__auto__","cljs.core/chunk-first","cljs.core/next","goog.dom/appendChild","goog.dom/createDom","cljs.core.concat","p1__35082#","cljs.core.map","c","cljs.core/some","tiltontec.mxweb.html/+true-html+","tiltontec.mxweb.html/true-html","keyword","tiltontec.mxweb.html/tag","tiltontec.mxweb.html/tag?","cljs.core._EQ_","tiltontec.util.base/type-cljc","tiltontec.cell.observer/observe","_","newv","oldv","cljs.core.not_EQ_","tiltontec.cell.base/unbound","pdom","lost","clojure.set.difference","cljs.core/set","gained","seq__35110","chunk__35111","count__35112","i__35113","newk","goog.dom/removeChildren","cljs.core/empty?","seq__35126","chunk__35127","count__35128","i__35129","oldk","tiltontec.cell.evaluate/not-to-be","seq__35147","chunk__35148","count__35149","i__35150","seq__35153","chunk__35154","count__35155","i__35156","tiltontec.mxweb.html/+inline-css+","tiltontec.cell.observer/observe-by-type","slot","js/window","G__35163","goog.dom.classlist/set","cljs.core/sequential?","tiltontec.mxweb.html/mxu-find-class","where","p1__35170#","tiltontec.model.core.fget","tiltontec.mxweb.html/mxu-find-tag","p1__35179#","tiltontec.mxweb.html/mxu-find-id","p1__35182#","tiltontec.mxweb.html/io-upsert","key","val","tiltontec.mxweb.html/io-read","tiltontec.mxweb.html/io-delete","tiltontec.mxweb.html/io-clear-storage","tiltontec.mxweb.html/io-all-keys","js/Object","tiltontec.mxweb.html/io-find","key-prefix","keys","found","clojure.string/starts-with?","cljs.core.conj","tiltontec.mxweb.html/io-truncate","seq__35187","chunk__35188","count__35189","i__35190","tiltontec.mxweb.html/input-editing-start","initial-value","goog.dom.forms/setValue","goog.editor.focus/focusInputField","goog.dom.selection/setStart","goog.dom.selection/setEnd"],"sourcesContent":["(ns tiltontec.mxweb.html\n  (:require\n    [clojure.string :as str]\n    [clojure.walk :refer [stringify-keys]]\n    [cljs.pprint :as pp]\n    [tiltontec.util.base :refer [type-cljc]]\n    [tiltontec.util.core :refer [pln]]\n    [tiltontec.cell.base :refer [md-ref? ia-type unbound]]\n    [tiltontec.cell.observer :refer [observe observe-by-type]]\n    [tiltontec.cell.evaluate :refer [not-to-be not-to-be-self]]\n    [tiltontec.model.core\n     :refer-macros [the-kids mdv!]\n     :refer [fget mget fasc fm! make mset! backdoor-reset!]\n     :as md]\n\n    [tiltontec.mxweb.style\n     :refer [style-string] :as tagcss]\n\n    [goog.dom :as dom]\n    [goog.dom.classlist :as classlist]\n    [goog.html.sanitizer.HtmlSanitizer :as sanitizer]\n    [goog.editor.focus :as focus]\n    [goog.dom.selection :as selection]\n    [goog.dom.forms :as form]\n\n    [taoensso.tufte :as tufte :refer-macros (defnp p profiled profile)]))\n\n(def ^:dynamic *mxweb-trace* false)\n\n(defn tagfo [me]\n  (if (string? me)\n    \"string\"\n    (select-keys @me [:id :tag :class :name])))\n\n(defn dom-has-class [dom class]\n  (classlist/contains dom class))\n\n(defn dom-ancestor-by-class [dom class]\n  (dom/getAncestorByTagNameAndClass dom nil class))\n\n(defn dom-ancestor-by-tag [dom tag]\n  (dom/getAncestorByTagNameAndClass dom tag))\n\n(declare tag-dom-create)\n\n(defn map-less-nils [m]\n  (apply dissoc m\n         (for [[k v] m :when (nil? v)] k)))\n\n(defn tag-dom [me]\n  ;; This will return nil when 'me' is being awakened and rules\n  ;; are firing for the first time, because 'me' has not yet\n  ;; been installed in the actual DOM, so call this only\n  ;; from event handlers and the like.\n  (let [id (mget me :id)]\n    (assert id)\n    (or (mget me :dom-cache)\n        (if-let [dom (dom/getElement (str id))]\n          (backdoor-reset! me :dom-cache dom)\n          #_ (println :benign?-html-no-element id :found)))))\n\n(defn tag-attrs [mx]\n  (let [beef (remove nil? (for [k (:attr-keys @mx)]\n                            (when-let [v (mget mx k)]\n                              [(name k) (case k\n                                          :style (tagcss/style-string v)\n                                          :class (if (coll? v)\n                                                   (str/join \" \" v)\n                                                   v)\n                                          v)])))]\n    (apply js-obj\n           (apply concat beef))))\n\n(defn tag-dom-create\n  ([me] (tag-dom-create me false))\n  ([me dbg]\n   (cond\n     (string? me) (dom/safeHtmlToNode (sanitizer/sanitize me))\n     (coll? me) (let [frag (.createDocumentFragment js/document)]\n                  (doseq [tag me]\n                    (when tag ;; tolerate nils\n                      (dom/appendChild frag (tag-dom-create tag))))\n                  frag)\n     :default\n     (do ;;(pln :domcre-attrs (:attr-keys @me))\n         (let [dom (apply dom/createDom (mget me :tag)\n                          (tag-attrs me)\n                          (concat                           ;; to-do: need this?\n                            (map #(tag-dom-create % dbg) (mget me :kids))\n                            (when-let [c (mget me :content)]\n                              [(tag-dom-create c)])))]\n\n           (when (some #{:list} (:attr-keys @me))\n             ;; todo investigate why this was necessary\n             (.setAttribute dom \"list\" (mget me :list)))\n           dom)))))\n\n(def +true-html+ {::type \"type\"})\n\n(defn true-html [keyword]\n  (or (keyword +true-html+)\n      (name keyword)))\n\n(defn tag [me]\n  (mget me :tag))\n\n(defn tag? [me]\n  (= (type-cljc me) :mxweb.base/tag))\n\n(defmethod observe [:kids :mxweb.base/tag] [_ me newv oldv _]\n  (when (not= oldv unbound)\n    ;; oldv unbound means initial build and this incremental add/remove\n    ;; is needed only when kids change post initial creation\n    #_ (println :obstagkids!!!!! (tagfo me)\n      :same-kids (= oldv newv)\n      :same-kid-set (= (set newv)(set oldv)))\n    (do                                                     ;; p ::observe-kids\n      (let [pdom (tag-dom me)\n            lost (clojure.set/difference (set oldv) (set newv))\n            gained (clojure.set/difference (set newv) (set oldv))]\n        (cond\n          (and (= (set newv)(set oldv))\n               (not (= oldv newv)))\n          ;; simply reordered children\n          (let [frag (.createDocumentFragment js/document)]\n            (doseq [newk newv]\n              (dom/appendChild frag\n                (.removeChild pdom (tag-dom newk))))\n            ;; should not be necessary...\n            ;;(prn :reorder-rmechild pdom (dom/getFirstElementChild pdom))\n            (dom/removeChildren pdom)\n            (dom/appendChild pdom frag))\n\n          (empty? gained)\n          ;; just lose the lost\n          (doseq [oldk lost]\n            (.removeChild pdom (tag-dom oldk))\n            (when-not (string? oldk)\n              ; (println :obs-tag-kids-dropping (tagfo oldk))\n              (not-to-be oldk)))\n\n          :default (let [frag (.createDocumentFragment js/document)]\n                     ;; GC lost from matrix;\n                     ;; move retained kids from pdom into fragment,\n                     ;; add all new kids to fragment, and do so preserving\n                     ;; order dictated by newk:\n\n                     (doseq [oldk lost]\n                       (when-not (string? oldk)\n                         ;; no need to remove dom, all children replaced below.\n                         (not-to-be oldk)))\n\n                     (doseq [newk newv]\n                       (dom/appendChild frag\n                         (if (some #{newk} oldv)\n                           (.removeChild pdom (tag-dom newk))\n                           (do ; (println :obs-tag-kids-building-new-dom (tagfo newk))\n                               (tag-dom-create newk)))))\n\n                     ;;(prn :kids-diff-rmechild pdom (dom/getFirstElementChild pdom))\n                     (dom/removeChildren pdom)\n                     (dom/appendChild pdom frag)))))))\n\n(def +inline-css+ (set [:display]))\n\n\n(defmethod observe-by-type [:mxweb.base/tag] [slot me newv oldv _]\n  (when (not= oldv unbound)\n    (when-let [dom (tag-dom me)]\n      #_ (when *mxweb-trace*\n        (when-not (some #{slot} [:tick])\n          (pln :observing-tagtype (tagfo me) slot newv oldv)))\n\n      (cond\n        (= slot :content)\n        (do ;;(pln :setting-html-content newv dom)\n          (.requestAnimationFrame js/window\n            #(do ;;(prn :ani-frame! newv)\n                 (set! (.-innerHTML dom) newv))))\n\n        (some #{slot} (:attr-keys @me))\n        (do\n          ;;(pln :dom-hit-attr!!!! (tagfo me) slot newv oldv)\n          (case slot\n            :style (set! (.-style dom) (style-string newv))\n\n            :hidden (set! (.-hidden dom) newv)\n            :disabled (if newv\n                        (.setAttribute dom \"disabled\" true)\n                        (.removeAttribute dom \"disabled\"))\n            :class (classlist/set dom (if (sequential? newv)\n                                        (str/join \" \" newv)\n                                        newv))\n            :checked (set! (.-checked dom) newv)\n            (do\n              ;(pln :obs-by-type-genset slot newv)\n              (.setAttribute dom (name slot) newv))))\n\n        (+inline-css+ slot)\n        (throw (js/Error. (str \"tiltontec.mxweb obs sees oldskool style: \" slot)))))))\n\n;;; --- local storage ------------------------\n\n(defn mxu-find-class\n  \"Search up the matrix from node 'where' looking for element with class\"\n  [where class]\n  (fget #(= (name class) (mget % :class))\n        where :me? false :up? true))\n\n(defn mxu-find-tag\n  \"Search up the matrix from node 'where' looking for element with class\"\n  [where tag]\n  (fget #(= (name tag) (mget % :tag))\n        where :me? false :up? true))\n\n(defn mxu-find-id\n  \"Search up the matrix from node 'where' looking for element with class\"\n  [where id]\n  (fget #(= (name id) (mget % :id))\n        where :me? false :up? true))\n\n;;; --- localStorage io implementation --------------------------------\n\n(defn io-upsert [key val]\n  (.setItem (.-localStorage js/window) key val))\n\n(defn io-read [key]\n  (.getItem (.-localStorage js/window) key))\n\n(defn io-delete [key]\n  (.removeItem (.-localStorage js/window) key))\n\n(defn io-clear-storage []\n  (.clear (.-localStorage js/window)))\n\n(defn io-all-keys []\n  (.keys js/Object (.-localStorage js/window)))\n\n(defn io-find [key-prefix]\n  (loop [keys (io-all-keys)\n         found []]\n    (if (seq keys)\n      (recur (rest keys)\n             (if (str/starts-with? (first keys) key-prefix)\n               (conj found (first keys))\n               found))\n      found)))\n\n(defn io-truncate [key-prefix]\n  (doseq [key (io-find key-prefix)]\n    (io-delete key)))\n\n;;; ---- tiltontec.mxweb-specific utilities ----------------------------------------------\n\n(defn input-editing-start [dom initial-value]\n  (form/setValue dom initial-value)\n  (focus/focusInputField dom)\n  ;; a lost bit of sound U/X: select all text when starting edit of a populated field...\n  (selection/setStart dom 0)\n  (selection/setEnd dom (count initial-value)))"]}