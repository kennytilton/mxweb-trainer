{"version":3,"sources":["tiltontec/util/core.cljc"],"mappings":"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","names":["tiltontec.util.core/type-of","x","cljs.core/type","tiltontec.util.core/xor","a","b","or__4253__auto__","and__4251__auto__","cljs.core/not","tiltontec.util.core/set-ify","cljs.core/sequential?","cljs.core/set","tiltontec.util.core/cl-find","sought","coll","cljs.core/some","tiltontec.util.core/uuidv4","cljs.core/rand-int","rhex","cljs.core/uuid","hex","tiltontec.util.core/ia-ref","cljs.core.atom","tiltontec.util.core/any-ref?","cljs.core/Atom","p__26668","vec__26669","cljs.core.nth","tiltontec.util.core/rmap-setf","slot","ref","new-value","js/Error","cljs.core/deref","cljs.core/map?","cljs.core.swap_BANG_","cljs.core/assoc","p__26672","vec__26673","tiltontec.util.core/rmap-meta-setf","cljs.core/meta","cljs.core.alter_meta_BANG_","js/tiltontec","js/tiltontec.util","js/tiltontec.util.core","js/tiltontec.util.core.err","method-table__4747__auto__","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__26676","cljs.core/MultiFn","cljs.core.symbol","tiltontec.util.core/err","a1","args","cljs.core/fn?","fn","mas","cljs.core.apply","bits","clojure.string.join","cljs.core/cons","tiltontec.util.core/flz","cljs.core.isa_QMARK_","cljs.core/LazySeq","cljs.core/vec","cljs.core.doall","tiltontec.util.core/wtrx-test","n","tiltontec.util.base/call-wtrx","cljs.core/List","G__26677","tiltontec.util.core/slot-users","me","cljs.core.map","G__26679","tiltontec.util.core/slot-useds","G__26680","tiltontec.util.core/make-fifo-queue","tiltontec.util.core/fifo-data","q","tiltontec.util.core/fifo-clear","cljs.core/empty","tiltontec.util.core/fifo-empty?","cljs.core/empty?","tiltontec.util.core/fifo-peek","cljs.core/first","tiltontec.util.core/fifo-add","new","cljs.core/conj","tiltontec.util.core/fifo-pop","result__26632__auto__","cljs.core/subvec","tiltontec.util.core/ensure-vec","cljs.core/coll?","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","tiltontec.util.core/pln","seq26682","self__4852__auto__","cljs.core/seq","cljs.core.println","tiltontec.util.core/xpln","seq26690","tiltontec.util.core/eko","key","value","tiltontec.util.core.pln","tiltontec.util.core/*plnk-keys*","tiltontec.util.core/plnk","seq26691","G__26692","cljs.core/next","self__4851__auto__","k","r","cljs.core.pr_str","cljs.core._EQ_","tiltontec.util.core/now","js/Date","tiltontec.util.core/map-to-json","map","cognitect.transit/write","cognitect.transit.writer","tiltontec.util.core/json-to-map","json","cognitect.transit/read","cognitect.transit.reader","tiltontec.util.core/counts","tiltontec.util.core/counts-reset","cljs.core/reset!","G__26699","tiltontec.util.core/countit","path","tiltontec.util.core.countit","cljs.core/counted?","cljs.core/count","cljs.core/update-in","cljs.core.fnil","cljs.core/+"],"sourcesContent":["(ns tiltontec.util.core\n  (:require [clojure.string :as $]\n            #?(:cljs [cognitect.transit :as trx])\n            #?(:cljs [tiltontec.util.base :as utm\n                      :refer-macros [prog1 b-when wtrx]]\n               :clj  [tiltontec.util.base :as utm\n                      :refer :all])))\n\n(defn type-of [x] (type x))\n\n(defn xor [a b]\n  (or (and a (not b))\n    (and b (not a))))\n\n(defn set-ify [x]\n  (cond\n   (nil? x) #{}\n   (sequential? x) (set x)\n   :else #{x}))\n\n(defn cl-find [sought coll]\n  (when-not (nil? sought)\n    (some #{sought} coll)))\n\n#?(:cljs\n  (defn uuidv4 []\n      (letfn [(hex [] (.toString (rand-int 16) 16))]\n             (let [rhex (.toString (bit-or 0x8 (bit-and 0x3 (rand-int 16))) 16)]\n                  (uuid\n                    (str (hex) (hex) (hex) (hex)\n                         (hex) (hex) (hex) (hex) \"-\"\n                         (hex) (hex) (hex) (hex) \"-\"\n                         \"4\"   (hex) (hex) (hex) \"-\"\n                         rhex  (hex) (hex) (hex) \"-\"\n                         (hex) (hex) (hex) (hex)\n                         (hex) (hex) (hex) (hex)\n                         (hex) (hex) (hex) (hex)))))))\n\n;; --- refs with maps conveniences -------------------\n\n(defn ia-ref [x]\n  (#?(:clj ref :cljs atom) x))\n\n(defn any-ref? [x]\n  (instance? #?(:cljs cljs.core.Atom\n                :clj clojure.lang.Ref) x))\n\n(defn rmap-setf [[slot ref] new-value]\n  (assert (any-ref? ref))\n  (assert (map? @ref))\n  (#?(:clj alter :cljs swap!) ref assoc slot new-value)\n  new-value)\n\n(defn rmap-meta-setf [[slot ref] new-value]\n  (assert (meta ref))\n  (alter-meta! ref assoc slot new-value)\n  ;;(prn :altermeta!! slot new-value)\n  new-value)\n;; --- error handling -----------------\n\n\n(defmulti err (fn [a1 & args] (fn? a1)))\n\n(defmethod err true [fn & mas]\n  (err (apply fn mas)))\n\n(defmethod err :default [& bits]\n  (throw (#?(:cljs js/Error. :clj Exception.)\n           ($/join \" \" (cons \"jz/err>\" bits)))))\n\n(defn flz [x]\n  (if (isa? (type x) #?(:cljs cljs.core.LazySeq\n                        :clj clojure.lang.LazySeq))\n    (vec (doall x))\n    x))\n#_\n(flz (map even? [1 2 3]))\n\n(defn wtrx-test [n]\n  (wtrx\n   (0 10 \"test\" n)\n   (when (> n 0)\n     (wtrx-test (dec n)))))\n\n;; --- deftest support ---------------------\n;; These next two are lame because they just\n;; look at slots (ignoring models). Use only\n;; in tests looking at one model or at least\n;; slot names do not duplicate.\n;;\n\n(defn slot-users [me slot]\n  (set (map :slotq\n            (map deref\n                 (:callers @(slot @me) #{})))))\n\n(defn slot-useds [me slot]\n  (set (map :slot\n            (map deref\n                 (:useds @(slot @me) #{})))))\n\n;;; --- FIFO Queue -----------------------------\n\n(defn make-fifo-queue []\n  (#?(:clj ref :cljs atom) []))\n\n(defn fifo-data [q] @q)\n(defn fifo-clear [q]\n  (#?(:clj alter :cljs swap!) q empty))\n(defn fifo-empty? [q]\n  (empty? @q))\n(defn fifo-peek [q]\n  (first @q))\n\n(defn fifo-add [q new]\n  (#?(:clj alter :cljs swap!) q conj new))\n\n(defn fifo-pop [q]\n  (when-not (fifo-empty? q)\n    (utm/prog1\n     (first @q)\n     (#?(:clj alter :cljs swap!) q subvec 1))))\n\n;;; --- detritus ----------------------\n\n(defn ensure-vec [x]\n  (if (coll? x) (vec x) [x]))\n\n(defn pln [& args]\n  (locking *out*\n    (println ($/join \" \" args))))\n\n(defn xpln [& args])\n\n(defn eko [key value]\n  (pln :eko!!! key value)\n  value)\n\n(def ^:dynamic *plnk-keys* [])\n\n(defn plnk [k & r]\n  (if (string? (first r))\n    (println (pr-str r))\n    (when (or (= k :force)\n              (some #{k} [*plnk-keys*]))                        ;; [:qxme :addk])\n      (println (pr-str r)))))\n\n(defn now []\n  #?(:clj (System/currentTimeMillis)\n    :cljs (.getTime (js/Date.))))\n\n;;; --- json -----------------------------\n#?(:cljs\n  (defn map-to-json [map]\n    (trx/write (trx/writer :json) map)))\n\n#?(:cljs\n  (defn json-to-map [json]\n    (trx/read (trx/reader :json) json)))\n\n;;; --- counting ----------------\n\n(def counts (atom nil))\n\n(defn counts-reset []\n  (reset! counts nil))\n\n(defn countit \"Count it\"\n  ([path]\n   (countit path 1))\n  ([path n]\n   (if (sequential? path)\n     (if (counted? n)\n       (countit path (count n))\n       (swap! counts update-in path (fnil + 0) n))\n     (countit [path] n))))\n\n(do (counts-reset)\n    ;; (swap! counts update-in [:a :c] (fnil + 0) 1)\n    (countit [:a :b] 7)\n    (countit (list :a :b) 3)\n    (countit :x 2)\n    (countit :y [1 2 3 4]))\n\n\n    "]}