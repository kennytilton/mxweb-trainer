{
"version":3,
"file":"goog.html.sanitizer.csspropertysanitizer.js",
"lineCount":57,
"mappings":"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",
"sources":["goog/html/sanitizer/csspropertysanitizer.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\n/**\n * @fileoverview A sanitizer for CSS property values. It is intended\n * to be used on the result of {@code CSSStyleDeclaration.getPropertyValue},\n * which has already been parsed and validated by the browser out of stylesheets\n * and inline style attributes. At the moment, it's only purpose is to detect\n * CSS functions to apply a whitelist and support rewriting of URLs.\n * @package\n */\n\ngoog.module('goog.html.sanitizer.CssPropertySanitizer');\ngoog.module.declareLegacyNamespace();\n\nvar SafeUrl = goog.require('goog.html.SafeUrl');\nvar googAsserts = goog.require('goog.asserts');\nvar googObject = goog.require('goog.object');\nvar googString = goog.require('goog.string');\n\n\n/**\n * Allowed CSS functions\n * @const {!Object<string,boolean>}\n */\nvar ALLOWED_FUNCTIONS = googObject.createSet(\n    'rgb', 'rgba', 'alpha', 'rect', 'image', 'linear-gradient',\n    'radial-gradient', 'repeating-linear-gradient', 'repeating-radial-gradient',\n    'cubic-bezier', 'matrix', 'perspective', 'rotate', 'rotate3d', 'rotatex',\n    'rotatey', 'steps', 'rotatez', 'scale', 'scale3d', 'scalex', 'scaley',\n    'scalez', 'skew', 'skewx', 'skewy', 'translate', 'translate3d',\n    'translatex', 'translatey', 'translatez');\n\n/**\n * The set of characters that need to be normalized inside url(\"...\").\n * We normalize newlines because they are not allowed inside quoted strings,\n * normalize quote characters, angle-brackets, and asterisks because they\n * could be used to break out of the URL or introduce targets for CSS\n * error recovery.  We normalize parentheses since they delimit unquoted\n * URLs and calls and could be a target for error recovery.\n * @const {!RegExp}\n */\nvar NORM_URL_REGEXP = /[\\n\\f\\r\\\"\\'()*<>]/g;\n\n/**\n * The replacements for NORM_URL_REGEXP.\n * @const {!Object<string, string>}\n */\nvar NORM_URL_REPLACEMENTS = {\n  '\\n': '%0a',\n  '\\f': '%0c',\n  '\\r': '%0d',\n  '\"': '%22',\n  '\\'': '%27',\n  '(': '%28',\n  ')': '%29',\n  '*': '%2a',\n  '<': '%3c',\n  '>': '%3e'\n};\n\n/**\n * Normalizes a character for use in a url() directive.\n * @param {string} ch Character to be normalized.\n * @return {string} Normalized character.\n */\nfunction normalizeUrlChar(ch) {\n  return googAsserts.assert(NORM_URL_REPLACEMENTS[ch]);\n}\n\n/**\n * Constructs a safe URI from a given URI and prop using a given uriRewriter\n * function.\n * @param {string} uri URI to be sanitized.\n * @param {string} propName Property name which contained the URI.\n * @param {?function(string, string):?SafeUrl} uriRewriter A URI rewriter that\n *     returns a {@link SafeUrl}.\n * @return {?string} Safe URI for use in CSS.\n */\nfunction getSafeUri(uri, propName, uriRewriter) {\n  if (!uriRewriter) {\n    return null;\n  }\n  var safeUri = uriRewriter(uri, propName);\n  if (safeUri && SafeUrl.unwrap(safeUri) != SafeUrl.INNOCUOUS_STRING) {\n    return 'url(\"' +\n        SafeUrl.unwrap(safeUri).replace(NORM_URL_REGEXP, normalizeUrlChar) +\n        '\")';\n  }\n  return null;\n}\n\n/**\n * Sanitizes the value for a given a browser-parsed CSS value.\n * @param {string} propName A property name.\n * @param {string} propValue Value of the property as parsed by the browser.\n * @param {function(string, string):?SafeUrl=} opt_uriRewriter A URI\n *     rewriter that returns an unwrapped goog.html.SafeUrl.\n * @return {?string} Sanitized property value or null if the property should be\n *     rejected altogether.\n */\nexports.sanitizeProperty = function(propName, propValue, opt_uriRewriter) {\n  propValue = googString.trim(propValue);\n  if (propValue == '') {\n    return null;\n  }\n\n  if (googString.caseInsensitiveStartsWith(propValue, 'url(')) {\n    // Urls can only appear as the only function call in the property value, and\n    // are rewritten according to the policy implemented in opt_uriRewriter.\n    if (!propValue.endsWith(')') || googString.countOf(propValue, '(') > 1 ||\n        googString.countOf(propValue, ')') > 1) {\n      // This is a little stricter than it needs to be (e.g. it will refuse\n      // url(\"http://foo.com/a(b\"), but it's better to err on the side of\n      // caution (even though getSafeUri is guaranteed to yield a single,\n      // SafeHtml-compliant url(...) value).\n      return null;\n    }\n    // TODO(pelizzi): use HtmlSanitizerUrlPolicy for opt_uriRewriter.\n    if (!opt_uriRewriter) {\n      return null;\n    }\n    // TODO(danesh): Check if we need to resolve this URI.\n    var uri = googString.stripQuotes(\n        propValue.substring(4, propValue.length - 1), '\"\\'');\n\n    return getSafeUri(uri, propName, opt_uriRewriter);\n  } else if (propValue.indexOf('(') > 0) {\n    // Functions are filtered through a whitelist. String arguments (e.g.\n    // url(\"...\")) are not supported, because IE/EDGE can feed back malformed\n    // output when given malformed input (e.g. url(\"ab\"c\")). We would need a\n    // full parser to address this.\n    if (/\"|'/.test(propValue)) {\n      return null;\n    }\n    var regex = /([\\-\\w]+)\\(/g;\n    var match;\n    while (match = regex.exec(propValue)) {\n      if (!(match[1].toLowerCase() in ALLOWED_FUNCTIONS)) {\n        return null;\n      }\n    }\n    return propValue;\n  } else {\n    // Everything else is allowed.\n    // TODO(pelizzi): This was kept as-is during refactoring to maintain the\n    // existing behavior. In particular we allow 'quotes: \"xx\" \"yy\"'. But\n    // ideally we should only allow values without quotes and parentheses here.\n    return propValue;\n  }\n};\n"],
"names":["goog","module","declareLegacyNamespace","SafeUrl","require","googAsserts","googObject","googString","ALLOWED_FUNCTIONS","createSet","NORM_URL_REGEXP","NORM_URL_REPLACEMENTS","normalizeUrlChar","ch","assert","getSafeUri","uri","propName","uriRewriter","safeUri","unwrap","INNOCUOUS_STRING","replace","exports","sanitizeProperty","exports.sanitizeProperty","propValue","opt_uriRewriter","trim","caseInsensitiveStartsWith","endsWith","countOf","stripQuotes","substring","length","indexOf","test","regex","match","exec","toLowerCase"]
}
