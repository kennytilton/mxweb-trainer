["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/html/sanitizer/htmlsanitizer.js"],"~:js","goog.provide(\"goog.html.sanitizer\");\ngoog.provide(\"goog.html.sanitizer.HtmlSanitizer\");\ngoog.provide(\"goog.html.sanitizer.HtmlSanitizer.Builder\");\ngoog.provide(\"goog.html.sanitizer.HtmlSanitizerAttributePolicy\");\ngoog.provide(\"goog.html.sanitizer.HtmlSanitizerPolicy\");\ngoog.provide(\"goog.html.sanitizer.HtmlSanitizerPolicyContext\");\ngoog.provide(\"goog.html.sanitizer.HtmlSanitizerPolicyHints\");\ngoog.provide(\"goog.html.sanitizer.HtmlSanitizerUrlPolicy\");\ngoog.require(\"goog.array\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.dom\");\ngoog.require(\"goog.dom.TagName\");\ngoog.require(\"goog.functions\");\ngoog.require(\"goog.html.SafeHtml\");\ngoog.require(\"goog.html.SafeStyle\");\ngoog.require(\"goog.html.SafeStyleSheet\");\ngoog.require(\"goog.html.SafeUrl\");\ngoog.require(\"goog.html.sanitizer.CssSanitizer\");\ngoog.require(\"goog.html.sanitizer.SafeDomTreeProcessor\");\ngoog.require(\"goog.html.sanitizer.TagBlacklist\");\ngoog.require(\"goog.html.sanitizer.TagWhitelist\");\ngoog.require(\"goog.html.sanitizer.attributeallowlists\");\ngoog.require(\"goog.html.sanitizer.noclobber\");\ngoog.require(\"goog.html.uncheckedconversions\");\ngoog.require(\"goog.object\");\ngoog.require(\"goog.string\");\ngoog.require(\"goog.string.Const\");\ngoog.html.sanitizer.HtmlSanitizerPolicyHints;\ngoog.html.sanitizer.HtmlSanitizerPolicyContext;\ngoog.html.sanitizer.HtmlSanitizerPolicy;\ngoog.html.sanitizer.HtmlSanitizerUrlPolicy;\ngoog.html.sanitizer.HtmlSanitizerAttributePolicy;\ngoog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_ = \"data-sanitizer-\";\ngoog.html.sanitizer.HTML_SANITIZER_SANITIZED_ATTR_NAME_ = goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_ + \"original-tag\";\ngoog.html.sanitizer.HTML_SANITIZER_INVALID_CUSTOM_TAGS_ = {\"ANNOTATION-XML\":true, \"COLOR-PROFILE\":true, \"FONT-FACE\":true, \"FONT-FACE-SRC\":true, \"FONT-FACE-URI\":true, \"FONT-FACE-FORMAT\":true, \"FONT-FACE-NAME\":true, \"MISSING-GLYPH\":true,};\ngoog.html.sanitizer.RANDOM_CONTAINER_ = \"*\";\ngoog.html.sanitizer.XHTML_NAMESPACE_URI_ = \"http://www.w3.org/1999/xhtml\";\ngoog.html.sanitizer.HtmlSanitizer = function(opt_builder) {\n  goog.html.sanitizer.SafeDomTreeProcessor.call(this);\n  var builder = opt_builder || new goog.html.sanitizer.HtmlSanitizer.Builder();\n  builder.installPolicies_();\n  this.attributeHandlers_ = goog.object.clone(builder.attributeWhitelist_);\n  this.tagBlacklist_ = goog.object.clone(builder.tagBlacklist_);\n  this.tagWhitelist_ = goog.object.clone(builder.tagWhitelist_);\n  this.shouldAddOriginalTagNames_ = builder.shouldAddOriginalTagNames_;\n  builder.dataAttributeWhitelist_.forEach(function(dataAttr) {\n    if (!goog.string.startsWith(dataAttr, \"data-\")) {\n      throw new goog.asserts.AssertionError('Only \"data-\" attributes allowed, got: %s.', [dataAttr]);\n    }\n    if (goog.string.startsWith(dataAttr, goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_)) {\n      throw new goog.asserts.AssertionError('Attributes with \"%s\" prefix are not allowed, got: %s.', [goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_, dataAttr]);\n    }\n    this.attributeHandlers_[\"* \" + dataAttr.toUpperCase()] = goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_;\n  }, this);\n  builder.customElementTagWhitelist_.forEach(function(customTag) {\n    customTag = customTag.toUpperCase();\n    if (!goog.string.contains(customTag, \"-\") || goog.html.sanitizer.HTML_SANITIZER_INVALID_CUSTOM_TAGS_[customTag]) {\n      throw new goog.asserts.AssertionError(\"Only valid custom element tag names allowed, got: %s.\", [customTag]);\n    }\n    this.tagWhitelist_[customTag] = true;\n  }, this);\n  this.networkRequestUrlPolicy_ = builder.networkRequestUrlPolicy_;\n  this.styleContainerId_ = builder.styleContainerId_;\n  this.currentStyleContainerId_ = null;\n  this.inlineStyleRules_ = builder.inlineStyleRules_;\n};\ngoog.inherits(goog.html.sanitizer.HtmlSanitizer, goog.html.sanitizer.SafeDomTreeProcessor);\ngoog.html.sanitizer.HtmlSanitizer.wrapUrlPolicy_ = function(urlPolicy) {\n  return function(url, policyHints) {\n    var trimmed = goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_(url);\n    var safeUrl = urlPolicy(trimmed, policyHints);\n    if (safeUrl && goog.html.SafeUrl.unwrap(safeUrl) != goog.html.SafeUrl.INNOCUOUS_STRING) {\n      return goog.html.SafeUrl.unwrap(safeUrl);\n    } else {\n      return null;\n    }\n  };\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder = function() {\n  this.attributeWhitelist_ = {};\n  goog.array.forEach([goog.html.sanitizer.attributeallowlists.AllowedAttributes, goog.html.sanitizer.attributeallowlists.SanitizedAttributeAllowlist], function(wl) {\n    goog.object.getKeys(wl).forEach(function(attr) {\n      this.attributeWhitelist_[attr] = goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_;\n    }, this);\n  }, this);\n  this.attributeOverrideList_ = {};\n  this.dataAttributeWhitelist_ = [];\n  this.customElementTagWhitelist_ = [];\n  this.tagBlacklist_ = goog.object.clone(goog.html.sanitizer.TagBlacklist);\n  this.tagWhitelist_ = goog.object.clone(goog.html.sanitizer.TagWhitelist);\n  this.shouldAddOriginalTagNames_ = false;\n  this.urlPolicy_ = goog.html.sanitizer.HtmlSanitizer.defaultUrlPolicy_;\n  this.networkRequestUrlPolicy_ = goog.html.sanitizer.HtmlSanitizer.defaultNetworkRequestUrlPolicy_;\n  this.namePolicy_ = goog.html.sanitizer.HtmlSanitizer.defaultNamePolicy_;\n  this.tokenPolicy_ = goog.html.sanitizer.HtmlSanitizer.defaultTokenPolicy_;\n  this.sanitizeInlineCssPolicy_ = goog.functions.NULL;\n  this.styleContainerId_ = null;\n  this.inlineStyleRules_ = false;\n  this.policiesInstalled_ = false;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowDataAttributes = function(dataAttributeWhitelist) {\n  goog.array.extend(this.dataAttributeWhitelist_, dataAttributeWhitelist);\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCustomElementTags = function(customElementTagWhitelist) {\n  customElementTagWhitelist.forEach(function(tag) {\n    this.allowCustomElementTag(tag);\n  }, this);\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCustomElementTag = function(customElementTagName, customElementAttributes) {\n  this.customElementTagWhitelist_.push(customElementTagName);\n  if (customElementAttributes) {\n    customElementAttributes.forEach(function(attr) {\n      var handlerName = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(customElementTagName, attr);\n      this.attributeWhitelist_[handlerName] = goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_;\n      this.attributeOverrideList_[handlerName] = true;\n    }, this);\n  }\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowFormTag = function() {\n  delete this.tagBlacklist_[\"FORM\"];\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowStyleTag = function() {\n  if (this.inlineStyleRules_) {\n    throw new Error(\"Rules from STYLE tags are already being inlined.\");\n  }\n  delete this.tagBlacklist_[\"STYLE\"];\n  this.styleContainerId_ = goog.html.sanitizer.RANDOM_CONTAINER_;\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withStyleContainer = function(opt_styleContainer) {\n  if (\"STYLE\" in this.tagBlacklist_) {\n    throw new Error(\"STYLE tags must first be allowed through allowStyleTag.\");\n  }\n  if (opt_styleContainer != undefined) {\n    if (!/^[a-zA-Z][\\w-:\\.]*$/.test(opt_styleContainer)) {\n      throw new Error(\"Invalid ID.\");\n    }\n    this.styleContainerId_ = opt_styleContainer;\n  } else {\n    this.styleContainerId_ = null;\n  }\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.inlineStyleRules = function() {\n  if (this.sanitizeInlineCssPolicy_ == goog.functions.NULL) {\n    throw new Error(\"Inlining style rules requires allowing STYLE attributes \" + \"first.\");\n  }\n  if (!(\"STYLE\" in this.tagBlacklist_)) {\n    throw new Error(\"You have already configured the builder to allow STYLE tags in the \" + \"output. Inlining style rules would prevent STYLE tags from \" + \"appearing in the output and conflict with such directive.\");\n  }\n  this.inlineStyleRules_ = true;\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCssStyles = function() {\n  this.sanitizeInlineCssPolicy_ = goog.html.sanitizer.HtmlSanitizer.sanitizeCssDeclarationList_;\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.alsoAllowTagsPrivateDoNotAccessOrElse = function(tags) {\n  tags.forEach(function(tag) {\n    this.tagWhitelist_[tag.toUpperCase()] = true;\n    delete this.tagBlacklist_[tag.toUpperCase()];\n  }, this);\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.alsoAllowAttributesPrivateDoNotAccessOrElse = function(attrs) {\n  attrs.forEach(function(attr) {\n    if (typeof attr === \"string\") {\n      attr = {tagName:\"*\", attributeName:attr, policy:null};\n    }\n    var handlerName = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(attr.tagName, attr.attributeName);\n    this.attributeWhitelist_[handlerName] = attr.policy ? attr.policy : goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_;\n    this.attributeOverrideList_[handlerName] = true;\n  }, this);\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.onlyAllowTags = function(tagWhitelist) {\n  this.tagWhitelist_ = {\"SPAN\":true};\n  tagWhitelist.forEach(function(tag) {\n    tag = tag.toUpperCase();\n    if (goog.html.sanitizer.TagWhitelist[tag]) {\n      this.tagWhitelist_[tag] = true;\n    } else {\n      throw new Error(\"Only whitelisted tags can be allowed. See \" + \"goog.html.sanitizer.TagWhitelist.\");\n    }\n  }, this);\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.onlyAllowAttributes = function(attrWhitelist) {\n  var oldWhitelist = this.attributeWhitelist_;\n  this.attributeWhitelist_ = {};\n  attrWhitelist.forEach(function(attr) {\n    if (typeof attr === \"string\") {\n      attr = {tagName:\"*\", attributeName:attr.toUpperCase(), policy:null};\n    }\n    var handlerName = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(attr.tagName, attr.attributeName);\n    if (!oldWhitelist[handlerName]) {\n      throw new Error(\"Only whitelisted attributes can be allowed.\");\n    }\n    this.attributeWhitelist_[handlerName] = attr.policy ? attr.policy : goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_;\n  }, this);\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.addOriginalTagNames = function() {\n  this.shouldAddOriginalTagNames_ = true;\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomNetworkRequestUrlPolicy = function(customNetworkReqUrlPolicy) {\n  this.networkRequestUrlPolicy_ = customNetworkReqUrlPolicy;\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomUrlPolicy = function(customUrlPolicy) {\n  this.urlPolicy_ = customUrlPolicy;\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomNamePolicy = function(customNamePolicy) {\n  this.namePolicy_ = customNamePolicy;\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomTokenPolicy = function(customTokenPolicy) {\n  this.tokenPolicy_ = customTokenPolicy;\n  return this;\n};\ngoog.html.sanitizer.HtmlSanitizer.wrapPolicy_ = function(customPolicy, defaultPolicy) {\n  return function(value, hints, ctx, policy) {\n    var result = customPolicy(value, hints, ctx, policy);\n    return result == null ? null : defaultPolicy(result, hints, ctx, policy);\n  };\n};\ngoog.html.sanitizer.HtmlSanitizer.installDefaultPolicy_ = function(whitelist, overrideList, key, defaultPolicy) {\n  if (whitelist[key] && !overrideList[key]) {\n    whitelist[key] = goog.html.sanitizer.HtmlSanitizer.wrapPolicy_(whitelist[key], defaultPolicy);\n  }\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.build = function() {\n  return new goog.html.sanitizer.HtmlSanitizer(this);\n};\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.installPolicies_ = function() {\n  if (this.policiesInstalled_) {\n    throw new Error(\"HtmlSanitizer.Builder.build() can only be used once.\");\n  }\n  var installPolicy = goog.html.sanitizer.HtmlSanitizer.installDefaultPolicy_;\n  installPolicy(this.attributeWhitelist_, this.attributeOverrideList_, \"* USEMAP\", goog.html.sanitizer.HtmlSanitizer.sanitizeUrlFragment_);\n  var urlAttributes = [\"* ACTION\", \"* CITE\", \"* HREF\"];\n  var urlPolicy = goog.html.sanitizer.HtmlSanitizer.wrapUrlPolicy_(this.urlPolicy_);\n  urlAttributes.forEach(function(attribute) {\n    installPolicy(this.attributeWhitelist_, this.attributeOverrideList_, attribute, urlPolicy);\n  }, this);\n  var networkUrlAttributes = [\"* LONGDESC\", \"* SRC\", \"LINK HREF\"];\n  var networkRequestUrlPolicy = goog.html.sanitizer.HtmlSanitizer.wrapUrlPolicy_(this.networkRequestUrlPolicy_);\n  networkUrlAttributes.forEach(function(attribute) {\n    installPolicy(this.attributeWhitelist_, this.attributeOverrideList_, attribute, networkRequestUrlPolicy);\n  }, this);\n  var nameAttributes = [\"* FOR\", \"* HEADERS\", \"* NAME\"];\n  nameAttributes.forEach(function(attribute) {\n    installPolicy(this.attributeWhitelist_, this.attributeOverrideList_, attribute, goog.partial(goog.html.sanitizer.HtmlSanitizer.sanitizeName_, this.namePolicy_));\n  }, this);\n  installPolicy(this.attributeWhitelist_, this.attributeOverrideList_, \"A TARGET\", goog.partial(goog.html.sanitizer.HtmlSanitizer.allowedAttributeValues_, [\"_blank\", \"_self\"]));\n  installPolicy(this.attributeWhitelist_, this.attributeOverrideList_, \"* CLASS\", goog.partial(goog.html.sanitizer.HtmlSanitizer.sanitizeClasses_, this.tokenPolicy_));\n  installPolicy(this.attributeWhitelist_, this.attributeOverrideList_, \"* ID\", goog.partial(goog.html.sanitizer.HtmlSanitizer.sanitizeId_, this.tokenPolicy_));\n  installPolicy(this.attributeWhitelist_, this.attributeOverrideList_, \"* STYLE\", goog.partial(this.sanitizeInlineCssPolicy_, networkRequestUrlPolicy));\n  this.policiesInstalled_ = true;\n};\ngoog.html.sanitizer.HtmlSanitizer.defaultUrlPolicy_ = goog.html.SafeUrl.sanitize;\ngoog.html.sanitizer.HtmlSanitizer.defaultNetworkRequestUrlPolicy_ = goog.functions.NULL;\ngoog.html.sanitizer.HtmlSanitizer.defaultNamePolicy_ = goog.functions.NULL;\ngoog.html.sanitizer.HtmlSanitizer.defaultTokenPolicy_ = goog.functions.NULL;\ngoog.html.sanitizer.HtmlSanitizer.attrIdentifier_ = function(nodeName, attributeName) {\n  if (!nodeName) {\n    nodeName = \"*\";\n  }\n  return (nodeName + \" \" + attributeName).toUpperCase();\n};\ngoog.html.sanitizer.HtmlSanitizer.sanitizeCssDeclarationList_ = function(policySanitizeUrl, attrValue, policyHints, policyContext) {\n  if (!policyContext.cssStyle) {\n    return null;\n  }\n  var naiveUriRewriter = function(uri, prop) {\n    policyHints.cssProperty = prop;\n    var sanitizedUrl = policySanitizeUrl(uri, policyHints);\n    if (sanitizedUrl == null) {\n      return null;\n    }\n    return goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from(\"HtmlSanitizerPolicy created with networkRequestUrlPolicy_ \" + \"when installing '* STYLE' handler.\"), sanitizedUrl);\n  };\n  var sanitizedStyle = goog.html.SafeStyle.unwrap(goog.html.sanitizer.CssSanitizer.sanitizeInlineStyle(policyContext.cssStyle, naiveUriRewriter));\n  return sanitizedStyle == \"\" ? null : sanitizedStyle;\n};\ngoog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_ = function(attrValue) {\n  return goog.string.trim(attrValue);\n};\ngoog.html.sanitizer.HtmlSanitizer.allowedAttributeValues_ = function(allowedValues, attrValue, policyHints) {\n  var trimmed = goog.string.trim(attrValue);\n  return goog.array.contains(allowedValues, trimmed.toLowerCase()) ? trimmed : null;\n};\ngoog.html.sanitizer.HtmlSanitizer.sanitizeUrlFragment_ = function(urlFragment, policyHints) {\n  var trimmed = goog.string.trim(urlFragment);\n  if (trimmed && trimmed.charAt(0) == \"#\") {\n    return trimmed;\n  }\n  return null;\n};\ngoog.html.sanitizer.HtmlSanitizer.sanitizeName_ = function(namePolicy, attrName, policyHints) {\n  var trimmed = goog.string.trim(attrName);\n  return namePolicy(trimmed, policyHints);\n};\ngoog.html.sanitizer.HtmlSanitizer.sanitizeClasses_ = function(tokenPolicy, attrValue, policyHints) {\n  var classes = attrValue.split(/(?:\\s+)/);\n  var sanitizedClasses = [];\n  for (var i = 0; i < classes.length; i++) {\n    var sanitizedClass = tokenPolicy(classes[i], policyHints);\n    if (sanitizedClass) {\n      sanitizedClasses.push(sanitizedClass);\n    }\n  }\n  return sanitizedClasses.length == 0 ? null : sanitizedClasses.join(\" \");\n};\ngoog.html.sanitizer.HtmlSanitizer.sanitizeId_ = function(tokenPolicy, attrValue, policyHints) {\n  var trimmed = goog.string.trim(attrValue);\n  return tokenPolicy(trimmed, policyHints);\n};\ngoog.html.sanitizer.HtmlSanitizer.getContext_ = function(attributeName, dirtyElement) {\n  var policyContext = {cssStyle:undefined};\n  if (attributeName == \"style\") {\n    policyContext.cssStyle = goog.html.sanitizer.noclobber.getElementStyle(dirtyElement);\n  }\n  return policyContext;\n};\ngoog.html.sanitizer.HtmlSanitizer.prototype.sanitize = function(unsanitizedHtml) {\n  this.currentStyleContainerId_ = this.getStyleContainerId_();\n  var sanitizedString = this.processToString(unsanitizedHtml);\n  return goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from(\"Output of HTML sanitizer\"), sanitizedString);\n};\ngoog.html.sanitizer.HtmlSanitizer.prototype.sanitizeToDomNode = function(unsanitizedHtml) {\n  this.currentStyleContainerId_ = this.getStyleContainerId_();\n  return goog.html.sanitizer.SafeDomTreeProcessor.prototype.processToTree.call(this, unsanitizedHtml);\n};\ngoog.html.sanitizer.HtmlSanitizer.prototype.processRoot = function(newRoot) {\n  if (this.currentStyleContainerId_ && this.styleContainerId_ == goog.html.sanitizer.RANDOM_CONTAINER_) {\n    newRoot.id = this.currentStyleContainerId_;\n  }\n};\ngoog.html.sanitizer.HtmlSanitizer.prototype.preProcessHtml = function(unsanitizedHtml) {\n  if (!this.inlineStyleRules_) {\n    return unsanitizedHtml;\n  }\n  var inertUnsanitizedDom = goog.html.sanitizer.CssSanitizer.safeParseHtmlAndGetInertElement(\"\\x3cdiv\\x3e\" + unsanitizedHtml + \"\\x3c/div\\x3e\");\n  goog.asserts.assert(inertUnsanitizedDom, \"Older browsers that don't support inert \" + \"parsing should not get to this branch\");\n  goog.html.sanitizer.CssSanitizer.inlineStyleRules(inertUnsanitizedDom);\n  return inertUnsanitizedDom.innerHTML;\n};\ngoog.html.sanitizer.HtmlSanitizer.prototype.getStyleContainerId_ = function() {\n  var randomStyleContainmentEnabled = this.styleContainerId_ == goog.html.sanitizer.RANDOM_CONTAINER_;\n  var randomStyleContainmentNecessary = !(\"STYLE\" in this.tagBlacklist_) && \"STYLE\" in this.tagWhitelist_;\n  return randomStyleContainmentEnabled && randomStyleContainmentNecessary ? \"sanitizer-\" + goog.string.getRandomString() : this.styleContainerId_;\n};\ngoog.html.sanitizer.HtmlSanitizer.prototype.createTextNode = function(dirtyNode) {\n  var textContent = dirtyNode.data;\n  var dirtyParent = goog.html.sanitizer.noclobber.getParentNode(dirtyNode);\n  if (dirtyParent && goog.html.sanitizer.noclobber.getNodeName(dirtyParent).toLowerCase() == \"style\" && !(\"STYLE\" in this.tagBlacklist_) && \"STYLE\" in this.tagWhitelist_) {\n    textContent = goog.html.SafeStyleSheet.unwrap(goog.html.sanitizer.CssSanitizer.sanitizeStyleSheetString(textContent, this.currentStyleContainerId_, goog.bind(function(uri, propName) {\n      return this.networkRequestUrlPolicy_(uri, {cssProperty:propName});\n    }, this)));\n  }\n  return document.createTextNode(textContent);\n};\ngoog.html.sanitizer.HtmlSanitizer.prototype.createElementWithoutAttributes = function(dirtyElement) {\n  const dirtyName = goog.html.sanitizer.noclobber.getNodeName(dirtyElement).toUpperCase();\n  if (dirtyName in this.tagBlacklist_) {\n    return null;\n  }\n  const dirtyNamespaceURI = goog.html.sanitizer.noclobber.getElementNamespaceURI(dirtyElement);\n  if (dirtyNamespaceURI != goog.html.sanitizer.XHTML_NAMESPACE_URI_) {\n    return null;\n  }\n  if (this.tagWhitelist_[dirtyName]) {\n    return document.createElement(dirtyName);\n  }\n  const spanElement = goog.dom.createElement(goog.dom.TagName.SPAN);\n  if (this.shouldAddOriginalTagNames_) {\n    goog.html.sanitizer.noclobber.setElementAttribute(spanElement, goog.html.sanitizer.HTML_SANITIZER_SANITIZED_ATTR_NAME_, dirtyName.toLowerCase());\n  }\n  return spanElement;\n};\ngoog.html.sanitizer.HtmlSanitizer.prototype.processElementAttribute = function(dirtyElement, attribute) {\n  var attributeName = attribute.name;\n  if (goog.string.startsWith(attributeName, goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_)) {\n    return null;\n  }\n  var elementName = goog.html.sanitizer.noclobber.getNodeName(dirtyElement);\n  var unsanitizedAttrValue = attribute.value;\n  var policyHints = {tagName:goog.string.trim(elementName).toLowerCase(), attributeName:goog.string.trim(attributeName).toLowerCase()};\n  var policyContext = goog.html.sanitizer.HtmlSanitizer.getContext_(policyHints.attributeName, dirtyElement);\n  var tagHandlerIndex = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(elementName, attributeName);\n  if (tagHandlerIndex in this.attributeHandlers_) {\n    var handler = this.attributeHandlers_[tagHandlerIndex];\n    return handler(unsanitizedAttrValue, policyHints, policyContext);\n  }\n  var genericHandlerIndex = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(null, attributeName);\n  if (genericHandlerIndex in this.attributeHandlers_) {\n    var handler = this.attributeHandlers_[genericHandlerIndex];\n    return handler(unsanitizedAttrValue, policyHints, policyContext);\n  }\n  return null;\n};\ngoog.html.sanitizer.HtmlSanitizer.sanitize = function(unsanitizedHtml) {\n  var sanitizer = (new goog.html.sanitizer.HtmlSanitizer.Builder()).build();\n  return sanitizer.sanitize(unsanitizedHtml);\n};\n","~:source","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\n/**\n * @fileoverview An HTML sanitizer that can satisfy a variety of security\n * policies.\n *\n * This package provides html sanitizing functions. It does not enforce string\n * to string conversion, instead returning a dom-like element when possible.\n *\n * Examples of usage of the static `HtmlSanitizer.sanitize`:\n * <pre>\n *   var safeHtml = HtmlSanitizer.sanitize('<script src=\"xss.js\" />');\n *   goog.dom.safe.setInnerHtml(el, safeHtml);\n * </pre>\n *\n * @supported IE 10+, Chrome 26+, Firefox 22+, Safari 7.1+, Opera 15+\n */\ngoog.provide('goog.html.sanitizer');\ngoog.provide('goog.html.sanitizer.HtmlSanitizer');\ngoog.provide('goog.html.sanitizer.HtmlSanitizer.Builder');\ngoog.provide('goog.html.sanitizer.HtmlSanitizerAttributePolicy');\ngoog.provide('goog.html.sanitizer.HtmlSanitizerPolicy');\ngoog.provide('goog.html.sanitizer.HtmlSanitizerPolicyContext');\ngoog.provide('goog.html.sanitizer.HtmlSanitizerPolicyHints');\ngoog.provide('goog.html.sanitizer.HtmlSanitizerUrlPolicy');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.dom');\ngoog.require('goog.dom.TagName');\ngoog.require('goog.functions');\ngoog.require('goog.html.SafeHtml');\ngoog.require('goog.html.SafeStyle');\ngoog.require('goog.html.SafeStyleSheet');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.html.sanitizer.CssSanitizer');\ngoog.require('goog.html.sanitizer.SafeDomTreeProcessor');\ngoog.require('goog.html.sanitizer.TagBlacklist');\ngoog.require('goog.html.sanitizer.TagWhitelist');\ngoog.require('goog.html.sanitizer.attributeallowlists');\ngoog.require('goog.html.sanitizer.noclobber');\ngoog.require('goog.html.uncheckedconversions');\ngoog.require('goog.object');\ngoog.require('goog.string');\ngoog.require('goog.string.Const');\n\n\n/**\n * Type for optional hints to policy handler functions.\n * @typedef {{\n *     tagName: (string|undefined),\n *     attributeName: (string|undefined),\n *     cssProperty: (string|undefined)\n *     }}\n */\ngoog.html.sanitizer.HtmlSanitizerPolicyHints;\n\n\n/**\n * Type for optional context objects to the policy handler functions.\n * @typedef {{\n *     cssStyle: (?CSSStyleDeclaration|undefined)\n *     }}\n */\ngoog.html.sanitizer.HtmlSanitizerPolicyContext;\n\n\n/**\n * Type for a policy function.\n * @typedef {function(string, goog.html.sanitizer.HtmlSanitizerPolicyHints=,\n *     goog.html.sanitizer.HtmlSanitizerPolicyContext=,\n *     (function(string, ?=, ?=, ?=):?string)=):?string}\n */\ngoog.html.sanitizer.HtmlSanitizerPolicy;\n\n\n/**\n * Type for a URL policy function.\n *\n * @typedef {function(string, !goog.html.sanitizer.HtmlSanitizerPolicyHints=):\n *     ?goog.html.SafeUrl}\n */\ngoog.html.sanitizer.HtmlSanitizerUrlPolicy;\n\n\n/**\n * Type for attribute policy configuration.\n * @typedef {{\n *     tagName: string,\n *     attributeName: string,\n *     policy: ?goog.html.sanitizer.HtmlSanitizerPolicy\n * }}\n */\ngoog.html.sanitizer.HtmlSanitizerAttributePolicy;\n\n\n/**\n * Prefix used by all internal html sanitizer booking properties.\n * @private @const {string}\n */\ngoog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_ = 'data-sanitizer-';\n\n\n/**\n * Attribute name added to span tags that replace unknown tags. The value of\n * this attribute is the name of the tag before the sanitization occurred.\n * @private @const {string}\n */\ngoog.html.sanitizer.HTML_SANITIZER_SANITIZED_ATTR_NAME_ =\n    goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_ + 'original-tag';\n\n/**\n * A list of tags that contain '-' but are invalid custom element tags.\n * @private @const @dict {boolean}\n */\ngoog.html.sanitizer.HTML_SANITIZER_INVALID_CUSTOM_TAGS_ = {\n  'ANNOTATION-XML': true,\n  'COLOR-PROFILE': true,\n  'FONT-FACE': true,\n  'FONT-FACE-SRC': true,\n  'FONT-FACE-URI': true,\n  'FONT-FACE-FORMAT': true,\n  'FONT-FACE-NAME': true,\n  'MISSING-GLYPH': true,\n};\n\n\n/**\n * Special value for the STYLE container ID, which makes the sanitizer choose\n * a new random ID on each call to {@link sanitize}.\n * @private @const {string}\n */\ngoog.html.sanitizer.RANDOM_CONTAINER_ = '*';\n\n\n/**\n * The only supported namespace. We drop tags outside of this namespace.\n * @private @const {string}\n */\ngoog.html.sanitizer.XHTML_NAMESPACE_URI_ = 'http://www.w3.org/1999/xhtml';\n\n\n/**\n * Creates an HTML sanitizer.\n * @param {!goog.html.sanitizer.HtmlSanitizer.Builder=} opt_builder\n * @final @constructor @struct\n * @extends {goog.html.sanitizer.SafeDomTreeProcessor}\n */\ngoog.html.sanitizer.HtmlSanitizer = function(opt_builder) {\n  'use strict';\n  goog.html.sanitizer.SafeDomTreeProcessor.call(this);\n\n  var builder = opt_builder || new goog.html.sanitizer.HtmlSanitizer.Builder();\n\n  builder.installPolicies_();\n\n  /**\n   * @private @const {!Object<string, !goog.html.sanitizer.HtmlSanitizerPolicy>}\n   */\n  this.attributeHandlers_ = goog.object.clone(builder.attributeWhitelist_);\n\n  /** @private @const {!Object<string, boolean>} */\n  this.tagBlacklist_ = goog.object.clone(builder.tagBlacklist_);\n\n  /** @private @const {!Object<string, boolean>} */\n  this.tagWhitelist_ = goog.object.clone(builder.tagWhitelist_);\n\n  /** @private @const {boolean} */\n  this.shouldAddOriginalTagNames_ = builder.shouldAddOriginalTagNames_;\n\n  // Add whitelist data-* attributes from the builder to the attributeHandlers\n  // with a default cleanUpAttribute function. data-* attributes are inert as\n  // per HTML5 specs, so not much sanitization needed.\n  builder.dataAttributeWhitelist_.forEach(function(dataAttr) {\n    'use strict';\n    if (!goog.string.startsWith(dataAttr, 'data-')) {\n      throw new goog.asserts.AssertionError(\n          'Only \"data-\" attributes allowed, got: %s.', [dataAttr]);\n    }\n    if (goog.string.startsWith(\n            dataAttr, goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_)) {\n      throw new goog.asserts.AssertionError(\n          'Attributes with \"%s\" prefix are not allowed, got: %s.',\n          [goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_, dataAttr]);\n    }\n    this.attributeHandlers_['* ' + dataAttr.toUpperCase()] =\n        /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (\n            goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_);\n  }, this);\n\n  // Add whitelist custom element tags, ensures that they contains at least one\n  // '-' and that they are not part of the reserved names.\n  builder.customElementTagWhitelist_.forEach(function(customTag) {\n    'use strict';\n    customTag = customTag.toUpperCase();\n    if (!goog.string.contains(customTag, '-') ||\n        goog.html.sanitizer.HTML_SANITIZER_INVALID_CUSTOM_TAGS_[customTag]) {\n      throw new goog.asserts.AssertionError(\n          'Only valid custom element tag names allowed, got: %s.', [customTag]);\n    }\n    this.tagWhitelist_[customTag] = true;\n  }, this);\n\n  /** @private @const {!goog.html.sanitizer.HtmlSanitizerUrlPolicy} */\n  this.networkRequestUrlPolicy_ = builder.networkRequestUrlPolicy_;\n\n  /** @private @const {?string} */\n  this.styleContainerId_ = builder.styleContainerId_;\n\n  /** @private {?string} */\n  this.currentStyleContainerId_ = null;\n\n  /** @private @const {boolean} */\n  this.inlineStyleRules_ = builder.inlineStyleRules_;\n};\ngoog.inherits(\n    goog.html.sanitizer.HtmlSanitizer,\n    goog.html.sanitizer.SafeDomTreeProcessor);\n\n\n/**\n * Transforms a {@link HtmlSanitizerUrlPolicy} into a\n * {@link HtmlSanitizerPolicy} by returning a wrapper that calls the {@link\n * HtmlSanitizerUrlPolicy} with the required arguments and unwraps the returned\n * {@link SafeUrl}. This is necessary because internally the sanitizer works\n * with {@HtmlSanitizerPolicy} to sanitize attributes, but its public API must\n * use {@HtmlSanitizerUrlPolicy} to ensure that callers do not violate SafeHtml\n * invariants in their custom handlers.\n * @param {!goog.html.sanitizer.HtmlSanitizerUrlPolicy} urlPolicy\n * @return {!goog.html.sanitizer.HtmlSanitizerPolicy}\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.wrapUrlPolicy_ = function(urlPolicy) {\n  'use strict';\n  return /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (function(\n      url, policyHints) {\n    'use strict';\n    var trimmed = goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_(url);\n    var safeUrl = urlPolicy(trimmed, policyHints);\n    if (safeUrl &&\n        goog.html.SafeUrl.unwrap(safeUrl) !=\n            goog.html.SafeUrl.INNOCUOUS_STRING) {\n      return goog.html.SafeUrl.unwrap(safeUrl);\n    } else {\n      return null;\n    }\n  });\n};\n\n\n\n/**\n * The builder for the HTML Sanitizer. All methods except build return\n * `this`.\n * @final @constructor @struct\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder = function() {\n  'use strict';\n  /**\n   * A set of attribute sanitization functions. Default built-in handlers are\n   * all tag-agnostic by design. Note that some attributes behave differently\n   * when attached to different nodes (for example, the href attribute will\n   * generally not make a network request, but &lt;link href=\"\"&gt; does), and\n   * so when necessary a tag-specific handler can be used to override a\n   * tag-agnostic one.\n   * @private {!Object<string, !goog.html.sanitizer.HtmlSanitizerPolicy>}\n   */\n  this.attributeWhitelist_ = {};\n  goog.array.forEach(\n      [\n        goog.html.sanitizer.attributeallowlists.AllowedAttributes,\n        goog.html.sanitizer.attributeallowlists.SanitizedAttributeAllowlist\n      ],\n      function(wl) {\n        'use strict';\n        goog.object.getKeys(wl).forEach(function(attr) {\n          'use strict';\n          this.attributeWhitelist_[attr] =\n              /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (\n                  goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_);\n        }, this);\n      },\n      this);\n\n  /**\n   * A set of attribute handlers that should not inherit their default policy\n   * during build().\n   * @private @const {!Object<string, boolean>}\n   */\n  this.attributeOverrideList_ = {};\n\n  /**\n   * List of data attributes to whitelist. Data-attributes are inert and don't\n   * require sanitization.\n   * @private @const {!Array<string>}\n   */\n  this.dataAttributeWhitelist_ = [];\n\n  /**\n   * List of custom element tags to whitelist. Custom elements are inert on\n   * their own and require code to actually be dangerous, so the risk is similar\n   * to data-attributes.\n   * @private @const {!Array<string>}\n   */\n  this.customElementTagWhitelist_ = [];\n\n  /**\n   * A tag blacklist, to effectively remove an element and its children from the\n   * dom.\n   * @private @const {!Object<string, boolean>}\n   */\n  this.tagBlacklist_ = goog.object.clone(goog.html.sanitizer.TagBlacklist);\n\n  /**\n   * A tag whitelist, to effectively allow an element and its children from the\n   * dom.\n   * @private {!Object<string, boolean>}\n   */\n  this.tagWhitelist_ = goog.object.clone(goog.html.sanitizer.TagWhitelist);\n\n  /**\n   * Whether non-whitelisted and non-blacklisted tags that have been converted\n   * to &lt;span&rt; tags will contain the original tag in a data attribute.\n   * @private {boolean}\n   */\n  this.shouldAddOriginalTagNames_ = false;\n\n  /**\n   * A function to be applied to URLs found on the parsing process which do not\n   * trigger requests.\n   * @private {!goog.html.sanitizer.HtmlSanitizerUrlPolicy}\n   */\n  this.urlPolicy_ = goog.html.sanitizer.HtmlSanitizer.defaultUrlPolicy_;\n\n  /**\n   * A function to be applied to urls found on the parsing process which may\n   * trigger requests.\n   * @private {!goog.html.sanitizer.HtmlSanitizerUrlPolicy}\n   */\n  this.networkRequestUrlPolicy_ =\n      goog.html.sanitizer.HtmlSanitizer.defaultNetworkRequestUrlPolicy_;\n\n  /**\n   * A function to be applied to names found on the parsing process.\n   * @private {!goog.html.sanitizer.HtmlSanitizerPolicy}\n   */\n  this.namePolicy_ = goog.html.sanitizer.HtmlSanitizer.defaultNamePolicy_;\n\n  /**\n   * A function to be applied to other tokens (i.e. classes and IDs) found on\n   * the parsing process.\n   * @private {!goog.html.sanitizer.HtmlSanitizerPolicy}\n   */\n  this.tokenPolicy_ = goog.html.sanitizer.HtmlSanitizer.defaultTokenPolicy_;\n\n  /**\n   * A function to sanitize inline CSS styles. Defaults to deny all.\n   * @private {function(\n   *     !goog.html.sanitizer.HtmlSanitizerPolicy,\n   *     string,\n   *     !goog.html.sanitizer.HtmlSanitizerPolicyHints,\n   *     !goog.html.sanitizer.HtmlSanitizerPolicyContext):?string}\n   */\n  this.sanitizeInlineCssPolicy_ = goog.functions.NULL;\n\n  /**\n   * An optional ID to restrict the scope of CSS rules when STYLE tags are\n   * allowed.\n   * @private {?string}\n   */\n  this.styleContainerId_ = null;\n\n  /**\n   * Whether rules in STYLE tags should be inlined into style attributes.\n   * @private {boolean}\n   */\n  this.inlineStyleRules_ = false;\n\n  /**\n   * True iff policies have been installed for the instance.\n   * @private {boolean}\n   */\n  this.policiesInstalled_ = false;\n};\n\n\n/**\n * Extends the list of allowed data attributes.\n * @param {!Array<string>} dataAttributeWhitelist\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowDataAttributes =\n    function(dataAttributeWhitelist) {\n  'use strict';\n  goog.array.extend(this.dataAttributeWhitelist_, dataAttributeWhitelist);\n  return this;\n};\n\n/**\n * Extends the list of allowed custom element tags.\n * @param {!Array<string>} customElementTagWhitelist\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCustomElementTags =\n    function(customElementTagWhitelist) {\n  'use strict';\n  customElementTagWhitelist.forEach(function(tag) {\n    'use strict';\n    this.allowCustomElementTag(tag);\n  }, this);\n  return this;\n};\n\n/**\n * Extends the list of allowed custom element tags.\n * @param {string} customElementTagName\n * @param {!Array<string>=} customElementAttributes\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCustomElementTag =\n    function(customElementTagName, customElementAttributes) {\n  'use strict';\n  this.customElementTagWhitelist_.push(customElementTagName);\n  if (customElementAttributes) {\n    customElementAttributes.forEach(function(attr) {\n      'use strict';\n      var handlerName = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(\n          customElementTagName, attr);\n      this.attributeWhitelist_[handlerName] =\n          /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (\n              goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_);\n      this.attributeOverrideList_[handlerName] = true;\n    }, this);\n  }\n  return this;\n};\n\n\n/**\n * Allows form tags in the HTML. Without this all form tags and content will be\n * dropped.\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowFormTag = function() {\n  'use strict';\n  delete this.tagBlacklist_['FORM'];\n  return this;\n};\n\n\n/**\n * Allows STYLE tags. Note that the sanitizer wraps the output of each call to\n * {@link sanitize} with a SPAN tag, give it a random ID unique across multiple\n * calls, and then restrict all CSS rules found inside STYLE tags to only apply\n * to children of the SPAN tag. This means that CSS rules in STYLE tags will\n * only apply to content provided in the same call to {@link sanitize}. This\n * feature is not compatible with {@link inlineStyleRules}.\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowStyleTag = function() {\n  'use strict';\n  if (this.inlineStyleRules_) {\n    throw new Error('Rules from STYLE tags are already being inlined.');\n  }\n  delete this.tagBlacklist_['STYLE'];\n  this.styleContainerId_ = goog.html.sanitizer.RANDOM_CONTAINER_;\n  return this;\n};\n\n\n/**\n * Fixes the ID of the style container used for CSS rules found in STYLE tags,\n * and disables automatic wrapping with the container. This allows multiple\n * calls to {@link sanitize} to share STYLE rules. If opt_styleContainer is\n * missing, the sanitizer will stop restricting the scope of CSS rules\n * altogether. Requires {@link allowStyleTag} to be called first.\n * @param {string=} opt_styleContainer An optional container ID to restrict the\n *     scope of any CSS rule found in STYLE tags.\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withStyleContainer =\n    function(opt_styleContainer) {\n  'use strict';\n  if ('STYLE' in this.tagBlacklist_) {\n    throw new Error('STYLE tags must first be allowed through allowStyleTag.');\n  }\n  if (opt_styleContainer != undefined) {\n    if (!/^[a-zA-Z][\\w-:\\.]*$/.test(opt_styleContainer)) {\n      throw new Error('Invalid ID.');\n    }\n    this.styleContainerId_ = opt_styleContainer;\n  } else {\n    this.styleContainerId_ = null;\n  }\n  return this;\n};\n\n\n/**\n * Converts rules in STYLE tags into style attributes on the tags they apply to.\n * This feature is not compatible with {@link withStyleContainer} and {@link\n * allowStyleTag}. This method requires {@link allowCssStyles} (otherwise rules\n * would be deleted after being inlined), and is not compatible with {@link\n * allowStyleTag}.\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.inlineStyleRules =\n    function() {\n  'use strict';\n  if (this.sanitizeInlineCssPolicy_ == goog.functions.NULL) {\n    throw new Error(\n        'Inlining style rules requires allowing STYLE attributes ' +\n        'first.');\n  }\n  if (!('STYLE' in this.tagBlacklist_)) {\n    throw new Error(\n        'You have already configured the builder to allow STYLE tags in the ' +\n        'output. Inlining style rules would prevent STYLE tags from ' +\n        'appearing in the output and conflict with such directive.');\n  }\n  this.inlineStyleRules_ = true;\n  return this;\n};\n\n\n/**\n * Allows inline CSS styles.\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCssStyles =\n    function() {\n  'use strict';\n  this.sanitizeInlineCssPolicy_ =\n      goog.html.sanitizer.HtmlSanitizer.sanitizeCssDeclarationList_;\n  return this;\n};\n\n\n/**\n * Extends the tag whitelist (Package-internal utility method only).\n * @param {!Array<string>} tags The list of tags to be added to the whitelist.\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n * @package\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype\n    .alsoAllowTagsPrivateDoNotAccessOrElse = function(tags) {\n  'use strict';\n  tags.forEach(function(tag) {\n    'use strict';\n    this.tagWhitelist_[tag.toUpperCase()] = true;\n    delete this.tagBlacklist_[tag.toUpperCase()];\n  }, this);\n  return this;\n};\n\n\n/**\n * Extends the attribute whitelist (Package-internal utility method only).\n * @param {!Array<(string|!goog.html.sanitizer.HtmlSanitizerAttributePolicy)>}\n *     attrs The list of attributes to be added to the whitelist.\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n * @package\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype\n    .alsoAllowAttributesPrivateDoNotAccessOrElse = function(attrs) {\n  'use strict';\n  attrs.forEach(function(attr) {\n    'use strict';\n    if (typeof attr === 'string') {\n      attr = {tagName: '*', attributeName: attr, policy: null};\n    }\n    var handlerName = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(\n        attr.tagName, attr.attributeName);\n    this.attributeWhitelist_[handlerName] = attr.policy ?\n        attr.policy :\n        /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */\n        (goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_);\n    this.attributeOverrideList_[handlerName] = true;\n  }, this);\n  return this;\n};\n\n\n/**\n * Allows only the provided whitelist of tags. Tags still need to be in the\n * TagWhitelist to be allowed.\n * <p>\n * SPAN tags are ALWAYS ALLOWED as part of the mechanism required to preserve\n * the HTML tree structure (when removing non-blacklisted tags and\n * non-whitelisted tags).\n * @param {!Array<string>} tagWhitelist\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n * @throws {Error} Thrown if an attempt is made to allow a non-whitelisted tag.\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.onlyAllowTags = function(\n    tagWhitelist) {\n  'use strict';\n  this.tagWhitelist_ = {'SPAN': true};\n  tagWhitelist.forEach(function(tag) {\n    'use strict';\n    tag = tag.toUpperCase();\n    if (goog.html.sanitizer.TagWhitelist[tag]) {\n      this.tagWhitelist_[tag] = true;\n    } else {\n      throw new Error(\n          'Only whitelisted tags can be allowed. See ' +\n          'goog.html.sanitizer.TagWhitelist.');\n    }\n  }, this);\n  return this;\n};\n\n\n/**\n * Allows only the provided whitelist of attributes, possibly setting a custom\n * policy for them. The set of tag/attribute combinations need to be a subset of\n * the currently allowed combinations.\n * <p>\n * Note that you cannot define a generic handler for an attribute if only a\n * tag-specific one is present, and vice versa. To configure the sanitizer to\n * accept an attribute only for a specific tag when only a generic handler is\n * whitelisted, use the goog.html.sanitizer.HtmlSanitizerPolicyHints parameter\n * and simply reject the attribute in unwanted tags.\n * <p>\n * Also note that the sanitizer's policy is still called after the provided one,\n * to ensure that supplying misconfigured policy cannot introduce\n * vulnerabilities. To completely override an existing attribute policy or to\n * allow new attributes, see the goog.html.sanitizer.unsafe package.\n * @param {!Array<(string|!goog.html.sanitizer.HtmlSanitizerAttributePolicy)>}\n *     attrWhitelist The subset of attributes that the sanitizer will accept.\n *     Attributes can come in of two forms:\n *     - string: allow all values for this attribute on all tags.\n *     - HtmlSanitizerAttributePolicy: allows specifying a policy for a\n *         particular tag. The tagName can be \"*\", which means all tags. If no\n *         policy is passed, the default is to allow all values.\n *     The tag and attribute names are case-insensitive.\n *     Note that the policy for id, URLs, names etc is controlled separately\n *     (using withCustom* methods).\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n * @throws {Error} Thrown if an attempt is made to allow a non-whitelisted\n *     attribute.\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.onlyAllowAttributes =\n    function(attrWhitelist) {\n  'use strict';\n  var oldWhitelist = this.attributeWhitelist_;\n  this.attributeWhitelist_ = {};\n  attrWhitelist.forEach(function(attr) {\n    'use strict';\n    if (typeof attr === 'string') {\n      attr = {tagName: '*', attributeName: attr.toUpperCase(), policy: null};\n    }\n    var handlerName = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(\n        attr.tagName, attr.attributeName);\n    if (!oldWhitelist[handlerName]) {\n      throw new Error('Only whitelisted attributes can be allowed.');\n    }\n    this.attributeWhitelist_[handlerName] = attr.policy ?\n        attr.policy :\n        /** @type {goog.html.sanitizer.HtmlSanitizerPolicy} */\n        (goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_);\n  }, this);\n  return this;\n};\n\n\n/**\n * Adds the original tag name in the data attribute 'original-tag' when unknown\n * tags are sanitized to &lt;span&rt;, so that caller can distinguish them from\n * actual &lt;span&rt; tags.\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.addOriginalTagNames =\n    function() {\n  'use strict';\n  this.shouldAddOriginalTagNames_ = true;\n  return this;\n};\n\n\n/**\n * Sets a custom network URL policy.\n * @param {!goog.html.sanitizer.HtmlSanitizerUrlPolicy}\n *     customNetworkReqUrlPolicy\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype\n    .withCustomNetworkRequestUrlPolicy = function(customNetworkReqUrlPolicy) {\n  'use strict';\n  this.networkRequestUrlPolicy_ = customNetworkReqUrlPolicy;\n  return this;\n};\n\n\n/**\n * Sets a custom non-network URL policy.\n * @param {!goog.html.sanitizer.HtmlSanitizerUrlPolicy} customUrlPolicy\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomUrlPolicy =\n    function(customUrlPolicy) {\n  'use strict';\n  this.urlPolicy_ = customUrlPolicy;\n  return this;\n};\n\n\n/**\n * Sets a custom name policy.\n * @param {!goog.html.sanitizer.HtmlSanitizerPolicy} customNamePolicy\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomNamePolicy =\n    function(customNamePolicy) {\n  'use strict';\n  this.namePolicy_ = customNamePolicy;\n  return this;\n};\n\n\n/**\n * Sets a custom token policy.\n * @param {!goog.html.sanitizer.HtmlSanitizerPolicy} customTokenPolicy\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomTokenPolicy =\n    function(customTokenPolicy) {\n  'use strict';\n  this.tokenPolicy_ = customTokenPolicy;\n  return this;\n};\n\n\n/**\n * Wraps a custom policy function with the sanitizer's default policy.\n * @param {?goog.html.sanitizer.HtmlSanitizerPolicy} customPolicy The custom\n *     policy for the tag/attribute combination.\n * @param {!goog.html.sanitizer.HtmlSanitizerPolicy} defaultPolicy The\n *     sanitizer's policy that is always called after the custom policy.\n * @return {!goog.html.sanitizer.HtmlSanitizerPolicy}\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.wrapPolicy_ = function(\n    customPolicy, defaultPolicy) {\n  'use strict';\n  return /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (function(\n      value, hints, ctx, policy) {\n    'use strict';\n    var result = customPolicy(value, hints, ctx, policy);\n    return result == null ? null : defaultPolicy(result, hints, ctx, policy);\n  });\n};\n\n\n/**\n * Installs the sanitizer's default policy for a specific tag/attribute\n * combination on the provided whitelist, but only if a policy already exists.\n * @param {!Object<string, !goog.html.sanitizer.HtmlSanitizerPolicy>}\n *     whitelist The whitelist to modify.\n * @param {!Object<string, boolean>} overrideList The set of attributes handlers\n *     that should not be wrapped with a default policy.\n * @param {string} key The tag/attribute combination\n * @param {!goog.html.sanitizer.HtmlSanitizerPolicy} defaultPolicy The\n *     sanitizer's policy.\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.installDefaultPolicy_ = function(\n    whitelist, overrideList, key, defaultPolicy) {\n  'use strict';\n  if (whitelist[key] && !overrideList[key]) {\n    whitelist[key] = goog.html.sanitizer.HtmlSanitizer.wrapPolicy_(\n        whitelist[key], defaultPolicy);\n  }\n};\n\n\n/**\n * Builds and returns a goog.html.sanitizer.HtmlSanitizer object.\n * @return {!goog.html.sanitizer.HtmlSanitizer}\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.build = function() {\n  'use strict';\n  return new goog.html.sanitizer.HtmlSanitizer(this);\n};\n\n\n/**\n * Installs the sanitization policies for the attributes.\n * May only be called once.\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.installPolicies_ =\n    function() {\n  'use strict';\n  if (this.policiesInstalled_) {\n    throw new Error('HtmlSanitizer.Builder.build() can only be used once.');\n  }\n\n  var installPolicy = goog.html.sanitizer.HtmlSanitizer.installDefaultPolicy_;\n\n  // Binding all the non-trivial attribute sanitizers to the appropriate,\n  // potentially customizable, handling functions at build().\n  installPolicy(\n      this.attributeWhitelist_, this.attributeOverrideList_, '* USEMAP',\n      /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (\n          goog.html.sanitizer.HtmlSanitizer.sanitizeUrlFragment_));\n\n  var urlAttributes = ['* ACTION', '* CITE', '* HREF'];\n  var urlPolicy =\n      goog.html.sanitizer.HtmlSanitizer.wrapUrlPolicy_(this.urlPolicy_);\n  urlAttributes.forEach(function(attribute) {\n    'use strict';\n    installPolicy(\n        this.attributeWhitelist_, this.attributeOverrideList_, attribute,\n        urlPolicy);\n  }, this);\n\n  var networkUrlAttributes = [\n    // LONGDESC can result in a network request. See b/23381636.\n    '* LONGDESC', '* SRC', 'LINK HREF'\n  ];\n  var networkRequestUrlPolicy =\n      goog.html.sanitizer.HtmlSanitizer.wrapUrlPolicy_(\n          this.networkRequestUrlPolicy_);\n  networkUrlAttributes.forEach(function(attribute) {\n    'use strict';\n    installPolicy(\n        this.attributeWhitelist_, this.attributeOverrideList_, attribute,\n        networkRequestUrlPolicy);\n  }, this);\n\n  var nameAttributes = ['* FOR', '* HEADERS', '* NAME'];\n  nameAttributes.forEach(function(attribute) {\n    'use strict';\n    installPolicy(\n        this.attributeWhitelist_, this.attributeOverrideList_, attribute,\n        /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */\n        (goog.partial(\n            goog.html.sanitizer.HtmlSanitizer.sanitizeName_,\n            this.namePolicy_)));\n  }, this);\n\n  installPolicy(\n      this.attributeWhitelist_, this.attributeOverrideList_, 'A TARGET',\n      /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (goog.partial(\n          goog.html.sanitizer.HtmlSanitizer.allowedAttributeValues_,\n          ['_blank', '_self'])));\n\n  installPolicy(\n      this.attributeWhitelist_, this.attributeOverrideList_, '* CLASS',\n      /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (goog.partial(\n          goog.html.sanitizer.HtmlSanitizer.sanitizeClasses_,\n          this.tokenPolicy_)));\n\n  installPolicy(\n      this.attributeWhitelist_, this.attributeOverrideList_, '* ID',\n      /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (goog.partial(\n          goog.html.sanitizer.HtmlSanitizer.sanitizeId_, this.tokenPolicy_)));\n\n  installPolicy(\n      this.attributeWhitelist_, this.attributeOverrideList_, '* STYLE',\n      /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */\n      (goog.partial(this.sanitizeInlineCssPolicy_, networkRequestUrlPolicy)));\n\n  this.policiesInstalled_ = true;\n};\n\n\n/**\n * The default policy for URLs: allow any.\n * @private @const {!goog.html.sanitizer.HtmlSanitizerUrlPolicy}\n */\ngoog.html.sanitizer.HtmlSanitizer.defaultUrlPolicy_ =\n    goog.html.SafeUrl.sanitize;\n\n\n/**\n * The default policy for URLs which cause network requests: drop all.\n * @private @const {!goog.html.sanitizer.HtmlSanitizerUrlPolicy}\n */\ngoog.html.sanitizer.HtmlSanitizer.defaultNetworkRequestUrlPolicy_ =\n    goog.functions.NULL;\n\n\n/**\n * The default policy for attribute names: drop all.\n * @private @const {!goog.html.sanitizer.HtmlSanitizerPolicy}\n */\ngoog.html.sanitizer.HtmlSanitizer.defaultNamePolicy_ = goog.functions.NULL;\n\n\n/**\n * The default policy for other tokens (i.e. class names and IDs): drop all.\n * @private @const {!goog.html.sanitizer.HtmlSanitizerPolicy}\n */\ngoog.html.sanitizer.HtmlSanitizer.defaultTokenPolicy_ = goog.functions.NULL;\n\n\n\n/**\n * Returns a key into the attribute handlers dictionary given a node name and\n * an attribute name. If no node name is given, returns a key applying to all\n * nodes.\n * @param {?string} nodeName\n * @param {string} attributeName\n * @return {string} key into attribute handlers dict\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.attrIdentifier_ = function(\n    nodeName, attributeName) {\n  'use strict';\n  if (!nodeName) {\n    nodeName = '*';\n  }\n  return (nodeName + ' ' + attributeName).toUpperCase();\n};\n\n\n/**\n * Sanitizes a list of CSS declarations.\n * @param {goog.html.sanitizer.HtmlSanitizerPolicy} policySanitizeUrl\n * @param {string} attrValue\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyContext} policyContext\n * @return {?string} sanitizedCss from the policyContext\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.sanitizeCssDeclarationList_ = function(\n    policySanitizeUrl, attrValue, policyHints, policyContext) {\n  'use strict';\n  if (!policyContext.cssStyle) {\n    return null;\n  }\n  var naiveUriRewriter = function(uri, prop) {\n    'use strict';\n    policyHints.cssProperty = prop;\n    var sanitizedUrl = policySanitizeUrl(uri, policyHints);\n    if (sanitizedUrl == null) {\n      return null;\n    }\n    return goog.html.uncheckedconversions\n        .safeUrlFromStringKnownToSatisfyTypeContract(\n            goog.string.Const.from(\n                'HtmlSanitizerPolicy created with networkRequestUrlPolicy_ ' +\n                'when installing \\'* STYLE\\' handler.'),\n            sanitizedUrl);\n  };\n  var sanitizedStyle = goog.html.SafeStyle.unwrap(\n      goog.html.sanitizer.CssSanitizer.sanitizeInlineStyle(\n          policyContext.cssStyle, naiveUriRewriter));\n  return sanitizedStyle == '' ? null : sanitizedStyle;\n};\n\n\n/**\n * Cleans up an attribute value that we don't particularly want to do anything\n * to. At the moment we just trim the whitespace.\n * @param {string} attrValue\n * @return {string} sanitizedAttrValue\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_ = function(attrValue) {\n  'use strict';\n  return goog.string.trim(attrValue);\n};\n\n\n/**\n * Allows a set of attribute values.\n * @param {!Array<string>} allowedValues Set of allowed values lowercased.\n * @param {string} attrValue\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\n * @return {?string} sanitizedAttrValue\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.allowedAttributeValues_ = function(\n    allowedValues, attrValue, policyHints) {\n  'use strict';\n  var trimmed = goog.string.trim(attrValue);\n  return goog.array.contains(allowedValues, trimmed.toLowerCase()) ? trimmed :\n                                                                     null;\n};\n\n\n/**\n * Sanitizes URL fragments.\n * @param {string} urlFragment\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\n * @return {?string} sanitizedAttrValue\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.sanitizeUrlFragment_ = function(\n    urlFragment, policyHints) {\n  'use strict';\n  var trimmed = goog.string.trim(urlFragment);\n  if (trimmed && trimmed.charAt(0) == '#') {\n    // We do not apply the name or token policy to Url Fragments by design.\n    return trimmed;\n  }\n  return null;\n};\n\n\n/**\n * Runs an attribute name through a name policy.\n * @param {goog.html.sanitizer.HtmlSanitizerPolicy} namePolicy\n * @param {string} attrName\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\n * @return {?string} sanitizedAttrValue\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.sanitizeName_ = function(\n    namePolicy, attrName, policyHints) {\n  'use strict';\n  var trimmed = goog.string.trim(attrName);\n  /* NOTE(user):\n   * There are two cases to be concerned about - escaped quotes in attribute\n   * values which is the responsibility of the serializer and illegal\n   * characters.  The latter does violate the spec but I do not believe it has\n   * a security consequence.\n   */\n  return namePolicy(trimmed, policyHints);\n};\n\n\n/**\n * Ensures that the class prefix is present on all space-separated tokens\n * (i.e. all class names).\n * @param {goog.html.sanitizer.HtmlSanitizerPolicy} tokenPolicy\n * @param {string} attrValue\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\n * @return {?string} sanitizedAttrValue\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.sanitizeClasses_ = function(\n    tokenPolicy, attrValue, policyHints) {\n  'use strict';\n  var classes = attrValue.split(/(?:\\s+)/);\n  var sanitizedClasses = [];\n  for (var i = 0; i < classes.length; i++) {\n    var sanitizedClass = tokenPolicy(classes[i], policyHints);\n    if (sanitizedClass) {\n      sanitizedClasses.push(sanitizedClass);\n    }\n  }\n  return sanitizedClasses.length == 0 ? null : sanitizedClasses.join(' ');\n};\n\n\n/**\n * Ensures that the id prefix is present.\n * @param {goog.html.sanitizer.HtmlSanitizerPolicy} tokenPolicy\n * @param {string} attrValue\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\n * @return {?string} sanitizedAttrValue\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.sanitizeId_ = function(\n    tokenPolicy, attrValue, policyHints) {\n  'use strict';\n  var trimmed = goog.string.trim(attrValue);\n  return tokenPolicy(trimmed, policyHints);\n};\n\n\n/**\n * Retrieves a HtmlSanitizerPolicyContext from a dirty node given an attribute\n * name.\n * @param {string} attributeName\n * @param {!Element} dirtyElement\n * @return {!goog.html.sanitizer.HtmlSanitizerPolicyContext}\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.getContext_ = function(\n    attributeName, dirtyElement) {\n  'use strict';\n  var policyContext = {cssStyle: undefined};\n  if (attributeName == 'style') {\n    policyContext.cssStyle =\n        goog.html.sanitizer.noclobber.getElementStyle(dirtyElement);\n  }\n  return policyContext;\n};\n\n\n/**\n * Parses the DOM tree of a given HTML string, then walks the tree. For each\n * element, it creates a new sanitized version, applies sanitized attributes,\n * and returns a SafeHtml object representing the sanitized tree.\n * @param {string} unsanitizedHtml\n * @return {!goog.html.SafeHtml} Sanitized HTML\n */\ngoog.html.sanitizer.HtmlSanitizer.prototype.sanitize = function(\n    unsanitizedHtml) {\n  'use strict';\n  this.currentStyleContainerId_ = this.getStyleContainerId_();\n  var sanitizedString = this.processToString(unsanitizedHtml);\n  return goog.html.uncheckedconversions\n      .safeHtmlFromStringKnownToSatisfyTypeContract(\n          goog.string.Const.from('Output of HTML sanitizer'), sanitizedString);\n};\n\n\n/**\n * Parses the DOM tree of a given HTML string, then walks the tree. For each\n * element, it creates a new sanitized version, applies sanitized attributes,\n * and returns a span element containing the sanitized content. The root element\n * might define a class name to restrict the visibility of CSS rules contained\n * in tree.\n * @param {string} unsanitizedHtml\n * @return {!HTMLSpanElement} Sanitized HTML\n */\ngoog.html.sanitizer.HtmlSanitizer.prototype.sanitizeToDomNode = function(\n    unsanitizedHtml) {\n  'use strict';\n  this.currentStyleContainerId_ = this.getStyleContainerId_();\n  return goog.html.sanitizer.SafeDomTreeProcessor.prototype.processToTree.call(\n      this, unsanitizedHtml);\n};\n\n\n/** @override */\ngoog.html.sanitizer.HtmlSanitizer.prototype.processRoot = function(newRoot) {\n  'use strict';\n  // If the container ID was manually specified, we let the caller add the\n  // ancestor to activate the rules.\n  if (this.currentStyleContainerId_ &&\n      this.styleContainerId_ == goog.html.sanitizer.RANDOM_CONTAINER_) {\n    newRoot.id = this.currentStyleContainerId_;\n  }\n};\n\n\n/** @override */\ngoog.html.sanitizer.HtmlSanitizer.prototype.preProcessHtml = function(\n    unsanitizedHtml) {\n  'use strict';\n  if (!this.inlineStyleRules_) {\n    return unsanitizedHtml;\n  }\n  // Inline style rules on the unsanitized input, so that we don't have to\n  // worry about customTokenPolicy and customNamePolicy interferring with\n  // selectors.\n  // TODO(pelizzi): To generate an inert document tree to walk on, we are going\n  // to parse the document into a DOM tree twice --\n  // first with DOMParser here, and then by setting innerHTML on a new TEMPLATE\n  // element in the main sanitization loop (see getDomTreeWalker in\n  // safedomtreeprocessor.js). It would be best if we used one technique\n  // consistently, parsing the input string once and passing a single inert tree\n  // from one phase to another, but the decision to use TEMPLATE rather than\n  // DomParser or document.createHtmlImplementation as the inert HTML container\n  // for the main sanitization logic predates the work on supporting STYLE tags,\n  // and we later found on that TEMPLATE inert documents do not have computed\n  // stylesheet information on STYLE tags.\n  var inertUnsanitizedDom =\n      goog.html.sanitizer.CssSanitizer.safeParseHtmlAndGetInertElement(\n          '<div>' + unsanitizedHtml + '</div>');\n  goog.asserts.assert(\n      inertUnsanitizedDom,\n      'Older browsers that don\\'t support inert ' +\n          'parsing should not get to this branch');\n  goog.html.sanitizer.CssSanitizer.inlineStyleRules(inertUnsanitizedDom);\n  return inertUnsanitizedDom.innerHTML;\n};\n\n\n/**\n * Gets the style container ID for the sanitized output, or creates a new random\n * one. If no style container is necessary or style containment is disabled,\n * returns null.\n * @return {?string}\n * @private\n */\ngoog.html.sanitizer.HtmlSanitizer.prototype.getStyleContainerId_ = function() {\n  'use strict';\n  var randomStyleContainmentEnabled =\n      this.styleContainerId_ == goog.html.sanitizer.RANDOM_CONTAINER_;\n  var randomStyleContainmentNecessary =\n      !('STYLE' in this.tagBlacklist_) && 'STYLE' in this.tagWhitelist_;\n  // If the builder was configured to create a random unique ID, create one, but\n  // do so only if STYLE is allowed to begin with.\n  return randomStyleContainmentEnabled && randomStyleContainmentNecessary ?\n      'sanitizer-' + goog.string.getRandomString() :\n      this.styleContainerId_;\n};\n\n\n/** @override */\ngoog.html.sanitizer.HtmlSanitizer.prototype.createTextNode = function(\n    dirtyNode) {\n  'use strict';\n  // Text nodes don't need to be sanitized, unless they are children of STYLE\n  // and STYLE tags are allowed.\n  var textContent = dirtyNode.data;\n  // If STYLE is allowed, apply a policy to its text content. Ideally\n  // sanitizing text content of tags shouldn't be hardcoded for STYLE, but we\n  // have no plans to support sanitizing the text content of other nodes for\n  // now.\n  var dirtyParent = goog.html.sanitizer.noclobber.getParentNode(dirtyNode);\n  if (dirtyParent &&\n      goog.html.sanitizer.noclobber.getNodeName(dirtyParent).toLowerCase() ==\n          'style' &&\n      !('STYLE' in this.tagBlacklist_) && 'STYLE' in this.tagWhitelist_) {\n    // Note that we don't have access to the parsed CSS declarations inside a\n    // TEMPLATE tag, so the CSS sanitizer accepts a string and parses it\n    // on its own using DOMParser.\n    textContent = goog.html.SafeStyleSheet.unwrap(\n        goog.html.sanitizer.CssSanitizer.sanitizeStyleSheetString(\n            textContent, this.currentStyleContainerId_,\n            goog.bind(function(uri, propName) {\n              'use strict';\n              return this.networkRequestUrlPolicy_(\n                  uri, {cssProperty: propName});\n            }, this)));\n  }\n  return document.createTextNode(textContent);\n};\n\n\n/** @override */\ngoog.html.sanitizer.HtmlSanitizer.prototype.createElementWithoutAttributes =\n    function(dirtyElement) {\n  'use strict';\n  const dirtyName =\n      goog.html.sanitizer.noclobber.getNodeName(dirtyElement).toUpperCase();\n  if (dirtyName in this.tagBlacklist_) {\n    // If it's blacklisted, completely remove the tag and its descendants.\n    return null;\n  }\n  const dirtyNamespaceURI =\n      goog.html.sanitizer.noclobber.getElementNamespaceURI(dirtyElement);\n  if (dirtyNamespaceURI != goog.html.sanitizer.XHTML_NAMESPACE_URI_) {\n    // We explicitly drop tags (and their descendants) in non-html\n    // namespaces because these can be exploited during their conversion to the\n    // html namespace (e.g. <MATH><STYLE><A> -> <SPAN><STYLE><A>, where STYLE\n    // and A were MathML tags before sanitization and HTML tags afterwards.\n    return null;\n  }\n  if (this.tagWhitelist_[dirtyName]) {\n    // If it's whitelisted, keep as is.\n    return document.createElement(dirtyName);\n  }\n  // If it's neither blacklisted nor whitelisted, replace with span. If the\n  // relevant builder option is enabled, the tag will bear the original tag\n  // name in a data attribute.\n  const spanElement = goog.dom.createElement(goog.dom.TagName.SPAN);\n  if (this.shouldAddOriginalTagNames_) {\n    goog.html.sanitizer.noclobber.setElementAttribute(\n        spanElement, goog.html.sanitizer.HTML_SANITIZER_SANITIZED_ATTR_NAME_,\n        dirtyName.toLowerCase());\n  }\n  return spanElement;\n};\n\n\n/** @override */\ngoog.html.sanitizer.HtmlSanitizer.prototype.processElementAttribute = function(\n    dirtyElement, attribute) {\n  'use strict';\n  var attributeName = attribute.name;\n  if (goog.string.startsWith(\n          attributeName,\n          goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_)) {\n    // This is the namespace for the data attributes added by the sanitizer. We\n    // prevent untrusted content from setting them in the output.\n    return null;\n  }\n\n  var elementName = goog.html.sanitizer.noclobber.getNodeName(dirtyElement);\n  var unsanitizedAttrValue = attribute.value;\n\n  // Create policy hints object\n  var policyHints = {\n    tagName: goog.string.trim(elementName).toLowerCase(),\n    attributeName: goog.string.trim(attributeName).toLowerCase()\n  };\n  var policyContext = goog.html.sanitizer.HtmlSanitizer.getContext_(\n      policyHints.attributeName, dirtyElement);\n\n  // Prefer attribute handler for this specific tag.\n  var tagHandlerIndex = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(\n      elementName, attributeName);\n  if (tagHandlerIndex in this.attributeHandlers_) {\n    var handler = this.attributeHandlers_[tagHandlerIndex];\n    return handler(unsanitizedAttrValue, policyHints, policyContext);\n  }\n  // Fall back on attribute handler for wildcard tag.\n  var genericHandlerIndex =\n      goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(null, attributeName);\n  if (genericHandlerIndex in this.attributeHandlers_) {\n    var handler = this.attributeHandlers_[genericHandlerIndex];\n    return handler(unsanitizedAttrValue, policyHints, policyContext);\n  }\n  return null;\n};\n\n\n/**\n * Sanitizes a HTML string using a sanitizer with default options.\n * @param {string} unsanitizedHtml\n * @return {!goog.html.SafeHtml} sanitizedHtml\n */\ngoog.html.sanitizer.HtmlSanitizer.sanitize = function(unsanitizedHtml) {\n  'use strict';\n  var sanitizer = new goog.html.sanitizer.HtmlSanitizer.Builder().build();\n  return sanitizer.sanitize(unsanitizedHtml);\n};\n","~:compiled-at",1645592433487,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.html.sanitizer.htmlsanitizer.js\",\n\"lineCount\":413,\n\"mappings\":\"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\",\n\"sources\":[\"goog/html/sanitizer/htmlsanitizer.js\"],\n\"sourcesContent\":[\"/**\\n * @license\\n * Copyright The Closure Library Authors.\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n\\n/**\\n * @fileoverview An HTML sanitizer that can satisfy a variety of security\\n * policies.\\n *\\n * This package provides html sanitizing functions. It does not enforce string\\n * to string conversion, instead returning a dom-like element when possible.\\n *\\n * Examples of usage of the static `HtmlSanitizer.sanitize`:\\n * <pre>\\n *   var safeHtml = HtmlSanitizer.sanitize('<script src=\\\"xss.js\\\" />');\\n *   goog.dom.safe.setInnerHtml(el, safeHtml);\\n * </pre>\\n *\\n * @supported IE 10+, Chrome 26+, Firefox 22+, Safari 7.1+, Opera 15+\\n */\\ngoog.provide('goog.html.sanitizer');\\ngoog.provide('goog.html.sanitizer.HtmlSanitizer');\\ngoog.provide('goog.html.sanitizer.HtmlSanitizer.Builder');\\ngoog.provide('goog.html.sanitizer.HtmlSanitizerAttributePolicy');\\ngoog.provide('goog.html.sanitizer.HtmlSanitizerPolicy');\\ngoog.provide('goog.html.sanitizer.HtmlSanitizerPolicyContext');\\ngoog.provide('goog.html.sanitizer.HtmlSanitizerPolicyHints');\\ngoog.provide('goog.html.sanitizer.HtmlSanitizerUrlPolicy');\\n\\ngoog.require('goog.array');\\ngoog.require('goog.asserts');\\ngoog.require('goog.dom');\\ngoog.require('goog.dom.TagName');\\ngoog.require('goog.functions');\\ngoog.require('goog.html.SafeHtml');\\ngoog.require('goog.html.SafeStyle');\\ngoog.require('goog.html.SafeStyleSheet');\\ngoog.require('goog.html.SafeUrl');\\ngoog.require('goog.html.sanitizer.CssSanitizer');\\ngoog.require('goog.html.sanitizer.SafeDomTreeProcessor');\\ngoog.require('goog.html.sanitizer.TagBlacklist');\\ngoog.require('goog.html.sanitizer.TagWhitelist');\\ngoog.require('goog.html.sanitizer.attributeallowlists');\\ngoog.require('goog.html.sanitizer.noclobber');\\ngoog.require('goog.html.uncheckedconversions');\\ngoog.require('goog.object');\\ngoog.require('goog.string');\\ngoog.require('goog.string.Const');\\n\\n\\n/**\\n * Type for optional hints to policy handler functions.\\n * @typedef {{\\n *     tagName: (string|undefined),\\n *     attributeName: (string|undefined),\\n *     cssProperty: (string|undefined)\\n *     }}\\n */\\ngoog.html.sanitizer.HtmlSanitizerPolicyHints;\\n\\n\\n/**\\n * Type for optional context objects to the policy handler functions.\\n * @typedef {{\\n *     cssStyle: (?CSSStyleDeclaration|undefined)\\n *     }}\\n */\\ngoog.html.sanitizer.HtmlSanitizerPolicyContext;\\n\\n\\n/**\\n * Type for a policy function.\\n * @typedef {function(string, goog.html.sanitizer.HtmlSanitizerPolicyHints=,\\n *     goog.html.sanitizer.HtmlSanitizerPolicyContext=,\\n *     (function(string, ?=, ?=, ?=):?string)=):?string}\\n */\\ngoog.html.sanitizer.HtmlSanitizerPolicy;\\n\\n\\n/**\\n * Type for a URL policy function.\\n *\\n * @typedef {function(string, !goog.html.sanitizer.HtmlSanitizerPolicyHints=):\\n *     ?goog.html.SafeUrl}\\n */\\ngoog.html.sanitizer.HtmlSanitizerUrlPolicy;\\n\\n\\n/**\\n * Type for attribute policy configuration.\\n * @typedef {{\\n *     tagName: string,\\n *     attributeName: string,\\n *     policy: ?goog.html.sanitizer.HtmlSanitizerPolicy\\n * }}\\n */\\ngoog.html.sanitizer.HtmlSanitizerAttributePolicy;\\n\\n\\n/**\\n * Prefix used by all internal html sanitizer booking properties.\\n * @private @const {string}\\n */\\ngoog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_ = 'data-sanitizer-';\\n\\n\\n/**\\n * Attribute name added to span tags that replace unknown tags. The value of\\n * this attribute is the name of the tag before the sanitization occurred.\\n * @private @const {string}\\n */\\ngoog.html.sanitizer.HTML_SANITIZER_SANITIZED_ATTR_NAME_ =\\n    goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_ + 'original-tag';\\n\\n/**\\n * A list of tags that contain '-' but are invalid custom element tags.\\n * @private @const @dict {boolean}\\n */\\ngoog.html.sanitizer.HTML_SANITIZER_INVALID_CUSTOM_TAGS_ = {\\n  'ANNOTATION-XML': true,\\n  'COLOR-PROFILE': true,\\n  'FONT-FACE': true,\\n  'FONT-FACE-SRC': true,\\n  'FONT-FACE-URI': true,\\n  'FONT-FACE-FORMAT': true,\\n  'FONT-FACE-NAME': true,\\n  'MISSING-GLYPH': true,\\n};\\n\\n\\n/**\\n * Special value for the STYLE container ID, which makes the sanitizer choose\\n * a new random ID on each call to {@link sanitize}.\\n * @private @const {string}\\n */\\ngoog.html.sanitizer.RANDOM_CONTAINER_ = '*';\\n\\n\\n/**\\n * The only supported namespace. We drop tags outside of this namespace.\\n * @private @const {string}\\n */\\ngoog.html.sanitizer.XHTML_NAMESPACE_URI_ = 'http://www.w3.org/1999/xhtml';\\n\\n\\n/**\\n * Creates an HTML sanitizer.\\n * @param {!goog.html.sanitizer.HtmlSanitizer.Builder=} opt_builder\\n * @final @constructor @struct\\n * @extends {goog.html.sanitizer.SafeDomTreeProcessor}\\n */\\ngoog.html.sanitizer.HtmlSanitizer = function(opt_builder) {\\n  'use strict';\\n  goog.html.sanitizer.SafeDomTreeProcessor.call(this);\\n\\n  var builder = opt_builder || new goog.html.sanitizer.HtmlSanitizer.Builder();\\n\\n  builder.installPolicies_();\\n\\n  /**\\n   * @private @const {!Object<string, !goog.html.sanitizer.HtmlSanitizerPolicy>}\\n   */\\n  this.attributeHandlers_ = goog.object.clone(builder.attributeWhitelist_);\\n\\n  /** @private @const {!Object<string, boolean>} */\\n  this.tagBlacklist_ = goog.object.clone(builder.tagBlacklist_);\\n\\n  /** @private @const {!Object<string, boolean>} */\\n  this.tagWhitelist_ = goog.object.clone(builder.tagWhitelist_);\\n\\n  /** @private @const {boolean} */\\n  this.shouldAddOriginalTagNames_ = builder.shouldAddOriginalTagNames_;\\n\\n  // Add whitelist data-* attributes from the builder to the attributeHandlers\\n  // with a default cleanUpAttribute function. data-* attributes are inert as\\n  // per HTML5 specs, so not much sanitization needed.\\n  builder.dataAttributeWhitelist_.forEach(function(dataAttr) {\\n    'use strict';\\n    if (!goog.string.startsWith(dataAttr, 'data-')) {\\n      throw new goog.asserts.AssertionError(\\n          'Only \\\"data-\\\" attributes allowed, got: %s.', [dataAttr]);\\n    }\\n    if (goog.string.startsWith(\\n            dataAttr, goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_)) {\\n      throw new goog.asserts.AssertionError(\\n          'Attributes with \\\"%s\\\" prefix are not allowed, got: %s.',\\n          [goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_, dataAttr]);\\n    }\\n    this.attributeHandlers_['* ' + dataAttr.toUpperCase()] =\\n        /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (\\n            goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_);\\n  }, this);\\n\\n  // Add whitelist custom element tags, ensures that they contains at least one\\n  // '-' and that they are not part of the reserved names.\\n  builder.customElementTagWhitelist_.forEach(function(customTag) {\\n    'use strict';\\n    customTag = customTag.toUpperCase();\\n    if (!goog.string.contains(customTag, '-') ||\\n        goog.html.sanitizer.HTML_SANITIZER_INVALID_CUSTOM_TAGS_[customTag]) {\\n      throw new goog.asserts.AssertionError(\\n          'Only valid custom element tag names allowed, got: %s.', [customTag]);\\n    }\\n    this.tagWhitelist_[customTag] = true;\\n  }, this);\\n\\n  /** @private @const {!goog.html.sanitizer.HtmlSanitizerUrlPolicy} */\\n  this.networkRequestUrlPolicy_ = builder.networkRequestUrlPolicy_;\\n\\n  /** @private @const {?string} */\\n  this.styleContainerId_ = builder.styleContainerId_;\\n\\n  /** @private {?string} */\\n  this.currentStyleContainerId_ = null;\\n\\n  /** @private @const {boolean} */\\n  this.inlineStyleRules_ = builder.inlineStyleRules_;\\n};\\ngoog.inherits(\\n    goog.html.sanitizer.HtmlSanitizer,\\n    goog.html.sanitizer.SafeDomTreeProcessor);\\n\\n\\n/**\\n * Transforms a {@link HtmlSanitizerUrlPolicy} into a\\n * {@link HtmlSanitizerPolicy} by returning a wrapper that calls the {@link\\n * HtmlSanitizerUrlPolicy} with the required arguments and unwraps the returned\\n * {@link SafeUrl}. This is necessary because internally the sanitizer works\\n * with {@HtmlSanitizerPolicy} to sanitize attributes, but its public API must\\n * use {@HtmlSanitizerUrlPolicy} to ensure that callers do not violate SafeHtml\\n * invariants in their custom handlers.\\n * @param {!goog.html.sanitizer.HtmlSanitizerUrlPolicy} urlPolicy\\n * @return {!goog.html.sanitizer.HtmlSanitizerPolicy}\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.wrapUrlPolicy_ = function(urlPolicy) {\\n  'use strict';\\n  return /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (function(\\n      url, policyHints) {\\n    'use strict';\\n    var trimmed = goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_(url);\\n    var safeUrl = urlPolicy(trimmed, policyHints);\\n    if (safeUrl &&\\n        goog.html.SafeUrl.unwrap(safeUrl) !=\\n            goog.html.SafeUrl.INNOCUOUS_STRING) {\\n      return goog.html.SafeUrl.unwrap(safeUrl);\\n    } else {\\n      return null;\\n    }\\n  });\\n};\\n\\n\\n\\n/**\\n * The builder for the HTML Sanitizer. All methods except build return\\n * `this`.\\n * @final @constructor @struct\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder = function() {\\n  'use strict';\\n  /**\\n   * A set of attribute sanitization functions. Default built-in handlers are\\n   * all tag-agnostic by design. Note that some attributes behave differently\\n   * when attached to different nodes (for example, the href attribute will\\n   * generally not make a network request, but &lt;link href=\\\"\\\"&gt; does), and\\n   * so when necessary a tag-specific handler can be used to override a\\n   * tag-agnostic one.\\n   * @private {!Object<string, !goog.html.sanitizer.HtmlSanitizerPolicy>}\\n   */\\n  this.attributeWhitelist_ = {};\\n  goog.array.forEach(\\n      [\\n        goog.html.sanitizer.attributeallowlists.AllowedAttributes,\\n        goog.html.sanitizer.attributeallowlists.SanitizedAttributeAllowlist\\n      ],\\n      function(wl) {\\n        'use strict';\\n        goog.object.getKeys(wl).forEach(function(attr) {\\n          'use strict';\\n          this.attributeWhitelist_[attr] =\\n              /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (\\n                  goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_);\\n        }, this);\\n      },\\n      this);\\n\\n  /**\\n   * A set of attribute handlers that should not inherit their default policy\\n   * during build().\\n   * @private @const {!Object<string, boolean>}\\n   */\\n  this.attributeOverrideList_ = {};\\n\\n  /**\\n   * List of data attributes to whitelist. Data-attributes are inert and don't\\n   * require sanitization.\\n   * @private @const {!Array<string>}\\n   */\\n  this.dataAttributeWhitelist_ = [];\\n\\n  /**\\n   * List of custom element tags to whitelist. Custom elements are inert on\\n   * their own and require code to actually be dangerous, so the risk is similar\\n   * to data-attributes.\\n   * @private @const {!Array<string>}\\n   */\\n  this.customElementTagWhitelist_ = [];\\n\\n  /**\\n   * A tag blacklist, to effectively remove an element and its children from the\\n   * dom.\\n   * @private @const {!Object<string, boolean>}\\n   */\\n  this.tagBlacklist_ = goog.object.clone(goog.html.sanitizer.TagBlacklist);\\n\\n  /**\\n   * A tag whitelist, to effectively allow an element and its children from the\\n   * dom.\\n   * @private {!Object<string, boolean>}\\n   */\\n  this.tagWhitelist_ = goog.object.clone(goog.html.sanitizer.TagWhitelist);\\n\\n  /**\\n   * Whether non-whitelisted and non-blacklisted tags that have been converted\\n   * to &lt;span&rt; tags will contain the original tag in a data attribute.\\n   * @private {boolean}\\n   */\\n  this.shouldAddOriginalTagNames_ = false;\\n\\n  /**\\n   * A function to be applied to URLs found on the parsing process which do not\\n   * trigger requests.\\n   * @private {!goog.html.sanitizer.HtmlSanitizerUrlPolicy}\\n   */\\n  this.urlPolicy_ = goog.html.sanitizer.HtmlSanitizer.defaultUrlPolicy_;\\n\\n  /**\\n   * A function to be applied to urls found on the parsing process which may\\n   * trigger requests.\\n   * @private {!goog.html.sanitizer.HtmlSanitizerUrlPolicy}\\n   */\\n  this.networkRequestUrlPolicy_ =\\n      goog.html.sanitizer.HtmlSanitizer.defaultNetworkRequestUrlPolicy_;\\n\\n  /**\\n   * A function to be applied to names found on the parsing process.\\n   * @private {!goog.html.sanitizer.HtmlSanitizerPolicy}\\n   */\\n  this.namePolicy_ = goog.html.sanitizer.HtmlSanitizer.defaultNamePolicy_;\\n\\n  /**\\n   * A function to be applied to other tokens (i.e. classes and IDs) found on\\n   * the parsing process.\\n   * @private {!goog.html.sanitizer.HtmlSanitizerPolicy}\\n   */\\n  this.tokenPolicy_ = goog.html.sanitizer.HtmlSanitizer.defaultTokenPolicy_;\\n\\n  /**\\n   * A function to sanitize inline CSS styles. Defaults to deny all.\\n   * @private {function(\\n   *     !goog.html.sanitizer.HtmlSanitizerPolicy,\\n   *     string,\\n   *     !goog.html.sanitizer.HtmlSanitizerPolicyHints,\\n   *     !goog.html.sanitizer.HtmlSanitizerPolicyContext):?string}\\n   */\\n  this.sanitizeInlineCssPolicy_ = goog.functions.NULL;\\n\\n  /**\\n   * An optional ID to restrict the scope of CSS rules when STYLE tags are\\n   * allowed.\\n   * @private {?string}\\n   */\\n  this.styleContainerId_ = null;\\n\\n  /**\\n   * Whether rules in STYLE tags should be inlined into style attributes.\\n   * @private {boolean}\\n   */\\n  this.inlineStyleRules_ = false;\\n\\n  /**\\n   * True iff policies have been installed for the instance.\\n   * @private {boolean}\\n   */\\n  this.policiesInstalled_ = false;\\n};\\n\\n\\n/**\\n * Extends the list of allowed data attributes.\\n * @param {!Array<string>} dataAttributeWhitelist\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowDataAttributes =\\n    function(dataAttributeWhitelist) {\\n  'use strict';\\n  goog.array.extend(this.dataAttributeWhitelist_, dataAttributeWhitelist);\\n  return this;\\n};\\n\\n/**\\n * Extends the list of allowed custom element tags.\\n * @param {!Array<string>} customElementTagWhitelist\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCustomElementTags =\\n    function(customElementTagWhitelist) {\\n  'use strict';\\n  customElementTagWhitelist.forEach(function(tag) {\\n    'use strict';\\n    this.allowCustomElementTag(tag);\\n  }, this);\\n  return this;\\n};\\n\\n/**\\n * Extends the list of allowed custom element tags.\\n * @param {string} customElementTagName\\n * @param {!Array<string>=} customElementAttributes\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCustomElementTag =\\n    function(customElementTagName, customElementAttributes) {\\n  'use strict';\\n  this.customElementTagWhitelist_.push(customElementTagName);\\n  if (customElementAttributes) {\\n    customElementAttributes.forEach(function(attr) {\\n      'use strict';\\n      var handlerName = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(\\n          customElementTagName, attr);\\n      this.attributeWhitelist_[handlerName] =\\n          /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (\\n              goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_);\\n      this.attributeOverrideList_[handlerName] = true;\\n    }, this);\\n  }\\n  return this;\\n};\\n\\n\\n/**\\n * Allows form tags in the HTML. Without this all form tags and content will be\\n * dropped.\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowFormTag = function() {\\n  'use strict';\\n  delete this.tagBlacklist_['FORM'];\\n  return this;\\n};\\n\\n\\n/**\\n * Allows STYLE tags. Note that the sanitizer wraps the output of each call to\\n * {@link sanitize} with a SPAN tag, give it a random ID unique across multiple\\n * calls, and then restrict all CSS rules found inside STYLE tags to only apply\\n * to children of the SPAN tag. This means that CSS rules in STYLE tags will\\n * only apply to content provided in the same call to {@link sanitize}. This\\n * feature is not compatible with {@link inlineStyleRules}.\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowStyleTag = function() {\\n  'use strict';\\n  if (this.inlineStyleRules_) {\\n    throw new Error('Rules from STYLE tags are already being inlined.');\\n  }\\n  delete this.tagBlacklist_['STYLE'];\\n  this.styleContainerId_ = goog.html.sanitizer.RANDOM_CONTAINER_;\\n  return this;\\n};\\n\\n\\n/**\\n * Fixes the ID of the style container used for CSS rules found in STYLE tags,\\n * and disables automatic wrapping with the container. This allows multiple\\n * calls to {@link sanitize} to share STYLE rules. If opt_styleContainer is\\n * missing, the sanitizer will stop restricting the scope of CSS rules\\n * altogether. Requires {@link allowStyleTag} to be called first.\\n * @param {string=} opt_styleContainer An optional container ID to restrict the\\n *     scope of any CSS rule found in STYLE tags.\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withStyleContainer =\\n    function(opt_styleContainer) {\\n  'use strict';\\n  if ('STYLE' in this.tagBlacklist_) {\\n    throw new Error('STYLE tags must first be allowed through allowStyleTag.');\\n  }\\n  if (opt_styleContainer != undefined) {\\n    if (!/^[a-zA-Z][\\\\w-:\\\\.]*$/.test(opt_styleContainer)) {\\n      throw new Error('Invalid ID.');\\n    }\\n    this.styleContainerId_ = opt_styleContainer;\\n  } else {\\n    this.styleContainerId_ = null;\\n  }\\n  return this;\\n};\\n\\n\\n/**\\n * Converts rules in STYLE tags into style attributes on the tags they apply to.\\n * This feature is not compatible with {@link withStyleContainer} and {@link\\n * allowStyleTag}. This method requires {@link allowCssStyles} (otherwise rules\\n * would be deleted after being inlined), and is not compatible with {@link\\n * allowStyleTag}.\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.inlineStyleRules =\\n    function() {\\n  'use strict';\\n  if (this.sanitizeInlineCssPolicy_ == goog.functions.NULL) {\\n    throw new Error(\\n        'Inlining style rules requires allowing STYLE attributes ' +\\n        'first.');\\n  }\\n  if (!('STYLE' in this.tagBlacklist_)) {\\n    throw new Error(\\n        'You have already configured the builder to allow STYLE tags in the ' +\\n        'output. Inlining style rules would prevent STYLE tags from ' +\\n        'appearing in the output and conflict with such directive.');\\n  }\\n  this.inlineStyleRules_ = true;\\n  return this;\\n};\\n\\n\\n/**\\n * Allows inline CSS styles.\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCssStyles =\\n    function() {\\n  'use strict';\\n  this.sanitizeInlineCssPolicy_ =\\n      goog.html.sanitizer.HtmlSanitizer.sanitizeCssDeclarationList_;\\n  return this;\\n};\\n\\n\\n/**\\n * Extends the tag whitelist (Package-internal utility method only).\\n * @param {!Array<string>} tags The list of tags to be added to the whitelist.\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n * @package\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype\\n    .alsoAllowTagsPrivateDoNotAccessOrElse = function(tags) {\\n  'use strict';\\n  tags.forEach(function(tag) {\\n    'use strict';\\n    this.tagWhitelist_[tag.toUpperCase()] = true;\\n    delete this.tagBlacklist_[tag.toUpperCase()];\\n  }, this);\\n  return this;\\n};\\n\\n\\n/**\\n * Extends the attribute whitelist (Package-internal utility method only).\\n * @param {!Array<(string|!goog.html.sanitizer.HtmlSanitizerAttributePolicy)>}\\n *     attrs The list of attributes to be added to the whitelist.\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n * @package\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype\\n    .alsoAllowAttributesPrivateDoNotAccessOrElse = function(attrs) {\\n  'use strict';\\n  attrs.forEach(function(attr) {\\n    'use strict';\\n    if (typeof attr === 'string') {\\n      attr = {tagName: '*', attributeName: attr, policy: null};\\n    }\\n    var handlerName = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(\\n        attr.tagName, attr.attributeName);\\n    this.attributeWhitelist_[handlerName] = attr.policy ?\\n        attr.policy :\\n        /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */\\n        (goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_);\\n    this.attributeOverrideList_[handlerName] = true;\\n  }, this);\\n  return this;\\n};\\n\\n\\n/**\\n * Allows only the provided whitelist of tags. Tags still need to be in the\\n * TagWhitelist to be allowed.\\n * <p>\\n * SPAN tags are ALWAYS ALLOWED as part of the mechanism required to preserve\\n * the HTML tree structure (when removing non-blacklisted tags and\\n * non-whitelisted tags).\\n * @param {!Array<string>} tagWhitelist\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n * @throws {Error} Thrown if an attempt is made to allow a non-whitelisted tag.\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.onlyAllowTags = function(\\n    tagWhitelist) {\\n  'use strict';\\n  this.tagWhitelist_ = {'SPAN': true};\\n  tagWhitelist.forEach(function(tag) {\\n    'use strict';\\n    tag = tag.toUpperCase();\\n    if (goog.html.sanitizer.TagWhitelist[tag]) {\\n      this.tagWhitelist_[tag] = true;\\n    } else {\\n      throw new Error(\\n          'Only whitelisted tags can be allowed. See ' +\\n          'goog.html.sanitizer.TagWhitelist.');\\n    }\\n  }, this);\\n  return this;\\n};\\n\\n\\n/**\\n * Allows only the provided whitelist of attributes, possibly setting a custom\\n * policy for them. The set of tag/attribute combinations need to be a subset of\\n * the currently allowed combinations.\\n * <p>\\n * Note that you cannot define a generic handler for an attribute if only a\\n * tag-specific one is present, and vice versa. To configure the sanitizer to\\n * accept an attribute only for a specific tag when only a generic handler is\\n * whitelisted, use the goog.html.sanitizer.HtmlSanitizerPolicyHints parameter\\n * and simply reject the attribute in unwanted tags.\\n * <p>\\n * Also note that the sanitizer's policy is still called after the provided one,\\n * to ensure that supplying misconfigured policy cannot introduce\\n * vulnerabilities. To completely override an existing attribute policy or to\\n * allow new attributes, see the goog.html.sanitizer.unsafe package.\\n * @param {!Array<(string|!goog.html.sanitizer.HtmlSanitizerAttributePolicy)>}\\n *     attrWhitelist The subset of attributes that the sanitizer will accept.\\n *     Attributes can come in of two forms:\\n *     - string: allow all values for this attribute on all tags.\\n *     - HtmlSanitizerAttributePolicy: allows specifying a policy for a\\n *         particular tag. The tagName can be \\\"*\\\", which means all tags. If no\\n *         policy is passed, the default is to allow all values.\\n *     The tag and attribute names are case-insensitive.\\n *     Note that the policy for id, URLs, names etc is controlled separately\\n *     (using withCustom* methods).\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n * @throws {Error} Thrown if an attempt is made to allow a non-whitelisted\\n *     attribute.\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.onlyAllowAttributes =\\n    function(attrWhitelist) {\\n  'use strict';\\n  var oldWhitelist = this.attributeWhitelist_;\\n  this.attributeWhitelist_ = {};\\n  attrWhitelist.forEach(function(attr) {\\n    'use strict';\\n    if (typeof attr === 'string') {\\n      attr = {tagName: '*', attributeName: attr.toUpperCase(), policy: null};\\n    }\\n    var handlerName = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(\\n        attr.tagName, attr.attributeName);\\n    if (!oldWhitelist[handlerName]) {\\n      throw new Error('Only whitelisted attributes can be allowed.');\\n    }\\n    this.attributeWhitelist_[handlerName] = attr.policy ?\\n        attr.policy :\\n        /** @type {goog.html.sanitizer.HtmlSanitizerPolicy} */\\n        (goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_);\\n  }, this);\\n  return this;\\n};\\n\\n\\n/**\\n * Adds the original tag name in the data attribute 'original-tag' when unknown\\n * tags are sanitized to &lt;span&rt;, so that caller can distinguish them from\\n * actual &lt;span&rt; tags.\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.addOriginalTagNames =\\n    function() {\\n  'use strict';\\n  this.shouldAddOriginalTagNames_ = true;\\n  return this;\\n};\\n\\n\\n/**\\n * Sets a custom network URL policy.\\n * @param {!goog.html.sanitizer.HtmlSanitizerUrlPolicy}\\n *     customNetworkReqUrlPolicy\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype\\n    .withCustomNetworkRequestUrlPolicy = function(customNetworkReqUrlPolicy) {\\n  'use strict';\\n  this.networkRequestUrlPolicy_ = customNetworkReqUrlPolicy;\\n  return this;\\n};\\n\\n\\n/**\\n * Sets a custom non-network URL policy.\\n * @param {!goog.html.sanitizer.HtmlSanitizerUrlPolicy} customUrlPolicy\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomUrlPolicy =\\n    function(customUrlPolicy) {\\n  'use strict';\\n  this.urlPolicy_ = customUrlPolicy;\\n  return this;\\n};\\n\\n\\n/**\\n * Sets a custom name policy.\\n * @param {!goog.html.sanitizer.HtmlSanitizerPolicy} customNamePolicy\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomNamePolicy =\\n    function(customNamePolicy) {\\n  'use strict';\\n  this.namePolicy_ = customNamePolicy;\\n  return this;\\n};\\n\\n\\n/**\\n * Sets a custom token policy.\\n * @param {!goog.html.sanitizer.HtmlSanitizerPolicy} customTokenPolicy\\n * @return {!goog.html.sanitizer.HtmlSanitizer.Builder}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomTokenPolicy =\\n    function(customTokenPolicy) {\\n  'use strict';\\n  this.tokenPolicy_ = customTokenPolicy;\\n  return this;\\n};\\n\\n\\n/**\\n * Wraps a custom policy function with the sanitizer's default policy.\\n * @param {?goog.html.sanitizer.HtmlSanitizerPolicy} customPolicy The custom\\n *     policy for the tag/attribute combination.\\n * @param {!goog.html.sanitizer.HtmlSanitizerPolicy} defaultPolicy The\\n *     sanitizer's policy that is always called after the custom policy.\\n * @return {!goog.html.sanitizer.HtmlSanitizerPolicy}\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.wrapPolicy_ = function(\\n    customPolicy, defaultPolicy) {\\n  'use strict';\\n  return /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (function(\\n      value, hints, ctx, policy) {\\n    'use strict';\\n    var result = customPolicy(value, hints, ctx, policy);\\n    return result == null ? null : defaultPolicy(result, hints, ctx, policy);\\n  });\\n};\\n\\n\\n/**\\n * Installs the sanitizer's default policy for a specific tag/attribute\\n * combination on the provided whitelist, but only if a policy already exists.\\n * @param {!Object<string, !goog.html.sanitizer.HtmlSanitizerPolicy>}\\n *     whitelist The whitelist to modify.\\n * @param {!Object<string, boolean>} overrideList The set of attributes handlers\\n *     that should not be wrapped with a default policy.\\n * @param {string} key The tag/attribute combination\\n * @param {!goog.html.sanitizer.HtmlSanitizerPolicy} defaultPolicy The\\n *     sanitizer's policy.\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.installDefaultPolicy_ = function(\\n    whitelist, overrideList, key, defaultPolicy) {\\n  'use strict';\\n  if (whitelist[key] && !overrideList[key]) {\\n    whitelist[key] = goog.html.sanitizer.HtmlSanitizer.wrapPolicy_(\\n        whitelist[key], defaultPolicy);\\n  }\\n};\\n\\n\\n/**\\n * Builds and returns a goog.html.sanitizer.HtmlSanitizer object.\\n * @return {!goog.html.sanitizer.HtmlSanitizer}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.build = function() {\\n  'use strict';\\n  return new goog.html.sanitizer.HtmlSanitizer(this);\\n};\\n\\n\\n/**\\n * Installs the sanitization policies for the attributes.\\n * May only be called once.\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.Builder.prototype.installPolicies_ =\\n    function() {\\n  'use strict';\\n  if (this.policiesInstalled_) {\\n    throw new Error('HtmlSanitizer.Builder.build() can only be used once.');\\n  }\\n\\n  var installPolicy = goog.html.sanitizer.HtmlSanitizer.installDefaultPolicy_;\\n\\n  // Binding all the non-trivial attribute sanitizers to the appropriate,\\n  // potentially customizable, handling functions at build().\\n  installPolicy(\\n      this.attributeWhitelist_, this.attributeOverrideList_, '* USEMAP',\\n      /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (\\n          goog.html.sanitizer.HtmlSanitizer.sanitizeUrlFragment_));\\n\\n  var urlAttributes = ['* ACTION', '* CITE', '* HREF'];\\n  var urlPolicy =\\n      goog.html.sanitizer.HtmlSanitizer.wrapUrlPolicy_(this.urlPolicy_);\\n  urlAttributes.forEach(function(attribute) {\\n    'use strict';\\n    installPolicy(\\n        this.attributeWhitelist_, this.attributeOverrideList_, attribute,\\n        urlPolicy);\\n  }, this);\\n\\n  var networkUrlAttributes = [\\n    // LONGDESC can result in a network request. See b/23381636.\\n    '* LONGDESC', '* SRC', 'LINK HREF'\\n  ];\\n  var networkRequestUrlPolicy =\\n      goog.html.sanitizer.HtmlSanitizer.wrapUrlPolicy_(\\n          this.networkRequestUrlPolicy_);\\n  networkUrlAttributes.forEach(function(attribute) {\\n    'use strict';\\n    installPolicy(\\n        this.attributeWhitelist_, this.attributeOverrideList_, attribute,\\n        networkRequestUrlPolicy);\\n  }, this);\\n\\n  var nameAttributes = ['* FOR', '* HEADERS', '* NAME'];\\n  nameAttributes.forEach(function(attribute) {\\n    'use strict';\\n    installPolicy(\\n        this.attributeWhitelist_, this.attributeOverrideList_, attribute,\\n        /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */\\n        (goog.partial(\\n            goog.html.sanitizer.HtmlSanitizer.sanitizeName_,\\n            this.namePolicy_)));\\n  }, this);\\n\\n  installPolicy(\\n      this.attributeWhitelist_, this.attributeOverrideList_, 'A TARGET',\\n      /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (goog.partial(\\n          goog.html.sanitizer.HtmlSanitizer.allowedAttributeValues_,\\n          ['_blank', '_self'])));\\n\\n  installPolicy(\\n      this.attributeWhitelist_, this.attributeOverrideList_, '* CLASS',\\n      /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (goog.partial(\\n          goog.html.sanitizer.HtmlSanitizer.sanitizeClasses_,\\n          this.tokenPolicy_)));\\n\\n  installPolicy(\\n      this.attributeWhitelist_, this.attributeOverrideList_, '* ID',\\n      /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */ (goog.partial(\\n          goog.html.sanitizer.HtmlSanitizer.sanitizeId_, this.tokenPolicy_)));\\n\\n  installPolicy(\\n      this.attributeWhitelist_, this.attributeOverrideList_, '* STYLE',\\n      /** @type {!goog.html.sanitizer.HtmlSanitizerPolicy} */\\n      (goog.partial(this.sanitizeInlineCssPolicy_, networkRequestUrlPolicy)));\\n\\n  this.policiesInstalled_ = true;\\n};\\n\\n\\n/**\\n * The default policy for URLs: allow any.\\n * @private @const {!goog.html.sanitizer.HtmlSanitizerUrlPolicy}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.defaultUrlPolicy_ =\\n    goog.html.SafeUrl.sanitize;\\n\\n\\n/**\\n * The default policy for URLs which cause network requests: drop all.\\n * @private @const {!goog.html.sanitizer.HtmlSanitizerUrlPolicy}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.defaultNetworkRequestUrlPolicy_ =\\n    goog.functions.NULL;\\n\\n\\n/**\\n * The default policy for attribute names: drop all.\\n * @private @const {!goog.html.sanitizer.HtmlSanitizerPolicy}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.defaultNamePolicy_ = goog.functions.NULL;\\n\\n\\n/**\\n * The default policy for other tokens (i.e. class names and IDs): drop all.\\n * @private @const {!goog.html.sanitizer.HtmlSanitizerPolicy}\\n */\\ngoog.html.sanitizer.HtmlSanitizer.defaultTokenPolicy_ = goog.functions.NULL;\\n\\n\\n\\n/**\\n * Returns a key into the attribute handlers dictionary given a node name and\\n * an attribute name. If no node name is given, returns a key applying to all\\n * nodes.\\n * @param {?string} nodeName\\n * @param {string} attributeName\\n * @return {string} key into attribute handlers dict\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.attrIdentifier_ = function(\\n    nodeName, attributeName) {\\n  'use strict';\\n  if (!nodeName) {\\n    nodeName = '*';\\n  }\\n  return (nodeName + ' ' + attributeName).toUpperCase();\\n};\\n\\n\\n/**\\n * Sanitizes a list of CSS declarations.\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicy} policySanitizeUrl\\n * @param {string} attrValue\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyContext} policyContext\\n * @return {?string} sanitizedCss from the policyContext\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.sanitizeCssDeclarationList_ = function(\\n    policySanitizeUrl, attrValue, policyHints, policyContext) {\\n  'use strict';\\n  if (!policyContext.cssStyle) {\\n    return null;\\n  }\\n  var naiveUriRewriter = function(uri, prop) {\\n    'use strict';\\n    policyHints.cssProperty = prop;\\n    var sanitizedUrl = policySanitizeUrl(uri, policyHints);\\n    if (sanitizedUrl == null) {\\n      return null;\\n    }\\n    return goog.html.uncheckedconversions\\n        .safeUrlFromStringKnownToSatisfyTypeContract(\\n            goog.string.Const.from(\\n                'HtmlSanitizerPolicy created with networkRequestUrlPolicy_ ' +\\n                'when installing \\\\'* STYLE\\\\' handler.'),\\n            sanitizedUrl);\\n  };\\n  var sanitizedStyle = goog.html.SafeStyle.unwrap(\\n      goog.html.sanitizer.CssSanitizer.sanitizeInlineStyle(\\n          policyContext.cssStyle, naiveUriRewriter));\\n  return sanitizedStyle == '' ? null : sanitizedStyle;\\n};\\n\\n\\n/**\\n * Cleans up an attribute value that we don't particularly want to do anything\\n * to. At the moment we just trim the whitespace.\\n * @param {string} attrValue\\n * @return {string} sanitizedAttrValue\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_ = function(attrValue) {\\n  'use strict';\\n  return goog.string.trim(attrValue);\\n};\\n\\n\\n/**\\n * Allows a set of attribute values.\\n * @param {!Array<string>} allowedValues Set of allowed values lowercased.\\n * @param {string} attrValue\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\\n * @return {?string} sanitizedAttrValue\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.allowedAttributeValues_ = function(\\n    allowedValues, attrValue, policyHints) {\\n  'use strict';\\n  var trimmed = goog.string.trim(attrValue);\\n  return goog.array.contains(allowedValues, trimmed.toLowerCase()) ? trimmed :\\n                                                                     null;\\n};\\n\\n\\n/**\\n * Sanitizes URL fragments.\\n * @param {string} urlFragment\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\\n * @return {?string} sanitizedAttrValue\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.sanitizeUrlFragment_ = function(\\n    urlFragment, policyHints) {\\n  'use strict';\\n  var trimmed = goog.string.trim(urlFragment);\\n  if (trimmed && trimmed.charAt(0) == '#') {\\n    // We do not apply the name or token policy to Url Fragments by design.\\n    return trimmed;\\n  }\\n  return null;\\n};\\n\\n\\n/**\\n * Runs an attribute name through a name policy.\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicy} namePolicy\\n * @param {string} attrName\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\\n * @return {?string} sanitizedAttrValue\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.sanitizeName_ = function(\\n    namePolicy, attrName, policyHints) {\\n  'use strict';\\n  var trimmed = goog.string.trim(attrName);\\n  /* NOTE(user):\\n   * There are two cases to be concerned about - escaped quotes in attribute\\n   * values which is the responsibility of the serializer and illegal\\n   * characters.  The latter does violate the spec but I do not believe it has\\n   * a security consequence.\\n   */\\n  return namePolicy(trimmed, policyHints);\\n};\\n\\n\\n/**\\n * Ensures that the class prefix is present on all space-separated tokens\\n * (i.e. all class names).\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicy} tokenPolicy\\n * @param {string} attrValue\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\\n * @return {?string} sanitizedAttrValue\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.sanitizeClasses_ = function(\\n    tokenPolicy, attrValue, policyHints) {\\n  'use strict';\\n  var classes = attrValue.split(/(?:\\\\s+)/);\\n  var sanitizedClasses = [];\\n  for (var i = 0; i < classes.length; i++) {\\n    var sanitizedClass = tokenPolicy(classes[i], policyHints);\\n    if (sanitizedClass) {\\n      sanitizedClasses.push(sanitizedClass);\\n    }\\n  }\\n  return sanitizedClasses.length == 0 ? null : sanitizedClasses.join(' ');\\n};\\n\\n\\n/**\\n * Ensures that the id prefix is present.\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicy} tokenPolicy\\n * @param {string} attrValue\\n * @param {goog.html.sanitizer.HtmlSanitizerPolicyHints} policyHints\\n * @return {?string} sanitizedAttrValue\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.sanitizeId_ = function(\\n    tokenPolicy, attrValue, policyHints) {\\n  'use strict';\\n  var trimmed = goog.string.trim(attrValue);\\n  return tokenPolicy(trimmed, policyHints);\\n};\\n\\n\\n/**\\n * Retrieves a HtmlSanitizerPolicyContext from a dirty node given an attribute\\n * name.\\n * @param {string} attributeName\\n * @param {!Element} dirtyElement\\n * @return {!goog.html.sanitizer.HtmlSanitizerPolicyContext}\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.getContext_ = function(\\n    attributeName, dirtyElement) {\\n  'use strict';\\n  var policyContext = {cssStyle: undefined};\\n  if (attributeName == 'style') {\\n    policyContext.cssStyle =\\n        goog.html.sanitizer.noclobber.getElementStyle(dirtyElement);\\n  }\\n  return policyContext;\\n};\\n\\n\\n/**\\n * Parses the DOM tree of a given HTML string, then walks the tree. For each\\n * element, it creates a new sanitized version, applies sanitized attributes,\\n * and returns a SafeHtml object representing the sanitized tree.\\n * @param {string} unsanitizedHtml\\n * @return {!goog.html.SafeHtml} Sanitized HTML\\n */\\ngoog.html.sanitizer.HtmlSanitizer.prototype.sanitize = function(\\n    unsanitizedHtml) {\\n  'use strict';\\n  this.currentStyleContainerId_ = this.getStyleContainerId_();\\n  var sanitizedString = this.processToString(unsanitizedHtml);\\n  return goog.html.uncheckedconversions\\n      .safeHtmlFromStringKnownToSatisfyTypeContract(\\n          goog.string.Const.from('Output of HTML sanitizer'), sanitizedString);\\n};\\n\\n\\n/**\\n * Parses the DOM tree of a given HTML string, then walks the tree. For each\\n * element, it creates a new sanitized version, applies sanitized attributes,\\n * and returns a span element containing the sanitized content. The root element\\n * might define a class name to restrict the visibility of CSS rules contained\\n * in tree.\\n * @param {string} unsanitizedHtml\\n * @return {!HTMLSpanElement} Sanitized HTML\\n */\\ngoog.html.sanitizer.HtmlSanitizer.prototype.sanitizeToDomNode = function(\\n    unsanitizedHtml) {\\n  'use strict';\\n  this.currentStyleContainerId_ = this.getStyleContainerId_();\\n  return goog.html.sanitizer.SafeDomTreeProcessor.prototype.processToTree.call(\\n      this, unsanitizedHtml);\\n};\\n\\n\\n/** @override */\\ngoog.html.sanitizer.HtmlSanitizer.prototype.processRoot = function(newRoot) {\\n  'use strict';\\n  // If the container ID was manually specified, we let the caller add the\\n  // ancestor to activate the rules.\\n  if (this.currentStyleContainerId_ &&\\n      this.styleContainerId_ == goog.html.sanitizer.RANDOM_CONTAINER_) {\\n    newRoot.id = this.currentStyleContainerId_;\\n  }\\n};\\n\\n\\n/** @override */\\ngoog.html.sanitizer.HtmlSanitizer.prototype.preProcessHtml = function(\\n    unsanitizedHtml) {\\n  'use strict';\\n  if (!this.inlineStyleRules_) {\\n    return unsanitizedHtml;\\n  }\\n  // Inline style rules on the unsanitized input, so that we don't have to\\n  // worry about customTokenPolicy and customNamePolicy interferring with\\n  // selectors.\\n  // TODO(pelizzi): To generate an inert document tree to walk on, we are going\\n  // to parse the document into a DOM tree twice --\\n  // first with DOMParser here, and then by setting innerHTML on a new TEMPLATE\\n  // element in the main sanitization loop (see getDomTreeWalker in\\n  // safedomtreeprocessor.js). It would be best if we used one technique\\n  // consistently, parsing the input string once and passing a single inert tree\\n  // from one phase to another, but the decision to use TEMPLATE rather than\\n  // DomParser or document.createHtmlImplementation as the inert HTML container\\n  // for the main sanitization logic predates the work on supporting STYLE tags,\\n  // and we later found on that TEMPLATE inert documents do not have computed\\n  // stylesheet information on STYLE tags.\\n  var inertUnsanitizedDom =\\n      goog.html.sanitizer.CssSanitizer.safeParseHtmlAndGetInertElement(\\n          '<div>' + unsanitizedHtml + '</div>');\\n  goog.asserts.assert(\\n      inertUnsanitizedDom,\\n      'Older browsers that don\\\\'t support inert ' +\\n          'parsing should not get to this branch');\\n  goog.html.sanitizer.CssSanitizer.inlineStyleRules(inertUnsanitizedDom);\\n  return inertUnsanitizedDom.innerHTML;\\n};\\n\\n\\n/**\\n * Gets the style container ID for the sanitized output, or creates a new random\\n * one. If no style container is necessary or style containment is disabled,\\n * returns null.\\n * @return {?string}\\n * @private\\n */\\ngoog.html.sanitizer.HtmlSanitizer.prototype.getStyleContainerId_ = function() {\\n  'use strict';\\n  var randomStyleContainmentEnabled =\\n      this.styleContainerId_ == goog.html.sanitizer.RANDOM_CONTAINER_;\\n  var randomStyleContainmentNecessary =\\n      !('STYLE' in this.tagBlacklist_) && 'STYLE' in this.tagWhitelist_;\\n  // If the builder was configured to create a random unique ID, create one, but\\n  // do so only if STYLE is allowed to begin with.\\n  return randomStyleContainmentEnabled && randomStyleContainmentNecessary ?\\n      'sanitizer-' + goog.string.getRandomString() :\\n      this.styleContainerId_;\\n};\\n\\n\\n/** @override */\\ngoog.html.sanitizer.HtmlSanitizer.prototype.createTextNode = function(\\n    dirtyNode) {\\n  'use strict';\\n  // Text nodes don't need to be sanitized, unless they are children of STYLE\\n  // and STYLE tags are allowed.\\n  var textContent = dirtyNode.data;\\n  // If STYLE is allowed, apply a policy to its text content. Ideally\\n  // sanitizing text content of tags shouldn't be hardcoded for STYLE, but we\\n  // have no plans to support sanitizing the text content of other nodes for\\n  // now.\\n  var dirtyParent = goog.html.sanitizer.noclobber.getParentNode(dirtyNode);\\n  if (dirtyParent &&\\n      goog.html.sanitizer.noclobber.getNodeName(dirtyParent).toLowerCase() ==\\n          'style' &&\\n      !('STYLE' in this.tagBlacklist_) && 'STYLE' in this.tagWhitelist_) {\\n    // Note that we don't have access to the parsed CSS declarations inside a\\n    // TEMPLATE tag, so the CSS sanitizer accepts a string and parses it\\n    // on its own using DOMParser.\\n    textContent = goog.html.SafeStyleSheet.unwrap(\\n        goog.html.sanitizer.CssSanitizer.sanitizeStyleSheetString(\\n            textContent, this.currentStyleContainerId_,\\n            goog.bind(function(uri, propName) {\\n              'use strict';\\n              return this.networkRequestUrlPolicy_(\\n                  uri, {cssProperty: propName});\\n            }, this)));\\n  }\\n  return document.createTextNode(textContent);\\n};\\n\\n\\n/** @override */\\ngoog.html.sanitizer.HtmlSanitizer.prototype.createElementWithoutAttributes =\\n    function(dirtyElement) {\\n  'use strict';\\n  const dirtyName =\\n      goog.html.sanitizer.noclobber.getNodeName(dirtyElement).toUpperCase();\\n  if (dirtyName in this.tagBlacklist_) {\\n    // If it's blacklisted, completely remove the tag and its descendants.\\n    return null;\\n  }\\n  const dirtyNamespaceURI =\\n      goog.html.sanitizer.noclobber.getElementNamespaceURI(dirtyElement);\\n  if (dirtyNamespaceURI != goog.html.sanitizer.XHTML_NAMESPACE_URI_) {\\n    // We explicitly drop tags (and their descendants) in non-html\\n    // namespaces because these can be exploited during their conversion to the\\n    // html namespace (e.g. <MATH><STYLE><A> -> <SPAN><STYLE><A>, where STYLE\\n    // and A were MathML tags before sanitization and HTML tags afterwards.\\n    return null;\\n  }\\n  if (this.tagWhitelist_[dirtyName]) {\\n    // If it's whitelisted, keep as is.\\n    return document.createElement(dirtyName);\\n  }\\n  // If it's neither blacklisted nor whitelisted, replace with span. If the\\n  // relevant builder option is enabled, the tag will bear the original tag\\n  // name in a data attribute.\\n  const spanElement = goog.dom.createElement(goog.dom.TagName.SPAN);\\n  if (this.shouldAddOriginalTagNames_) {\\n    goog.html.sanitizer.noclobber.setElementAttribute(\\n        spanElement, goog.html.sanitizer.HTML_SANITIZER_SANITIZED_ATTR_NAME_,\\n        dirtyName.toLowerCase());\\n  }\\n  return spanElement;\\n};\\n\\n\\n/** @override */\\ngoog.html.sanitizer.HtmlSanitizer.prototype.processElementAttribute = function(\\n    dirtyElement, attribute) {\\n  'use strict';\\n  var attributeName = attribute.name;\\n  if (goog.string.startsWith(\\n          attributeName,\\n          goog.html.sanitizer.HTML_SANITIZER_BOOKKEEPING_PREFIX_)) {\\n    // This is the namespace for the data attributes added by the sanitizer. We\\n    // prevent untrusted content from setting them in the output.\\n    return null;\\n  }\\n\\n  var elementName = goog.html.sanitizer.noclobber.getNodeName(dirtyElement);\\n  var unsanitizedAttrValue = attribute.value;\\n\\n  // Create policy hints object\\n  var policyHints = {\\n    tagName: goog.string.trim(elementName).toLowerCase(),\\n    attributeName: goog.string.trim(attributeName).toLowerCase()\\n  };\\n  var policyContext = goog.html.sanitizer.HtmlSanitizer.getContext_(\\n      policyHints.attributeName, dirtyElement);\\n\\n  // Prefer attribute handler for this specific tag.\\n  var tagHandlerIndex = goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(\\n      elementName, attributeName);\\n  if (tagHandlerIndex in this.attributeHandlers_) {\\n    var handler = this.attributeHandlers_[tagHandlerIndex];\\n    return handler(unsanitizedAttrValue, policyHints, policyContext);\\n  }\\n  // Fall back on attribute handler for wildcard tag.\\n  var genericHandlerIndex =\\n      goog.html.sanitizer.HtmlSanitizer.attrIdentifier_(null, attributeName);\\n  if (genericHandlerIndex in this.attributeHandlers_) {\\n    var handler = this.attributeHandlers_[genericHandlerIndex];\\n    return handler(unsanitizedAttrValue, policyHints, policyContext);\\n  }\\n  return null;\\n};\\n\\n\\n/**\\n * Sanitizes a HTML string using a sanitizer with default options.\\n * @param {string} unsanitizedHtml\\n * @return {!goog.html.SafeHtml} sanitizedHtml\\n */\\ngoog.html.sanitizer.HtmlSanitizer.sanitize = function(unsanitizedHtml) {\\n  'use strict';\\n  var sanitizer = new goog.html.sanitizer.HtmlSanitizer.Builder().build();\\n  return sanitizer.sanitize(unsanitizedHtml);\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"html\",\"sanitizer\",\"HtmlSanitizerPolicyHints\",\"HtmlSanitizerPolicyContext\",\"HtmlSanitizerPolicy\",\"HtmlSanitizerUrlPolicy\",\"HtmlSanitizerAttributePolicy\",\"HTML_SANITIZER_BOOKKEEPING_PREFIX_\",\"HTML_SANITIZER_SANITIZED_ATTR_NAME_\",\"HTML_SANITIZER_INVALID_CUSTOM_TAGS_\",\"RANDOM_CONTAINER_\",\"XHTML_NAMESPACE_URI_\",\"HtmlSanitizer\",\"goog.html.sanitizer.HtmlSanitizer\",\"opt_builder\",\"SafeDomTreeProcessor\",\"call\",\"builder\",\"Builder\",\"installPolicies_\",\"attributeHandlers_\",\"object\",\"clone\",\"attributeWhitelist_\",\"tagBlacklist_\",\"tagWhitelist_\",\"shouldAddOriginalTagNames_\",\"dataAttributeWhitelist_\",\"forEach\",\"dataAttr\",\"string\",\"startsWith\",\"asserts\",\"AssertionError\",\"toUpperCase\",\"cleanUpAttribute_\",\"customElementTagWhitelist_\",\"customTag\",\"contains\",\"networkRequestUrlPolicy_\",\"styleContainerId_\",\"currentStyleContainerId_\",\"inlineStyleRules_\",\"inherits\",\"wrapUrlPolicy_\",\"goog.html.sanitizer.HtmlSanitizer.wrapUrlPolicy_\",\"urlPolicy\",\"url\",\"policyHints\",\"trimmed\",\"safeUrl\",\"SafeUrl\",\"unwrap\",\"INNOCUOUS_STRING\",\"goog.html.sanitizer.HtmlSanitizer.Builder\",\"array\",\"attributeallowlists\",\"AllowedAttributes\",\"SanitizedAttributeAllowlist\",\"wl\",\"getKeys\",\"attr\",\"attributeOverrideList_\",\"TagBlacklist\",\"TagWhitelist\",\"urlPolicy_\",\"defaultUrlPolicy_\",\"defaultNetworkRequestUrlPolicy_\",\"namePolicy_\",\"defaultNamePolicy_\",\"tokenPolicy_\",\"defaultTokenPolicy_\",\"sanitizeInlineCssPolicy_\",\"functions\",\"NULL\",\"policiesInstalled_\",\"prototype\",\"allowDataAttributes\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowDataAttributes\",\"dataAttributeWhitelist\",\"extend\",\"allowCustomElementTags\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCustomElementTags\",\"customElementTagWhitelist\",\"tag\",\"allowCustomElementTag\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCustomElementTag\",\"customElementTagName\",\"customElementAttributes\",\"push\",\"handlerName\",\"attrIdentifier_\",\"allowFormTag\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowFormTag\",\"allowStyleTag\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowStyleTag\",\"Error\",\"withStyleContainer\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.withStyleContainer\",\"opt_styleContainer\",\"undefined\",\"test\",\"inlineStyleRules\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.inlineStyleRules\",\"allowCssStyles\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.allowCssStyles\",\"sanitizeCssDeclarationList_\",\"alsoAllowTagsPrivateDoNotAccessOrElse\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.alsoAllowTagsPrivateDoNotAccessOrElse\",\"tags\",\"alsoAllowAttributesPrivateDoNotAccessOrElse\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.alsoAllowAttributesPrivateDoNotAccessOrElse\",\"attrs\",\"tagName\",\"attributeName\",\"policy\",\"onlyAllowTags\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.onlyAllowTags\",\"tagWhitelist\",\"onlyAllowAttributes\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.onlyAllowAttributes\",\"attrWhitelist\",\"oldWhitelist\",\"addOriginalTagNames\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.addOriginalTagNames\",\"withCustomNetworkRequestUrlPolicy\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomNetworkRequestUrlPolicy\",\"customNetworkReqUrlPolicy\",\"withCustomUrlPolicy\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomUrlPolicy\",\"customUrlPolicy\",\"withCustomNamePolicy\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomNamePolicy\",\"customNamePolicy\",\"withCustomTokenPolicy\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.withCustomTokenPolicy\",\"customTokenPolicy\",\"wrapPolicy_\",\"goog.html.sanitizer.HtmlSanitizer.wrapPolicy_\",\"customPolicy\",\"defaultPolicy\",\"value\",\"hints\",\"ctx\",\"result\",\"installDefaultPolicy_\",\"goog.html.sanitizer.HtmlSanitizer.installDefaultPolicy_\",\"whitelist\",\"overrideList\",\"key\",\"build\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.build\",\"goog.html.sanitizer.HtmlSanitizer.Builder.prototype.installPolicies_\",\"installPolicy\",\"sanitizeUrlFragment_\",\"urlAttributes\",\"attribute\",\"networkUrlAttributes\",\"networkRequestUrlPolicy\",\"nameAttributes\",\"partial\",\"sanitizeName_\",\"allowedAttributeValues_\",\"sanitizeClasses_\",\"sanitizeId_\",\"sanitize\",\"goog.html.sanitizer.HtmlSanitizer.attrIdentifier_\",\"nodeName\",\"goog.html.sanitizer.HtmlSanitizer.sanitizeCssDeclarationList_\",\"policySanitizeUrl\",\"attrValue\",\"policyContext\",\"cssStyle\",\"naiveUriRewriter\",\"uri\",\"prop\",\"cssProperty\",\"sanitizedUrl\",\"uncheckedconversions\",\"safeUrlFromStringKnownToSatisfyTypeContract\",\"Const\",\"from\",\"sanitizedStyle\",\"SafeStyle\",\"CssSanitizer\",\"sanitizeInlineStyle\",\"goog.html.sanitizer.HtmlSanitizer.cleanUpAttribute_\",\"trim\",\"goog.html.sanitizer.HtmlSanitizer.allowedAttributeValues_\",\"allowedValues\",\"toLowerCase\",\"goog.html.sanitizer.HtmlSanitizer.sanitizeUrlFragment_\",\"urlFragment\",\"charAt\",\"goog.html.sanitizer.HtmlSanitizer.sanitizeName_\",\"namePolicy\",\"attrName\",\"goog.html.sanitizer.HtmlSanitizer.sanitizeClasses_\",\"tokenPolicy\",\"classes\",\"split\",\"sanitizedClasses\",\"i\",\"length\",\"sanitizedClass\",\"join\",\"goog.html.sanitizer.HtmlSanitizer.sanitizeId_\",\"getContext_\",\"goog.html.sanitizer.HtmlSanitizer.getContext_\",\"dirtyElement\",\"noclobber\",\"getElementStyle\",\"goog.html.sanitizer.HtmlSanitizer.prototype.sanitize\",\"unsanitizedHtml\",\"getStyleContainerId_\",\"sanitizedString\",\"processToString\",\"safeHtmlFromStringKnownToSatisfyTypeContract\",\"sanitizeToDomNode\",\"goog.html.sanitizer.HtmlSanitizer.prototype.sanitizeToDomNode\",\"processToTree\",\"processRoot\",\"goog.html.sanitizer.HtmlSanitizer.prototype.processRoot\",\"newRoot\",\"id\",\"preProcessHtml\",\"goog.html.sanitizer.HtmlSanitizer.prototype.preProcessHtml\",\"inertUnsanitizedDom\",\"safeParseHtmlAndGetInertElement\",\"assert\",\"innerHTML\",\"goog.html.sanitizer.HtmlSanitizer.prototype.getStyleContainerId_\",\"randomStyleContainmentEnabled\",\"randomStyleContainmentNecessary\",\"getRandomString\",\"createTextNode\",\"goog.html.sanitizer.HtmlSanitizer.prototype.createTextNode\",\"dirtyNode\",\"textContent\",\"data\",\"dirtyParent\",\"getParentNode\",\"getNodeName\",\"SafeStyleSheet\",\"sanitizeStyleSheetString\",\"bind\",\"propName\",\"document\",\"createElementWithoutAttributes\",\"goog.html.sanitizer.HtmlSanitizer.prototype.createElementWithoutAttributes\",\"dirtyName\",\"dirtyNamespaceURI\",\"getElementNamespaceURI\",\"createElement\",\"spanElement\",\"dom\",\"TagName\",\"SPAN\",\"setElementAttribute\",\"processElementAttribute\",\"goog.html.sanitizer.HtmlSanitizer.prototype.processElementAttribute\",\"name\",\"elementName\",\"unsanitizedAttrValue\",\"tagHandlerIndex\",\"handler\",\"genericHandlerIndex\",\"goog.html.sanitizer.HtmlSanitizer.sanitize\"]\n}\n"]