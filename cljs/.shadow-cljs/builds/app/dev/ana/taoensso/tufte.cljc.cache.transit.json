["^ ","~:output",["^ ","~:js","goog.provide('taoensso.tufte');\ntaoensso.encore.assert_min_encore_version(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(126),(2)], null));\ntaoensso.tufte.valid_call_level_QMARK_ = (function taoensso$tufte$valid_call_level_QMARK_(x){\nif(cljs.core.truth_((function (){var fexpr__34878 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [(0),null,(1),null,(4),null,(3),null,(2),null,(5),null], null), null);\nreturn (fexpr__34878.cljs$core$IFn$_invoke$arity$1 ? fexpr__34878.cljs$core$IFn$_invoke$arity$1(x) : fexpr__34878.call(null,x));\n})())){\nreturn true;\n} else {\nreturn false;\n}\n});\ntaoensso.tufte.valid_min_level_QMARK_ = (function taoensso$tufte$valid_min_level_QMARK_(x){\nif(cljs.core.truth_((function (){var fexpr__34879 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [(0),null,(1),null,(4),null,(6),null,(3),null,(2),null,(5),null], null), null);\nreturn (fexpr__34879.cljs$core$IFn$_invoke$arity$1 ? fexpr__34879.cljs$core$IFn$_invoke$arity$1(x) : fexpr__34879.call(null,x));\n})())){\nreturn true;\n} else {\nreturn false;\n}\n});\ntaoensso.tufte.invalid_call_level_msg = \"Invalid Tufte profiling level: should be int e/o #{0 1 2 3 4 5}\";\ntaoensso.tufte.invalid_min_level_msg = \"Invalid minimum Tufte profiling level: should be int e/o #{0 1 2 3 4 5 6}\";\ntaoensso.tufte.valid_call_level = (function taoensso$tufte$valid_call_level(x){\nvar or__4253__auto__ = (function (){var fexpr__34882 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [(0),null,(1),null,(4),null,(3),null,(2),null,(5),null], null), null);\nreturn (fexpr__34882.cljs$core$IFn$_invoke$arity$1 ? fexpr__34882.cljs$core$IFn$_invoke$arity$1(x) : fexpr__34882.call(null,x));\n})();\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Invalid Tufte profiling level: should be int e/o #{0 1 2 3 4 5}\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"given\",\"given\",716253602),x,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),cljs.core.type(x)], null));\n}\n});\ntaoensso.tufte.valid_min_level = (function taoensso$tufte$valid_min_level(x){\nvar or__4253__auto__ = (function (){var fexpr__34883 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [(0),null,(1),null,(4),null,(6),null,(3),null,(2),null,(5),null], null), null);\nreturn (fexpr__34883.cljs$core$IFn$_invoke$arity$1 ? fexpr__34883.cljs$core$IFn$_invoke$arity$1(x) : fexpr__34883.call(null,x));\n})();\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Invalid minimum Tufte profiling level: should be int e/o #{0 1 2 3 4 5 6}\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"given\",\"given\",716253602),x,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),cljs.core.type(x)], null));\n}\n});\n/**\n * Integer e/o #{0 1 2 3 4 5 6}, or vector mapping ns-patterns to min-levels:\n *  [[<ns-pattern> <min-level>] ... [\"*\" <default-min-level>]]\n * \n *   See `*ns-filter*` for example patterns.\n */\ntaoensso.tufte._STAR_min_level_STAR_ = (2);\n/**\n * (fn may-profile-ns? [ns]) predicate, or ns-pattern.\n *   Example ns-patterns:\n *  #{}, \"*\", \"foo.bar\", \"foo.bar.*\", #{\"foo\" \"bar.*\"},\n *  {:allow #{\"foo\" \"bar.*\"} :deny #{\"foo.*.bar.*\"}}\n */\ntaoensso.tufte._STAR_ns_filter_STAR_ = \"*\";\nvar fn_QMARK__35069 = cljs.core.fn_QMARK_;\nvar compile_35070 = taoensso.encore.fmemoize((function (x){\nreturn taoensso.encore.compile_str_filter(x);\n}));\nvar conform_QMARK__STAR__35071 = taoensso.encore.fmemoize((function (x,ns){\nvar fexpr__34885 = compile_35070(x);\nreturn (fexpr__34885.cljs$core$IFn$_invoke$arity$1 ? fexpr__34885.cljs$core$IFn$_invoke$arity$1(ns) : fexpr__34885.call(null,ns));\n}));\nvar conform_QMARK__35072 = (function (ns_filter,ns){\nif(cljs.core.truth_((fn_QMARK__35069.cljs$core$IFn$_invoke$arity$1 ? fn_QMARK__35069.cljs$core$IFn$_invoke$arity$1(ns_filter) : fn_QMARK__35069.call(null,ns_filter)))){\nreturn (ns_filter.cljs$core$IFn$_invoke$arity$1 ? ns_filter.cljs$core$IFn$_invoke$arity$1(ns) : ns_filter.call(null,ns));\n} else {\nreturn conform_QMARK__STAR__35071(ns_filter,ns);\n}\n});\n/**\n * Implementation detail.\n */\ntaoensso.tufte.may_profile_ns_QMARK_ = (function taoensso$tufte$may_profile_ns_QMARK_(var_args){\nvar G__34888 = arguments.length;\nswitch (G__34888) {\ncase 1:\nreturn taoensso.tufte.may_profile_ns_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.tufte.may_profile_ns_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.tufte.may_profile_ns_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nif(cljs.core.truth_(conform_QMARK__35072(taoensso.tufte._STAR_ns_filter_STAR_,ns))){\nreturn true;\n} else {\nreturn false;\n}\n}));\n\n(taoensso.tufte.may_profile_ns_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (ns_filter,ns){\nif(cljs.core.truth_(conform_QMARK__35072(ns_filter,ns))){\nreturn true;\n} else {\nreturn false;\n}\n}));\n\n(taoensso.tufte.may_profile_ns_QMARK_.cljs$lang$maxFixedArity = 2);\n\n\n/**\n * [[<ns-pattern> <min-level>] ... [\"*\" <default-min-level>]], ns -> ?min-level\n */\ntaoensso.tufte.ns__GT__QMARK_min_level = taoensso.encore.fmemoize((function (specs,ns){\nreturn taoensso.encore.rsome((function (p__34892){\nvar vec__34893 = p__34892;\nvar ns_pattern = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34893,(0),null);\nvar min_level = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34893,(1),null);\nif(cljs.core.truth_(conform_QMARK__STAR__35071(ns_pattern,ns))){\nreturn taoensso.tufte.valid_min_level(min_level);\n} else {\nreturn null;\n}\n}),specs);\n}));\nvar valid_min_level_35087 = taoensso.tufte.valid_min_level;\nvar ns__GT__QMARK_min_level_35088 = taoensso.tufte.ns__GT__QMARK_min_level;\ntaoensso.tufte.get_min_level = (function taoensso$tufte$get_min_level(default$,x,ns){\nvar G__34900 = (function (){var or__4253__auto__ = ((cljs.core.vector_QMARK_(x))?ns__GT__QMARK_min_level_35088(x,ns):x);\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn default$;\n}\n})();\nreturn (valid_min_level_35087.cljs$core$IFn$_invoke$arity$1 ? valid_min_level_35087.cljs$core$IFn$_invoke$arity$1(G__34900) : valid_min_level_35087.call(null,G__34900));\n});\nvar valid_call_level_35099 = taoensso.tufte.valid_call_level;\nvar may_profile_ns_QMARK__35100 = taoensso.tufte.may_profile_ns_QMARK_;\nvar get_min_level_35101 = taoensso.tufte.get_min_level;\n/**\n * Implementation detail.\n *  Returns true iff level and ns are runtime unfiltered.\n */\ntaoensso.tufte.may_profile_QMARK_ = (function taoensso$tufte$may_profile_QMARK_(var_args){\nvar G__34904 = arguments.length;\nswitch (G__34904) {\ncase 1:\nreturn taoensso.tufte.may_profile_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.tufte.may_profile_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.tufte.may_profile_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (level){\nreturn taoensso.tufte.may_profile_QMARK_.cljs$core$IFn$_invoke$arity$2(level,cljs.core._STAR_ns_STAR_);\n}));\n\n(taoensso.tufte.may_profile_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (level,ns){\nif(((valid_call_level_35099.cljs$core$IFn$_invoke$arity$1 ? valid_call_level_35099.cljs$core$IFn$_invoke$arity$1(level) : valid_call_level_35099.call(null,level)) >= cljs.core.long$((get_min_level_35101.cljs$core$IFn$_invoke$arity$3 ? get_min_level_35101.cljs$core$IFn$_invoke$arity$3((6),taoensso.tufte._STAR_min_level_STAR_,ns) : get_min_level_35101.call(null,(6),taoensso.tufte._STAR_min_level_STAR_,ns))))){\nif(cljs.core.truth_((may_profile_ns_QMARK__35100.cljs$core$IFn$_invoke$arity$2 ? may_profile_ns_QMARK__35100.cljs$core$IFn$_invoke$arity$2(taoensso.tufte._STAR_ns_filter_STAR_,ns) : may_profile_ns_QMARK__35100.call(null,taoensso.tufte._STAR_ns_filter_STAR_,ns)))){\nreturn true;\n} else {\nreturn false;\n}\n} else {\nreturn false;\n}\n}));\n\n(taoensso.tufte.may_profile_QMARK_.cljs$lang$maxFixedArity = 2);\n\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\ntaoensso.tufte.HandlerVal = (function (ns_str,level,_QMARK_id,_QMARK_data,pstats,pstats_str_,_QMARK_file,_QMARK_line,__meta,__extmap,__hash){\nthis.ns_str = ns_str;\nthis.level = level;\nthis._QMARK_id = _QMARK_id;\nthis._QMARK_data = _QMARK_data;\nthis.pstats = pstats;\nthis.pstats_str_ = pstats_str_;\nthis._QMARK_file = _QMARK_file;\nthis._QMARK_line = _QMARK_line;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(taoensso.tufte.HandlerVal.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4502__auto__,k__4503__auto__){\nvar self__ = this;\nvar this__4502__auto____$1 = this;\nreturn this__4502__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4503__auto__,null);\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4504__auto__,k34908,else__4505__auto__){\nvar self__ = this;\nvar this__4504__auto____$1 = this;\nvar G__34916 = k34908;\nvar G__34916__$1 = (((G__34916 instanceof cljs.core.Keyword))?G__34916.fqn:null);\nswitch (G__34916__$1) {\ncase \"ns-str\":\nreturn self__.ns_str;\n\nbreak;\ncase \"level\":\nreturn self__.level;\n\nbreak;\ncase \"?id\":\nreturn self__._QMARK_id;\n\nbreak;\ncase \"?data\":\nreturn self__._QMARK_data;\n\nbreak;\ncase \"pstats\":\nreturn self__.pstats;\n\nbreak;\ncase \"pstats-str_\":\nreturn self__.pstats_str_;\n\nbreak;\ncase \"?file\":\nreturn self__._QMARK_file;\n\nbreak;\ncase \"?line\":\nreturn self__._QMARK_line;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k34908,else__4505__auto__);\n\n}\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4522__auto__,f__4523__auto__,init__4524__auto__){\nvar self__ = this;\nvar this__4522__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4525__auto__,p__34921){\nvar vec__34922 = p__34921;\nvar k__4526__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34922,(0),null);\nvar v__4527__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34922,(1),null);\nreturn (f__4523__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4523__auto__.cljs$core$IFn$_invoke$arity$3(ret__4525__auto__,k__4526__auto__,v__4527__auto__) : f__4523__auto__.call(null,ret__4525__auto__,k__4526__auto__,v__4527__auto__));\n}),init__4524__auto__,this__4522__auto____$1);\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4517__auto__,writer__4518__auto__,opts__4519__auto__){\nvar self__ = this;\nvar this__4517__auto____$1 = this;\nvar pr_pair__4520__auto__ = (function (keyval__4521__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4518__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4519__auto__,keyval__4521__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__4518__auto__,pr_pair__4520__auto__,\"#taoensso.tufte.HandlerVal{\",\", \",\"}\",opts__4519__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"ns-str\",\"ns-str\",-2062616499),self__.ns_str],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"level\",\"level\",1290497552),self__.level],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"?id\",\"?id\",-712098248),self__._QMARK_id],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"?data\",\"?data\",-9471433),self__._QMARK_data],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"pstats\",\"pstats\",276614232),self__.pstats],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"pstats-str_\",\"pstats-str_\",1919230421),self__.pstats_str_],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675),self__._QMARK_file],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385),self__._QMARK_line],null))], null),self__.__extmap));\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__34907){\nvar self__ = this;\nvar G__34907__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__34907__$1,8,new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ns-str\",\"ns-str\",-2062616499),new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"?id\",\"?id\",-712098248),new cljs.core.Keyword(null,\"?data\",\"?data\",-9471433),new cljs.core.Keyword(null,\"pstats\",\"pstats\",276614232),new cljs.core.Keyword(null,\"pstats-str_\",\"pstats-str_\",1919230421),new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675),new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4500__auto__){\nvar self__ = this;\nvar this__4500__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4497__auto__){\nvar self__ = this;\nvar this__4497__auto____$1 = this;\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,self__.level,self__._QMARK_id,self__._QMARK_data,self__.pstats,self__.pstats_str_,self__._QMARK_file,self__._QMARK_line,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4506__auto__){\nvar self__ = this;\nvar this__4506__auto____$1 = this;\nreturn (8 + cljs.core.count(self__.__extmap));\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4498__auto__){\nvar self__ = this;\nvar this__4498__auto____$1 = this;\nvar h__4360__auto__ = self__.__hash;\nif((!((h__4360__auto__ == null)))){\nreturn h__4360__auto__;\n} else {\nvar h__4360__auto____$1 = (function (coll__4499__auto__){\nreturn (-274730077 ^ cljs.core.hash_unordered_coll(coll__4499__auto__));\n})(this__4498__auto____$1);\n(self__.__hash = h__4360__auto____$1);\n\nreturn h__4360__auto____$1;\n}\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this34909,other34910){\nvar self__ = this;\nvar this34909__$1 = this;\nreturn (((!((other34910 == null)))) && ((((this34909__$1.constructor === other34910.constructor)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this34909__$1.ns_str,other34910.ns_str)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this34909__$1.level,other34910.level)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this34909__$1._QMARK_id,other34910._QMARK_id)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this34909__$1._QMARK_data,other34910._QMARK_data)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this34909__$1.pstats,other34910.pstats)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this34909__$1.pstats_str_,other34910.pstats_str_)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this34909__$1._QMARK_file,other34910._QMARK_file)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this34909__$1._QMARK_line,other34910._QMARK_line)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this34909__$1.__extmap,other34910.__extmap)))))))))))))))))))));\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4512__auto__,k__4513__auto__){\nvar self__ = this;\nvar this__4512__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675),null,new cljs.core.Keyword(null,\"ns-str\",\"ns-str\",-2062616499),null,new cljs.core.Keyword(null,\"level\",\"level\",1290497552),null,new cljs.core.Keyword(null,\"pstats-str_\",\"pstats-str_\",1919230421),null,new cljs.core.Keyword(null,\"?data\",\"?data\",-9471433),null,new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385),null,new cljs.core.Keyword(null,\"pstats\",\"pstats\",276614232),null,new cljs.core.Keyword(null,\"?id\",\"?id\",-712098248),null], null), null),k__4513__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4512__auto____$1),self__.__meta),k__4513__auto__);\n} else {\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,self__.level,self__._QMARK_id,self__._QMARK_data,self__.pstats,self__.pstats_str_,self__._QMARK_file,self__._QMARK_line,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4513__auto__)),null));\n}\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (this__4509__auto__,k34908){\nvar self__ = this;\nvar this__4509__auto____$1 = this;\nvar G__34925 = k34908;\nvar G__34925__$1 = (((G__34925 instanceof cljs.core.Keyword))?G__34925.fqn:null);\nswitch (G__34925__$1) {\ncase \"ns-str\":\ncase \"level\":\ncase \"?id\":\ncase \"?data\":\ncase \"pstats\":\ncase \"pstats-str_\":\ncase \"?file\":\ncase \"?line\":\nreturn true;\n\nbreak;\ndefault:\nreturn cljs.core.contains_QMARK_(self__.__extmap,k34908);\n\n}\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4510__auto__,k__4511__auto__,G__34907){\nvar self__ = this;\nvar this__4510__auto____$1 = this;\nvar pred__34929 = cljs.core.keyword_identical_QMARK_;\nvar expr__34930 = k__4511__auto__;\nif(cljs.core.truth_((pred__34929.cljs$core$IFn$_invoke$arity$2 ? pred__34929.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"ns-str\",\"ns-str\",-2062616499),expr__34930) : pred__34929.call(null,new cljs.core.Keyword(null,\"ns-str\",\"ns-str\",-2062616499),expr__34930)))){\nreturn (new taoensso.tufte.HandlerVal(G__34907,self__.level,self__._QMARK_id,self__._QMARK_data,self__.pstats,self__.pstats_str_,self__._QMARK_file,self__._QMARK_line,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__34929.cljs$core$IFn$_invoke$arity$2 ? pred__34929.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"level\",\"level\",1290497552),expr__34930) : pred__34929.call(null,new cljs.core.Keyword(null,\"level\",\"level\",1290497552),expr__34930)))){\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,G__34907,self__._QMARK_id,self__._QMARK_data,self__.pstats,self__.pstats_str_,self__._QMARK_file,self__._QMARK_line,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__34929.cljs$core$IFn$_invoke$arity$2 ? pred__34929.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"?id\",\"?id\",-712098248),expr__34930) : pred__34929.call(null,new cljs.core.Keyword(null,\"?id\",\"?id\",-712098248),expr__34930)))){\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,self__.level,G__34907,self__._QMARK_data,self__.pstats,self__.pstats_str_,self__._QMARK_file,self__._QMARK_line,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__34929.cljs$core$IFn$_invoke$arity$2 ? pred__34929.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"?data\",\"?data\",-9471433),expr__34930) : pred__34929.call(null,new cljs.core.Keyword(null,\"?data\",\"?data\",-9471433),expr__34930)))){\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,self__.level,self__._QMARK_id,G__34907,self__.pstats,self__.pstats_str_,self__._QMARK_file,self__._QMARK_line,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__34929.cljs$core$IFn$_invoke$arity$2 ? pred__34929.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"pstats\",\"pstats\",276614232),expr__34930) : pred__34929.call(null,new cljs.core.Keyword(null,\"pstats\",\"pstats\",276614232),expr__34930)))){\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,self__.level,self__._QMARK_id,self__._QMARK_data,G__34907,self__.pstats_str_,self__._QMARK_file,self__._QMARK_line,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__34929.cljs$core$IFn$_invoke$arity$2 ? pred__34929.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"pstats-str_\",\"pstats-str_\",1919230421),expr__34930) : pred__34929.call(null,new cljs.core.Keyword(null,\"pstats-str_\",\"pstats-str_\",1919230421),expr__34930)))){\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,self__.level,self__._QMARK_id,self__._QMARK_data,self__.pstats,G__34907,self__._QMARK_file,self__._QMARK_line,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__34929.cljs$core$IFn$_invoke$arity$2 ? pred__34929.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675),expr__34930) : pred__34929.call(null,new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675),expr__34930)))){\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,self__.level,self__._QMARK_id,self__._QMARK_data,self__.pstats,self__.pstats_str_,G__34907,self__._QMARK_line,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__34929.cljs$core$IFn$_invoke$arity$2 ? pred__34929.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385),expr__34930) : pred__34929.call(null,new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385),expr__34930)))){\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,self__.level,self__._QMARK_id,self__._QMARK_data,self__.pstats,self__.pstats_str_,self__._QMARK_file,G__34907,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,self__.level,self__._QMARK_id,self__._QMARK_data,self__.pstats,self__.pstats_str_,self__._QMARK_file,self__._QMARK_line,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4511__auto__,G__34907),null));\n}\n}\n}\n}\n}\n}\n}\n}\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4515__auto__){\nvar self__ = this;\nvar this__4515__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"ns-str\",\"ns-str\",-2062616499),self__.ns_str,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"level\",\"level\",1290497552),self__.level,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"?id\",\"?id\",-712098248),self__._QMARK_id,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"?data\",\"?data\",-9471433),self__._QMARK_data,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"pstats\",\"pstats\",276614232),self__.pstats,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"pstats-str_\",\"pstats-str_\",1919230421),self__.pstats_str_,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675),self__._QMARK_file,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385),self__._QMARK_line,null))], null),self__.__extmap));\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4501__auto__,G__34907){\nvar self__ = this;\nvar this__4501__auto____$1 = this;\nreturn (new taoensso.tufte.HandlerVal(self__.ns_str,self__.level,self__._QMARK_id,self__._QMARK_data,self__.pstats,self__.pstats_str_,self__._QMARK_file,self__._QMARK_line,G__34907,self__.__extmap,self__.__hash));\n}));\n\n(taoensso.tufte.HandlerVal.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4507__auto__,entry__4508__auto__){\nvar self__ = this;\nvar this__4507__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4508__auto__)){\nreturn this__4507__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__4508__auto__,(0)),cljs.core._nth(entry__4508__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4507__auto____$1,entry__4508__auto__);\n}\n}));\n\n(taoensso.tufte.HandlerVal.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"ns-str\",\"ns-str\",-422084972,null),new cljs.core.Symbol(null,\"level\",\"level\",-1363938217,null),new cljs.core.Symbol(null,\"?id\",\"?id\",928433279,null),new cljs.core.Symbol(null,\"?data\",\"?data\",1631060094,null),new cljs.core.Symbol(null,\"pstats\",\"pstats\",1917145759,null),new cljs.core.Symbol(null,\"pstats-str_\",\"pstats-str_\",-735205348,null),new cljs.core.Symbol(null,\"?file\",\"?file\",-1121006094,null),new cljs.core.Symbol(null,\"?line\",\"?line\",1008678142,null)], null);\n}));\n\n(taoensso.tufte.HandlerVal.cljs$lang$type = true);\n\n(taoensso.tufte.HandlerVal.cljs$lang$ctorPrSeq = (function (this__4546__auto__){\nreturn (new cljs.core.List(null,\"taoensso.tufte/HandlerVal\",null,(1),null));\n}));\n\n(taoensso.tufte.HandlerVal.cljs$lang$ctorPrWriter = (function (this__4546__auto__,writer__4547__auto__){\nreturn cljs.core._write(writer__4547__auto__,\"taoensso.tufte/HandlerVal\");\n}));\n\n/**\n * Positional factory function for taoensso.tufte/HandlerVal.\n */\ntaoensso.tufte.__GT_HandlerVal = (function taoensso$tufte$__GT_HandlerVal(ns_str,level,_QMARK_id,_QMARK_data,pstats,pstats_str_,_QMARK_file,_QMARK_line){\nreturn (new taoensso.tufte.HandlerVal(ns_str,level,_QMARK_id,_QMARK_data,pstats,pstats_str_,_QMARK_file,_QMARK_line,null,null,null));\n});\n\n/**\n * Factory function for taoensso.tufte/HandlerVal, taking a map of keywords to field values.\n */\ntaoensso.tufte.map__GT_HandlerVal = (function taoensso$tufte$map__GT_HandlerVal(G__34914){\nvar extmap__4542__auto__ = (function (){var G__34934 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__34914,new cljs.core.Keyword(null,\"ns-str\",\"ns-str\",-2062616499),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"?id\",\"?id\",-712098248),new cljs.core.Keyword(null,\"?data\",\"?data\",-9471433),new cljs.core.Keyword(null,\"pstats\",\"pstats\",276614232),new cljs.core.Keyword(null,\"pstats-str_\",\"pstats-str_\",1919230421),new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675),new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385)], 0));\nif(cljs.core.record_QMARK_(G__34914)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__34934);\n} else {\nreturn G__34934;\n}\n})();\nreturn (new taoensso.tufte.HandlerVal(new cljs.core.Keyword(null,\"ns-str\",\"ns-str\",-2062616499).cljs$core$IFn$_invoke$arity$1(G__34914),new cljs.core.Keyword(null,\"level\",\"level\",1290497552).cljs$core$IFn$_invoke$arity$1(G__34914),new cljs.core.Keyword(null,\"?id\",\"?id\",-712098248).cljs$core$IFn$_invoke$arity$1(G__34914),new cljs.core.Keyword(null,\"?data\",\"?data\",-9471433).cljs$core$IFn$_invoke$arity$1(G__34914),new cljs.core.Keyword(null,\"pstats\",\"pstats\",276614232).cljs$core$IFn$_invoke$arity$1(G__34914),new cljs.core.Keyword(null,\"pstats-str_\",\"pstats-str_\",1919230421).cljs$core$IFn$_invoke$arity$1(G__34914),new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675).cljs$core$IFn$_invoke$arity$1(G__34914),new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385).cljs$core$IFn$_invoke$arity$1(G__34914),null,cljs.core.not_empty(extmap__4542__auto__),null));\n});\n\n/**\n * {<handler-id> <handler-fn>}\n */\ntaoensso.tufte.handlers_ = taoensso.tufte.impl.handlers_;\ntaoensso.tufte.remove_handler_BANG_ = (function taoensso$tufte$remove_handler_BANG_(handler_id){\nreturn cljs.core.set(cljs.core.keys(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(taoensso.tufte.handlers_,cljs.core.dissoc,handler_id)));\n});\n/**\n * Use this to register interest in stats output produced by `profile` calls.\n *   Each registered `handler-fn` will be called as:\n * \n *  (handler-fn {:ns-str _ :level _ :?id _ :?data _ :pstats _ :pstats-str_ _})\n * \n *   Map args:\n *  :ns-str      - Namespace string where `profile` call took place\n *  :level       - Level e/o #{0 1 2 3 4 5}, given in `(profile {:level _} ...)`\n *  :?id         - Optional group id,        given in `(profile {:id    _} ...)`\n *  :?data       - Optional arb data,        given in `(profile {:data  _} ...)`\n *  :pstats      - As in `(second (profiled ...))`. Derefable, mergeable.\n *  :pstats-str_ - `(delay (format-pstats pstats))\n * \n *   Error handling (NB):\n *  Handler errors will be silently swallowed. Please `try`/`catch` and\n *  appropriately deal with (e.g. log) possible errors *within* `handler-fn`.\n * \n *   Async/blocking:\n *  `handler-fn` should ideally be non-blocking, or reasonably cheap. Handler\n *   dispatch occurs through a 1-thread 1k-buffer dropping queue.\n * \n *   Ns filtering:\n *  Provide an optional `ns-pattern` arg to only call handler for matching\n *  namespaces. See `*ns-filter*` for example patterns.\n * \n *   Handler ideas:\n *  Save to a db, log, `put!` to an appropriate `core.async` channel, filter,\n *  aggregate, use for a realtime analytics dashboard, examine for outliers\n *  or unexpected output, ...\n */\ntaoensso.tufte.add_handler_BANG_ = (function taoensso$tufte$add_handler_BANG_(var_args){\nvar G__34936 = arguments.length;\nswitch (G__34936) {\ncase 2:\nreturn taoensso.tufte.add_handler_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn taoensso.tufte.add_handler_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.tufte.add_handler_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (handler_id,handler_fn){\nreturn taoensso.tufte.add_handler_BANG_.cljs$core$IFn$_invoke$arity$3(handler_id,null,handler_fn);\n}));\n\n(taoensso.tufte.add_handler_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (handler_id,ns_pattern,handler_fn){\nvar f = (((((ns_pattern == null)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ns_pattern,\"*\"))))?handler_fn:(function (){var nsf_QMARK_ = taoensso.encore.compile_str_filter(ns_pattern);\nreturn (function (m){\nif(cljs.core.truth_(nsf_QMARK_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,new cljs.core.Keyword(null,\"ns-str\",\"ns-str\",-2062616499))))){\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(m) : handler_fn.call(null,m));\n} else {\nreturn null;\n}\n});\n})());\nreturn cljs.core.set(cljs.core.keys(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(taoensso.tufte.handlers_,cljs.core.assoc,handler_id,f)));\n}));\n\n(taoensso.tufte.add_handler_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Adds a simple handler that logs `profile` stats output with `println`.\n */\ntaoensso.tufte.add_basic_println_handler_BANG_ = (function taoensso$tufte$add_basic_println_handler_BANG_(p__34939){\nvar map__34940 = p__34939;\nvar map__34940__$1 = cljs.core.__destructure_map(map__34940);\nvar ns_pattern = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__34940__$1,new cljs.core.Keyword(null,\"ns-pattern\",\"ns-pattern\",-1760120986),\"*\");\nvar handler_id = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__34940__$1,new cljs.core.Keyword(null,\"handler-id\",\"handler-id\",1160395333),new cljs.core.Keyword(null,\"basic-println\",\"basic-println\",-1128346249));\nvar format_pstats_opts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34940__$1,new cljs.core.Keyword(null,\"format-pstats-opts\",\"format-pstats-opts\",-106329474));\nreturn taoensso.tufte.add_handler_BANG_.cljs$core$IFn$_invoke$arity$3(handler_id,ns_pattern,(function (p__34941){\nvar map__34942 = p__34941;\nvar map__34942__$1 = cljs.core.__destructure_map(map__34942);\nvar _QMARK_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34942__$1,new cljs.core.Keyword(null,\"?id\",\"?id\",-712098248));\nvar _QMARK_data = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34942__$1,new cljs.core.Keyword(null,\"?data\",\"?data\",-9471433));\nvar pstats = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34942__$1,new cljs.core.Keyword(null,\"pstats\",\"pstats\",276614232));\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[(cljs.core.truth_(_QMARK_id)?[\"\\nid: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(_QMARK_id)].join(''):null),(cljs.core.truth_(_QMARK_data)?[\"\\ndata: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(_QMARK_data)].join(''):null),\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((taoensso.tufte.format_pstats.cljs$core$IFn$_invoke$arity$2 ? taoensso.tufte.format_pstats.cljs$core$IFn$_invoke$arity$2(pstats,format_pstats_opts) : taoensso.tufte.format_pstats.call(null,pstats,format_pstats_opts)))].join('')], 0));\n}));\n});\n/**\n * Returns a `format-id-fn` that abbreviates form ids (pids).\n *   Takes `n` (default 1), the number of namespace parts to keep unabbreviated.\n * \n *   Examples:\n *  ((format-id-abbr)   :foo)                     => \"foo\"\n *  ((format-id-abbr)   :example.hello/foo)       => \"e.hello/foo\"\n *  ((format-id-abbr 1) :example.hello/foo)       => \"e.hello/foo\"\n *  ((format-id-abbr 1) :example.hello.world/foo) => \"e.h.world/foo\"\n *  ((format-id-abbr 2) :example.hello.world/foo) => \"e.hello.world/foo\"\n *  ((format-id-abbr 0) :example.hello.world/foo) => \"e.h.w/foo\"\n */\ntaoensso.tufte.format_id_abbr = (function taoensso$tufte$format_id_abbr(var_args){\nvar G__34948 = arguments.length;\nswitch (G__34948) {\ncase 0:\nreturn taoensso.tufte.format_id_abbr.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn taoensso.tufte.format_id_abbr.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.tufte.format_id_abbr.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn taoensso.tufte.format_id_abbr.cljs$core$IFn$_invoke$arity$1((1));\n}));\n\n(taoensso.tufte.format_id_abbr.cljs$core$IFn$_invoke$arity$1 = (function (n){\nvar n__$1 = cljs.core.long$((function (){var e = (function (){try{if(taoensso.encore.int_QMARK_(n)){\nreturn null;\n} else {\nreturn taoensso.truss.impl._dummy_error;\n}\n}catch (e34951){if((e34951 instanceof Error)){\nvar e = e34951;\nreturn e;\n} else {\nthrow e34951;\n\n}\n}})();\nif((e == null)){\nreturn n;\n} else {\nreturn taoensso.truss.impl._invar_violation_BANG_(true,\"taoensso.tufte\",279,\"(enc/int? n)\",n,e,null);\n}\n})());\nreturn (function (s){\nvar ns_parts = cljs.core.pop(taoensso.encore.explode_keyword(s));\nvar cnt = cljs.core.count(ns_parts);\nvar sb = taoensso.encore.reduce_indexed((function (sb,idx,in$){\nif((idx === (0))){\n} else {\ntaoensso.encore.sb_append.cljs$core$IFn$_invoke$arity$2(sb,\".\");\n}\n\nif(((cnt - idx) <= n__$1)){\nreturn taoensso.encore.sb_append.cljs$core$IFn$_invoke$arity$2(sb,in$);\n} else {\nreturn taoensso.encore.sb_append.cljs$core$IFn$_invoke$arity$2(sb,taoensso.encore.get_substr.cljs$core$IFn$_invoke$arity$3(in$,(0),(1)));\n}\n}),taoensso.encore.str_builder.cljs$core$IFn$_invoke$arity$0(),ns_parts);\nif((cnt > (0))){\ntaoensso.encore.sb_append.cljs$core$IFn$_invoke$arity$2(sb,\"/\");\n} else {\n}\n\ntaoensso.encore.sb_append.cljs$core$IFn$_invoke$arity$2(sb,taoensso.encore.str_replace(cljs.core.name(s),/^defn_/,\"\"));\n\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);\n});\n}));\n\n(taoensso.tufte.format_id_abbr.cljs$lang$maxFixedArity = 1);\n\n/**\n * Returns e/o #{nil :thread :dynamic}.\n */\ntaoensso.tufte.profiling_QMARK_ = (function taoensso$tufte$profiling_QMARK_(){\nif(cljs.core.truth_(taoensso.tufte.impl._STAR_pdata_STAR_)){\nreturn new cljs.core.Keyword(null,\"dynamic\",\"dynamic\",704819571);\n} else {\nif(cljs.core.truth_(taoensso.tufte.impl.pdata_proxy_get())){\nreturn new cljs.core.Keyword(null,\"thread\",\"thread\",947001524);\n} else {\nreturn null;\n}\n}\n});\ntaoensso.tufte.default_nmax = 800000.0;\n/**\n * Note: this is a low-level primitive for advanced users!\n *   Returns a new pdata object for use with `with-profiling` and/or `capture-time!`.\n *   Deref to get pstats:\n * \n *  (let [pd (new-pdata)\n *        t0 (System/nanoTime)]\n *    (with-profiling pd {}\n *      (p :foo (Thread/sleep 100))\n *      (capture-time! pd :bar (- t0 (System/nanoTime))))\n *    @pd)\n * \n *   Dynamic (thread-safe) by default.\n *   *WARNING*: don't change this default unless you're very sure the resulting\n *   pdata object will not be concurrently modified across threads. Concurrent\n *   modification will lead to bad data and/or exceptions!\n */\ntaoensso.tufte.new_pdata = (function taoensso$tufte$new_pdata(var_args){\nvar G__34958 = arguments.length;\nswitch (G__34958) {\ncase 0:\nreturn taoensso.tufte.new_pdata.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn taoensso.tufte.new_pdata.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.tufte.new_pdata.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn taoensso.tufte.new_pdata.cljs$core$IFn$_invoke$arity$1(null);\n}));\n\n(taoensso.tufte.new_pdata.cljs$core$IFn$_invoke$arity$1 = (function (p__34959){\nvar map__34960 = p__34959;\nvar map__34960__$1 = cljs.core.__destructure_map(map__34960);\nvar dynamic_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__34960__$1,new cljs.core.Keyword(null,\"dynamic?\",\"dynamic?\",680592423),true);\nvar nmax = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__34960__$1,new cljs.core.Keyword(null,\"nmax\",\"nmax\",608994404),800000.0);\nif(cljs.core.truth_(dynamic_QMARK_)){\nreturn taoensso.tufte.impl.new_pdata_dynamic(nmax);\n} else {\nreturn taoensso.tufte.impl.new_pdata_local(nmax);\n}\n}));\n\n(taoensso.tufte.new_pdata.cljs$lang$maxFixedArity = 1);\n\n/**\n * Note: this is a low-level primitive for advanced users!\n *   Can be useful when tracking time across arbitrary thread boundaries or for\n *   async jobs / callbacks / etc.\n * \n *   See `new-pdata` for more info on low-level primitives.\n */\ntaoensso.tufte.capture_time_BANG_ = (function taoensso$tufte$capture_time_BANG_(var_args){\nvar G__34964 = arguments.length;\nswitch (G__34964) {\ncase 3:\nreturn taoensso.tufte.capture_time_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn taoensso.tufte.capture_time_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.tufte.capture_time_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (pdata,id,nano_secs_elapsed){\nreturn taoensso.tufte.impl.capture_time_BANG_(pdata,id,nano_secs_elapsed);\n}));\n\n(taoensso.tufte.capture_time_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (id,nano_secs_elapsed){\nvar temp__5753__auto__ = (function (){var or__4253__auto__ = taoensso.tufte.impl._STAR_pdata_STAR_;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn taoensso.tufte.impl.pdata_proxy_get();\n}\n})();\nif(cljs.core.truth_(temp__5753__auto__)){\nvar pd = temp__5753__auto__;\nreturn taoensso.tufte.impl.capture_time_BANG_(pd,id,nano_secs_elapsed);\n} else {\nreturn null;\n}\n}));\n\n(taoensso.tufte.capture_time_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Wraps `taoensso.encore/compile-str-filter`.\n */\ntaoensso.tufte.compile_ns_filter = (function taoensso$tufte$compile_ns_filter(ns_pattern){\nreturn taoensso.encore.compile_str_filter(ns_pattern);\n});\n/**\n * Returns true with 0<`p`<1 probability.\n */\ntaoensso.tufte.chance = (function taoensso$tufte$chance(p){\nreturn (cljs.core.rand.cljs$core$IFn$_invoke$arity$0() < p);\n});\n/**\n * Statistics are lossless unless data to merge are very large.\n */\ntaoensso.tufte.merge_pstats = (function taoensso$tufte$merge_pstats(var_args){\nvar G__34979 = arguments.length;\nswitch (G__34979) {\ncase 0:\nreturn taoensso.tufte.merge_pstats.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn taoensso.tufte.merge_pstats.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.tufte.merge_pstats.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.tufte.merge_pstats.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn null;\n}));\n\n(taoensso.tufte.merge_pstats.cljs$core$IFn$_invoke$arity$1 = (function (ps0){\nreturn ps0;\n}));\n\n(taoensso.tufte.merge_pstats.cljs$core$IFn$_invoke$arity$2 = (function (ps0,ps1){\nreturn taoensso.tufte.impl.merge_pstats.cljs$core$IFn$_invoke$arity$2(ps0,ps1);\n}));\n\n(taoensso.tufte.merge_pstats.cljs$lang$maxFixedArity = 2);\n\n/**\n * Formats given pstats to a string table.\n *  Accounted < Clock => Some work was done that wasn't tracked by any p forms.\n *  Accounted > Clock => Nested p forms, and/or parallel threads.\n */\ntaoensso.tufte.format_pstats = (function taoensso$tufte$format_pstats(var_args){\nvar G__34988 = arguments.length;\nswitch (G__34988) {\ncase 1:\nreturn taoensso.tufte.format_pstats.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.tufte.format_pstats.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.tufte.format_pstats.cljs$core$IFn$_invoke$arity$1 = (function (ps){\nreturn taoensso.tufte.format_pstats.cljs$core$IFn$_invoke$arity$2(ps,null);\n}));\n\n(taoensso.tufte.format_pstats.cljs$core$IFn$_invoke$arity$2 = (function (ps,opts){\nif(cljs.core.truth_(ps)){\nvar map__34989 = (((ps instanceof taoensso.tufte.impl.PStats))?cljs.core.deref(ps):ps);\nvar map__34989__$1 = cljs.core.__destructure_map(map__34989);\nvar clock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34989__$1,new cljs.core.Keyword(null,\"clock\",\"clock\",-894301127));\nvar stats = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34989__$1,new cljs.core.Keyword(null,\"stats\",\"stats\",-85643011));\nreturn taoensso.tufte.stats.format_stats(cljs.core.get.cljs$core$IFn$_invoke$arity$2(clock,new cljs.core.Keyword(null,\"total\",\"total\",1916810418)),stats,opts);\n} else {\nreturn null;\n}\n}));\n\n(taoensso.tufte.format_pstats.cljs$lang$maxFixedArity = 2);\n\ntaoensso.tufte.fn_sigs = (function taoensso$tufte$fn_sigs(def_QMARK_,_QMARK_meta_pid,fn_sym,sigs){\nvar single_arity_QMARK_ = cljs.core.vector_QMARK_(cljs.core.first(sigs));\nvar sigs__$1 = ((single_arity_QMARK_)?(new cljs.core.List(null,sigs,null,(1),null)):sigs);\nvar base_id = (cljs.core.truth_(_QMARK_meta_pid)?taoensso.encore.as_qname(_QMARK_meta_pid):[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_ns_STAR_),\"/\",(cljs.core.truth_(def_QMARK_)?\"defn_\":\"fn_\"),cljs.core.name(fn_sym)].join(''));\nvar get_id = ((single_arity_QMARK_)?(function (fn_sym__$1,_params){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(base_id);\n}):(function (fn_sym__$1,params){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1([base_id,\"_\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.count(params))].join(''));\n}));\nvar new_sigs = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__34992){\nvar vec__34993 = p__34992;\nvar seq__34994 = cljs.core.seq(vec__34993);\nvar first__34995 = cljs.core.first(seq__34994);\nvar seq__34994__$1 = cljs.core.next(seq__34994);\nvar params = first__34995;\nvar others = seq__34994__$1;\nvar has_prepost_map_QMARK_ = ((cljs.core.map_QMARK_(cljs.core.first(others))) && (cljs.core.next(others)));\nvar vec__34996 = ((has_prepost_map_QMARK_)?others:cljs.core.cons(null,others));\nvar seq__34997 = cljs.core.seq(vec__34996);\nvar first__34998 = cljs.core.first(seq__34997);\nvar seq__34997__$1 = cljs.core.next(seq__34997);\nvar _QMARK_prepost_map = first__34998;\nvar body = seq__34997__$1;\nif(cljs.core.truth_(_QMARK_prepost_map)){\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,params,null,(1),null)),(new cljs.core.List(null,_QMARK_prepost_map,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"taoensso.tufte\",\"p\",\"taoensso.tufte/p\",955444208,null),null,(1),null)),(new cljs.core.List(null,get_id(fn_sym,params),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0))));\n} else {\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,params,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"taoensso.tufte\",\"p\",\"taoensso.tufte/p\",955444208,null),null,(1),null)),(new cljs.core.List(null,get_id(fn_sym,params),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null)))));\n}\n}),sigs__$1);\nreturn new_sigs;\n});\ntaoensso.tufte.sacc_drain_and_merge_BANG_ = (function taoensso$tufte$sacc_drain_and_merge_BANG_(pstats_){\nreturn taoensso.encore.reset_in_BANG_.cljs$core$IFn$_invoke$arity$2(pstats_,cljs.core.PersistentArrayMap.EMPTY);\n});\ntaoensso.tufte.sacc_add_BANG_ = (function taoensso$tufte$sacc_add_BANG_(pstats_,group_id,ps){\nif(cljs.core.truth_((function (){var and__4251__auto__ = group_id;\nif(cljs.core.truth_(and__4251__auto__)){\nreturn ps;\n} else {\nreturn and__4251__auto__;\n}\n})())){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(pstats_,(function (m){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,group_id,taoensso.tufte.impl.merge_pstats.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,group_id),ps));\n}));\n\nreturn true;\n} else {\nreturn null;\n}\n});\n\n/**\n* @constructor\n * @implements {cljs.core.IFn}\n * @implements {cljs.core.IDeref}\n*/\ntaoensso.tufte.StatsAccumulator = (function (pstats_){\nthis.pstats_ = pstats_;\nthis.cljs$lang$protocol_mask$partition0$ = 32769;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\n(taoensso.tufte.StatsAccumulator.prototype.call = (function (unused__9632__auto__){\nvar self__ = this;\nvar self__ = this;\nvar G__35005 = (arguments.length - (1));\nswitch (G__35005) {\ncase (2):\nreturn self__.cljs$core$IFn$_invoke$arity$2((arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((arguments.length - (1)))].join('')));\n\n}\n}));\n\n(taoensso.tufte.StatsAccumulator.prototype.apply = (function (self__,args35003){\nvar self__ = this;\nvar self____$1 = this;\nreturn self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args35003)));\n}));\n\n(taoensso.tufte.StatsAccumulator.prototype.cljs$core$IFn$_invoke$arity$2 = (function (group_id,ps){\nvar self__ = this;\nvar _ = this;\nreturn taoensso.tufte.sacc_add_BANG_(self__.pstats_,group_id,ps);\n}));\n\n(taoensso.tufte.StatsAccumulator.prototype.cljs$core$IDeref$_deref$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn taoensso.tufte.sacc_drain_and_merge_BANG_(self__.pstats_);\n}));\n\n(taoensso.tufte.StatsAccumulator.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"pstats_\",\"pstats_\",-970084866,null)], null);\n}));\n\n(taoensso.tufte.StatsAccumulator.cljs$lang$type = true);\n\n(taoensso.tufte.StatsAccumulator.cljs$lang$ctorStr = \"taoensso.tufte/StatsAccumulator\");\n\n(taoensso.tufte.StatsAccumulator.cljs$lang$ctorPrWriter = (function (this__4491__auto__,writer__4492__auto__,opt__4493__auto__){\nreturn cljs.core._write(writer__4492__auto__,\"taoensso.tufte/StatsAccumulator\");\n}));\n\n/**\n * Positional factory function for taoensso.tufte/StatsAccumulator.\n */\ntaoensso.tufte.__GT_StatsAccumulator = (function taoensso$tufte$__GT_StatsAccumulator(pstats_){\nreturn (new taoensso.tufte.StatsAccumulator(pstats_));\n});\n\n/**\n * Alpha, subject to change.\n *   Small util to help merge pstats from multiple runs or threads.\n * \n *   Returns a stateful StatsAccumulator (`sacc`) with:\n *  - `(sacc <group-id> <pstats>)` ; Merges given pstats under given group id\n *  - `@sacc`                      ; Drains accumulator and returns {<group-id> <merged-pstats>}\n * \n *   Note that you may want some kind of async/buffer/serialization\n *   mechanism in front of merge calls for performance (e.g. by using an agent).\n * \n *   See also `add-accumulating-handler!`, example clj project.\n */\ntaoensso.tufte.stats_accumulator = (function taoensso$tufte$stats_accumulator(){\nreturn (new taoensso.tufte.StatsAccumulator(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY)));\n});\n/**\n * Alpha, subject to change.\n * \n *   Creates a new StatsAccumulator (and agent in clj), then\n *   registers a handler to accumulate `profile` output to the\n *   StatsAccumulator using the agent.\n * \n *   Returns the StatsAccumulator. You can deref the result to\n *   drain the accumulator and return {<group-id> <merged-pstats>}.\n * \n *   One common pattern is to deref the accumulator every n\n *   minutes/etc. to get a view of total-system performance over\n *   the period, e.g.:\n * \n *   (defonce my-sacc (add-accumulating-handler! \"*\"))\n *   (defonce my-sacc-drainer\n *  ;; Will drain and print formatted stats every minute\n *  (future\n *    (while true\n *      (when-let [m (not-empty @my-sacc)]\n *        (println (format-grouped-pstats m)))\n *      (Thread/sleep 60000))))\n * \n *   (profile ...) ; Used elsewhere in your application, e.g.\n *              ; wrapping relevant Ring routes in a web application.\n * \n *   See also `format-grouped-pstats`, example clj project.\n */\ntaoensso.tufte.add_accumulating_handler_BANG_ = (function taoensso$tufte$add_accumulating_handler_BANG_(p__35009){\nvar map__35010 = p__35009;\nvar map__35010__$1 = cljs.core.__destructure_map(map__35010);\nvar ns_pattern = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35010__$1,new cljs.core.Keyword(null,\"ns-pattern\",\"ns-pattern\",-1760120986));\nvar handler_id = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__35010__$1,new cljs.core.Keyword(null,\"handler-id\",\"handler-id\",1160395333),new cljs.core.Keyword(null,\"accumulating\",\"accumulating\",988482775));\nvar sacc = taoensso.tufte.stats_accumulator();\nvar agent_ = null;\ntaoensso.tufte.add_handler_BANG_.cljs$core$IFn$_invoke$arity$3(handler_id,ns_pattern,(function (p__35013){\nvar map__35014 = p__35013;\nvar map__35014__$1 = cljs.core.__destructure_map(map__35014);\nvar _QMARK_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35014__$1,new cljs.core.Keyword(null,\"?id\",\"?id\",-712098248));\nvar _QMARK_data = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35014__$1,new cljs.core.Keyword(null,\"?data\",\"?data\",-9471433));\nvar pstats = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35014__$1,new cljs.core.Keyword(null,\"pstats\",\"pstats\",276614232));\nvar id = (function (){var or__4253__auto__ = _QMARK_id;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn new cljs.core.Keyword(\"tufte\",\"nil-id\",\"tufte/nil-id\",1406139614);\n}\n})();\nreturn (sacc.cljs$core$IFn$_invoke$arity$2 ? sacc.cljs$core$IFn$_invoke$arity$2(id,pstats) : sacc.call(null,id,pstats));\n}));\n\nreturn sacc;\n});\n/**\n * Alpha, subject to change.\n *   Takes a map of {<group-id> <PStats>} and formats a combined\n *   output string using `format-pstats`.\n * \n *   See also example clj project.\n */\ntaoensso.tufte.format_grouped_pstats = (function taoensso$tufte$format_grouped_pstats(var_args){\nvar G__35017 = arguments.length;\nswitch (G__35017) {\ncase 1:\nreturn taoensso.tufte.format_grouped_pstats.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.tufte.format_grouped_pstats.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(taoensso.tufte.format_grouped_pstats.cljs$core$IFn$_invoke$arity$1 = (function (m){\nreturn taoensso.tufte.format_grouped_pstats.cljs$core$IFn$_invoke$arity$2(m,null);\n}));\n\n(taoensso.tufte.format_grouped_pstats.cljs$core$IFn$_invoke$arity$2 = (function (m,p__35022){\nvar map__35023 = p__35022;\nvar map__35023__$1 = cljs.core.__destructure_map(map__35023);\nvar group_sort_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__35023__$1,new cljs.core.Keyword(null,\"group-sort-fn\",\"group-sort-fn\",1474480015),(function (m__$1){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clock\",\"clock\",-894301127),new cljs.core.Keyword(null,\"total\",\"total\",1916810418)], null),(0));\n}));\nvar format_pstats_opts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35023__$1,new cljs.core.Keyword(null,\"format-pstats-opts\",\"format-pstats-opts\",-106329474));\nif(cljs.core.truth_(m)){\nvar m__$1 = cljs.core.persistent_BANG_(cljs.core.reduce_kv((function (m__$1,k,v){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(m__$1,k,taoensso.encore.force_ref(v));\n}),cljs.core.transient$(m),m));\nvar sorted_group_ids = cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3((function (id){\nvar G__35024 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m__$1,id);\nreturn (group_sort_fn.cljs$core$IFn$_invoke$arity$1 ? group_sort_fn.cljs$core$IFn$_invoke$arity$1(G__35024) : group_sort_fn.call(null,G__35024));\n}),taoensso.encore.rcompare,cljs.core.keys(m__$1));\nvar max_id_width = cljs.core.reduce_kv((function (acc,_,p__35025){\nvar map__35026 = p__35025;\nvar map__35026__$1 = cljs.core.__destructure_map(map__35026);\nvar clock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35026__$1,new cljs.core.Keyword(null,\"clock\",\"clock\",-894301127));\nvar stats = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35026__$1,new cljs.core.Keyword(null,\"stats\",\"stats\",-85643011));\nvar temp__5751__auto__ = taoensso.tufte.stats.get_max_id_width(stats,format_pstats_opts);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar c = temp__5751__auto__;\nif((cljs.core.long$(c) > acc)){\nreturn c;\n} else {\nreturn acc;\n}\n} else {\nreturn acc;\n}\n}),(0),m__$1);\nreturn taoensso.encore.str_join.cljs$core$IFn$_invoke$arity$3(\"\\n\\n\",cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (id){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\",\\n\",taoensso.tufte.format_pstats.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m__$1,id),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(format_pstats_opts,new cljs.core.Keyword(null,\"max-id-width\",\"max-id-width\",-1761362373),max_id_width))].join('');\n})),sorted_group_ids);\n} else {\nreturn null;\n}\n}));\n\n(taoensso.tufte.format_grouped_pstats.cljs$lang$maxFixedArity = 2);\n\nvar ret__4913__auto___35158 = (function (){\n/**\n * Deprecated, just use `binding`\n */\ntaoensso.tufte.with_min_level = (function taoensso$tufte$with_min_level(var_args){\nvar args__4870__auto__ = [];\nvar len__4864__auto___35159 = arguments.length;\nvar i__4865__auto___35160 = (0);\nwhile(true){\nif((i__4865__auto___35160 < len__4864__auto___35159)){\nargs__4870__auto__.push((arguments[i__4865__auto___35160]));\n\nvar G__35161 = (i__4865__auto___35160 + (1));\ni__4865__auto___35160 = G__35161;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);\nreturn taoensso.tufte.with_min_level.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);\n});\n\n(taoensso.tufte.with_min_level.cljs$core$IFn$_invoke$arity$variadic = (function (_AMPERSAND_form,_AMPERSAND_env,level,body){\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"binding\",\"cljs.core/binding\",2050379843,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(\"taoensso.tufte\",\"*min-level*\",\"taoensso.tufte/*min-level*\",-1012922549,null),null,(1),null)),(new cljs.core.List(null,level,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0))));\n}));\n\n(taoensso.tufte.with_min_level.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(taoensso.tufte.with_min_level.cljs$lang$applyTo = (function (seq35027){\nvar G__35028 = cljs.core.first(seq35027);\nvar seq35027__$1 = cljs.core.next(seq35027);\nvar G__35029 = cljs.core.first(seq35027__$1);\nvar seq35027__$2 = cljs.core.next(seq35027__$1);\nvar G__35030 = cljs.core.first(seq35027__$2);\nvar seq35027__$3 = cljs.core.next(seq35027__$2);\nvar self__4851__auto__ = this;\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__35028,G__35029,G__35030,seq35027__$3);\n}));\n\nreturn null;\n})()\n;\n(taoensso.tufte.with_min_level.cljs$lang$macro = true);\n\n\n/**\n * Deprecated, just use `alter-var-root`\n */\ntaoensso.tufte.set_min_level_BANG_ = (function taoensso$tufte$set_min_level_BANG_(level){\nreturn (taoensso.tufte._STAR_min_level_STAR_ = level);\n});\n\nvar ret__4913__auto___35165 = (function (){\n/**\n * Deprecated, just use `binding`\n */\ntaoensso.tufte.with_ns_pattern = (function taoensso$tufte$with_ns_pattern(var_args){\nvar args__4870__auto__ = [];\nvar len__4864__auto___35166 = arguments.length;\nvar i__4865__auto___35167 = (0);\nwhile(true){\nif((i__4865__auto___35167 < len__4864__auto___35166)){\nargs__4870__auto__.push((arguments[i__4865__auto___35167]));\n\nvar G__35168 = (i__4865__auto___35167 + (1));\ni__4865__auto___35167 = G__35168;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);\nreturn taoensso.tufte.with_ns_pattern.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);\n});\n\n(taoensso.tufte.with_ns_pattern.cljs$core$IFn$_invoke$arity$variadic = (function (_AMPERSAND_form,_AMPERSAND_env,ns_pattern,body){\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"binding\",\"cljs.core/binding\",2050379843,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(\"taoensso.tufte\",\"*ns-filter*\",\"taoensso.tufte/*ns-filter*\",843426356,null),null,(1),null)),(new cljs.core.List(null,ns_pattern,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0))));\n}));\n\n(taoensso.tufte.with_ns_pattern.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(taoensso.tufte.with_ns_pattern.cljs$lang$applyTo = (function (seq35035){\nvar G__35036 = cljs.core.first(seq35035);\nvar seq35035__$1 = cljs.core.next(seq35035);\nvar G__35037 = cljs.core.first(seq35035__$1);\nvar seq35035__$2 = cljs.core.next(seq35035__$1);\nvar G__35038 = cljs.core.first(seq35035__$2);\nvar seq35035__$3 = cljs.core.next(seq35035__$2);\nvar self__4851__auto__ = this;\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__35036,G__35037,G__35038,seq35035__$3);\n}));\n\nreturn null;\n})()\n;\n(taoensso.tufte.with_ns_pattern.cljs$lang$macro = true);\n\n\n/**\n * Deprecated, just use `alter-var-root`\n */\ntaoensso.tufte.set_ns_pattern_BANG_ = (function taoensso$tufte$set_ns_pattern_BANG_(ns_pattern){\nreturn (taoensso.tufte._STAR_ns_filter_STAR_ = ns_pattern);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","Peter Taoussanis (@ptaoussanis)","~:doc","A simple, fast, monitoring profiler for Clojure/Script.\n\n  Usage: wrap+name interesting body exprs with the `p` macro. Then activate\n  profiling of these wrapped exprs using the `profiled` or `profile` macros:\n\n    (profiled {} (p :my-fn (my-fn))) ; Returns [<body-result> <?pstats>]\n    (profile  {} (p :my-fn (my-fn))) ; Returns  <body-result>, dispatches\n                                     ; ?pstats to any registered handlers.\n\n  Extensive facilities are provided for compile-time elision and runtime\n  filtering.\n\n  See the relevant docstrings for more info:\n    `p`, `profiled`, `profile`, `add-handler!` ; Core API\n\n    (p        [opts & body] [id & body]) ; e.g. `(p ::my-pid (do-work))`\n    (profiled [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n    (profile  [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n\n    (add-handler! [handler-id ns-pattern handler-fn])\n\n  How/where to use this library:\n    Tufte profiling is highly optimized: even without elision, you can usually\n    leave profiling enabled in production (e.g. for sampled profiling, or to\n    detect unusual performance behaviour). Tufte's stats maps are well suited\n    to programmatic monitoring.\n\n  Abbreviations, etc.\n    - form  id = pid = id given in `p`\n    - group id = gid = id given in `profile`","~:file","taoensso/tufte.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",["^ ","~$profiled","~$taoensso.tufte"],"~:excludes",["~#set",[]],"~:macros",["^ ","~$defnp",["^ ","~:arglists",["~#list",[["~$name","~$doc-string?","~$attr-map?",["~$params*"],"~$prepost-map?","~$body"],["^M","^N","^O",["^L",[["^P"],"^Q","^R"]],"~$+","^O"]]],"^7","Like `defn` but wraps fn bodies with `p` macro.","^9",679,"^:",1,"^8","taoensso/tufte.cljc","~:name","~$taoensso.tufte/defnp","~:ns","^F","~:macro",true],"~$p",["^ ","^K",["^L",[["~$id","~$&","^R"],["~$opts","~$&","^R"]]],"^7","Profiling spy. Always executes body, and always returns <body-result>.\n\n     When [ns level] unelided and profiling is active, records execution\n     time of body.\n\n     Compile-time opts:\n      :id    - Form id for this body in stats output (e.g. `::my-fn-call`)\n      :level - e/o #{0 1 2 3 4 5} ; Default is `5`","^9",530,"^:",4,"^8","taoensso/tufte.cljc","^S","~$taoensso.tufte/p","^U","^F","^V",true],"~$profile",["^ ","^K",["^L",[["^X","~$&","^R"]]],"^7","Always executes body, and always returns <body-result>.\n\n     When [ns level] unelided and [ns level `when`] unfiltered, executes body\n     with profiling active and dispatches stats to any registered handlers\n     (see `add-handler!`).\n\n     Handy if you'd like to consume/aggregate stats output later/elsewhere.\n     Otherwise see `profiled`.\n\n     Compile-time opts:\n       :level    - e/o #{0 1 2 3 4 5} ; Default is `5`\n       :dynamic? - Use multi-threaded profiling? ; Default is `false`\n       :nmax     - ~Max captures per id before compaction ; Default is 8e5\n       :when     - Optional arbitrary conditional form (e.g. boolean expr)\n       :id       - Optional group id provided to handlers (e.g. `::my-stats-1`)\n       :data     - Optional arbitrary data provided to handlers\n\n     Async code:\n       Execution time of any code in body that runs asynchronously on a\n       different thread will generally NOT be automatically captured by default.\n\n       :dynamic? can be used to support capture in cases where Clojure's\n       binding conveyance applies (e.g. futures, agents, pmap).\n\n       In other advanced cases (notably core.async `go` blocks), please see\n       `with-profiling` and `capture-time!`.\n\n     Laziness:\n       Lazy seqs and other forms of laziness (e.g. delays) will only contribute\n       to profiling results if/when evaluation actually occurs.\n       This is intentional and a useful property. Compare:\n\n       (profiled {}  (delay (Thread/sleep 2000))) ; Doesn't count sleep\n       (profiled {} @(delay (Thread/sleep 2000))) ; Does    count sleep","^9",465,"^:",4,"^8","taoensso/tufte.cljc","^S","~$taoensso.tufte/profile","^U","^F","^V",true],"~$fnp",["^ ","^K",["^L",[["~$name?",["^P"],"^Q","^R"],["^11",["^L",[["^P"],"^Q","^R"]],"~$+"]]],"^7","Like `fn` but wraps fn bodies with `p` macro.","^9",659,"^:",1,"^8","taoensso/tufte.cljc","^S","~$taoensso.tufte/fnp","^U","^F","^V",true],"~$with-profiling",["^ ","^K",["^L",[["~$pdata",["^ ","~:keys",["~$dynamic?","~$nmax"],"~:or",["^ ","^17","~$default-nmax"]],"~$&","^R"]]],"^7","Note: this is a low-level primitive for advanced users!\n  Enables `p` forms in body and returns body's result.\n\n  See `new-pdata` for more info on low-level primitives.","^9",339,"^:",1,"^8","taoensso/tufte.cljc","^S","~$taoensso.tufte/with-profiling","^U","^F","^V",true],"~$with-min-level",["^ ","^K",["^L",[["~$level","~$&","^R"]]],"^7","Deprecated, just use `binding`","^9",838,"^:",3,"^8","taoensso/tufte.cljc","^S","~$taoensso.tufte/with-min-level","^U","^F","^V",true],"~$defnp-",["^ ","^K",["^L",[["^M","^N","^O",["^P"],"^Q","^R"],["^M","^N","^O",["^L",[["^P"],"^Q","^R"]],"~$+","^O"]]],"^7","Like `defn-` but wraps fn bodies with `p` macro.","^9",688,"^:",1,"^8","taoensso/tufte.cljc","^S","~$taoensso.tufte/defnp-","^U","^F","^V",true],"^E",["^ ","^K",["^L",[["^X","~$&","^R"]]],"^7","Always executes body, and always returns [<body-result> <?pstats>].\n\n     When [ns level] unelided and [ns level `when`] unfiltered, executes body\n     with profiling active.\n\n     Handy if you'd like to consume stats output directly.\n     Otherwise see `profile`.\n\n     `pstats` objects are derefable and mergeable:\n       - @pstats                 -> {:stats {:n _ :min _ ...} :clock {:t0 _ :t1 _ :total _}}\n       - @(merge-pstats ps1 ps2) -> {:stats {:n _ :min _ ...} :clock {:t0 _ :t1 _ :total _}}\n\n     Full set of `:stats` keys:\n       :n :min :max :mean :mad :sum :p25 :p50 :p75 :p90 :p95 :p99\n\n     Compile-time opts:\n       :level    - e/o #{0 1 2 3 4 5} ; Default is `5`\n       :dynamic? - Use multi-threaded profiling? ; Default is `false`\n       :nmax     - ~Max captures per id before compaction ; Default is 8e5\n       :when     - Optional arbitrary conditional form (e.g. boolean expr)\n\n     Async code:\n       Execution time of any code in body that runs asynchronously on a\n       different thread will generally NOT be automatically captured by default.\n\n       :dynamic? can be used to support capture in cases where Clojure's\n       binding conveyance applies (e.g. futures, agents, pmap).\n\n       In other advanced cases (notably core.async `go` blocks), please see\n       `with-profiling` and `capture-time!`.\n\n     Laziness:\n       Lazy seqs and other forms of laziness (e.g. delays) will only contribute\n       to profiling results if/when evaluation actually occurs.\n       This is intentional and a useful property. Compare:\n\n       (profiled {}  (delay (Thread/sleep 2000))) ; Doesn't count sleep\n       (profiled {} @(delay (Thread/sleep 2000))) ; Does    count sleep","^9",384,"^:",4,"^8","taoensso/tufte.cljc","^S","~$taoensso.tufte/profiled","^U","^F","^V",true],"~$pspy",["^ ","^K",["^L",[["~$&","~$args"]]],"^7","~`p` alias","^9",573,"^:",9,"^8","taoensso/tufte.cljc","^S","~$taoensso.tufte/pspy","^U","^F","^V",true],"~$with-ns-pattern",["^ ","^K",["^L",[["~$ns-pattern","~$&","^R"]]],"^7","Deprecated, just use `binding`","^9",843,"^:",3,"^8","taoensso/tufte.cljc","^S","~$taoensso.tufte/with-ns-pattern","^U","^F","^V",true]],"^S","^F","~:reader-aliases",["^ "],"~:op","^U","~:imports",null,"~:requires",["^ ","~$taoensso.encore","^1K","~$enc","^1K","~$taoensso.tufte.stats","^1M","~$stats","^1M","~$taoensso.tufte.impl","^1O","~$impl","^1O","~$cljs.core","^1Q","~$goog","^1R"],"~:seen",["^H",["~:require","~:require-macros"]],"~:uses",["^ ","~$PStats","^1O"],"^1U",["^ ","^F","^F","^1Q","^1Q","^1K","^1K","^1L","^1K","^1O","^1O","^1P","^1O"],"~:form",["^L",["~$ns","^F","A simple, fast, monitoring profiler for Clojure/Script.\n\n  Usage: wrap+name interesting body exprs with the `p` macro. Then activate\n  profiling of these wrapped exprs using the `profiled` or `profile` macros:\n\n    (profiled {} (p :my-fn (my-fn))) ; Returns [<body-result> <?pstats>]\n    (profile  {} (p :my-fn (my-fn))) ; Returns  <body-result>, dispatches\n                                     ; ?pstats to any registered handlers.\n\n  Extensive facilities are provided for compile-time elision and runtime\n  filtering.\n\n  See the relevant docstrings for more info:\n    `p`, `profiled`, `profile`, `add-handler!` ; Core API\n\n    (p        [opts & body] [id & body]) ; e.g. `(p ::my-pid (do-work))`\n    (profiled [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n    (profile  [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n\n    (add-handler! [handler-id ns-pattern handler-fn])\n\n  How/where to use this library:\n    Tufte profiling is highly optimized: even without elision, you can usually\n    leave profiling enabled in production (e.g. for sampled profiling, or to\n    detect unusual performance behaviour). Tufte's stats maps are well suited\n    to programmatic monitoring.\n\n  Abbreviations, etc.\n    - form  id = pid = id given in `p`\n    - group id = gid = id given in `profile`",["^ ","^6","Peter Taoussanis (@ptaoussanis)"],["^L",["^1T",["^1K","~:as","^1L","~:refer-macros",[]],["^1M","^1Z","^1N"],["^1O","^1Z","^1P","~:refer",["^1W"]]]],["^L",["^1U",["^F","^20",["^E"]]]]]],"~:flags",["^ ","^1T",["^H",[]],"^1U",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^1R","^1Q","^1K","^1M","^1O"]],"^U","^F","~:resource-id",["~:shadow.build.classpath/resource","taoensso/tufte.cljc"],"~:compiled-at",1645592446022,"^1G",["^ ","^1M","^1M","^1P","^1O","^1N","^1M","^1Q","^1Q","^1R","^1R","^1O","^1O","^1L","^1K","^F","^F","^1K","^1K"],"~:resource-name","taoensso/tufte.cljc","~:warnings",[],"~:source","(ns taoensso.tufte\n  \"A simple, fast, monitoring profiler for Clojure/Script.\n\n  Usage: wrap+name interesting body exprs with the `p` macro. Then activate\n  profiling of these wrapped exprs using the `profiled` or `profile` macros:\n\n    (profiled {} (p :my-fn (my-fn))) ; Returns [<body-result> <?pstats>]\n    (profile  {} (p :my-fn (my-fn))) ; Returns  <body-result>, dispatches\n                                     ; ?pstats to any registered handlers.\n\n  Extensive facilities are provided for compile-time elision and runtime\n  filtering.\n\n  See the relevant docstrings for more info:\n    `p`, `profiled`, `profile`, `add-handler!` ; Core API\n\n    (p        [opts & body] [id & body]) ; e.g. `(p ::my-pid (do-work))`\n    (profiled [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n    (profile  [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n\n    (add-handler! [handler-id ns-pattern handler-fn])\n\n  How/where to use this library:\n    Tufte profiling is highly optimized: even without elision, you can usually\n    leave profiling enabled in production (e.g. for sampled profiling, or to\n    detect unusual performance behaviour). Tufte's stats maps are well suited\n    to programmatic monitoring.\n\n  Abbreviations, etc.\n    - form  id = pid = id given in `p`\n    - group id = gid = id given in `profile`\"\n\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n\n  #?(:clj\n     (:require\n      [taoensso.encore      :as enc]\n      [taoensso.tufte.stats :as stats]\n      [taoensso.tufte.impl  :as impl]))\n\n  #?(:clj (:import [taoensso.tufte.impl PStats]))\n\n  #?(:cljs\n     (:require\n      [taoensso.encore      :as enc  :refer-macros []]\n      [taoensso.tufte.stats :as stats]\n      [taoensso.tufte.impl  :as impl :refer [PStats]]))\n\n  #?(:cljs (:require-macros [taoensso.tufte :refer [profiled]])))\n\n(enc/assert-min-encore-version [2 126 2])\n\n;;;; Level filtering\n;; Terminology note: we distinguish between call/form and min levels to ensure\n;; that it's always possible to set min-level > any call-level to disable profiling.\n\n(defn- valid-call-level? [x] (if (#{0 1 2 3 4 5}   x) true false))\n(defn- valid-min-level?  [x] (if (#{0 1 2 3 4 5 6} x) true false))\n\n(def ^:private ^:const invalid-call-level-msg        \"Invalid Tufte profiling level: should be int e/o #{0 1 2 3 4 5}\")\n(def ^:private ^:const invalid-min-level-msg \"Invalid minimum Tufte profiling level: should be int e/o #{0 1 2 3 4 5 6}\")\n\n(defn- valid-call-level [x] (or (#{0 1 2 3 4 5}   x) (throw (ex-info invalid-call-level-msg {:given x :type (type x)}))))\n(defn- valid-min-level  [x] (or (#{0 1 2 3 4 5 6} x) (throw (ex-info invalid-min-level-msg  {:given x :type (type x)}))))\n(comment (enc/qb 1e5 (valid-call-level 4))) ; 7.82\n\n(def ^:dynamic *min-level*\n  \"Integer e/o #{0 1 2 3 4 5 6}, or vector mapping ns-patterns to min-levels:\n    [[<ns-pattern> <min-level>] ... [\\\"*\\\" <default-min-level>]]\n\n  See `*ns-filter*` for example patterns.\"\n  2)\n\n;;;; Namespace filtering\n;; Terminology note: we distinguish loosely between `ns-filter` (which may be a\n;; fn or `ns-pattern`) and `ns-pattern` (subtype of `ns-filter`).\n\n(def ^:dynamic *ns-filter*\n  \"(fn may-profile-ns? [ns]) predicate, or ns-pattern.\n  Example ns-patterns:\n    #{}, \\\"*\\\", \\\"foo.bar\\\", \\\"foo.bar.*\\\", #{\\\"foo\\\" \\\"bar.*\\\"},\n    {:allow #{\\\"foo\\\" \\\"bar.*\\\"} :deny #{\\\"foo.*.bar.*\\\"}}\"\n  \"*\")\n\n(let [fn?         fn?\n      compile     (enc/fmemoize (fn [x] (enc/compile-str-filter x)))\n      conform?*   (enc/fmemoize (fn [x ns] ((compile x) ns)))\n      ;; conform? (enc/fmemoize (fn [x ns] (if (fn? x) (x ns) ((compile x) ns))))\n      conform?\n      (fn [ns-filter ns]\n        (if (fn? ns-filter)\n          (ns-filter           ns) ; Intentionally uncached, can be handy\n          (conform?* ns-filter ns)))]\n\n  (defn- #?(:clj may-profile-ns? :cljs ^boolean may-profile-ns?)\n    \"Implementation detail.\"\n    ([          ns] (if (conform? *ns-filter* ns) true false))\n    ([ns-filter ns] (if (conform?  ns-filter  ns) true false)))\n\n  (def ^:private ns->?min-level\n    \"[[<ns-pattern> <min-level>] ... [\\\"*\\\" <default-min-level>]], ns -> ?min-level\"\n    (enc/fmemoize\n      (fn [specs ns]\n        (enc/rsome\n          (fn [[ns-pattern min-level]]\n            (when (conform?* ns-pattern ns)\n              (valid-min-level min-level)))\n          specs)))))\n\n(comment\n  (enc/qb 1e6\n    (may-profile-ns? \"taoensso.tufte\")\n    (ns->?min-level [[#{\"taoensso.*\" \"foo.bar\"} 1] [\"*\" 2]] \"foo.bar\")) ; [162.85 136.88]\n\n  (binding [*ns-filter* \"foo.baz\"]    (profiled {} (p {:id \"id\"} \"body\")))\n  (binding [*ns-filter* \"taoensso.*\"] (profiled {} (p {:id \"id\"} \"body\"))))\n\n;;;; Combo filtering\n\n(let [valid-min-level valid-min-level\n      ns->?min-level  ns->?min-level]\n\n  (defn- get-min-level [default x ns]\n    (valid-min-level\n      (or\n        (if (vector? x) (ns->?min-level x ns) x)\n        default))))\n\n(comment\n  (get-min-level 6 [[\"foo\" 2]] *ns*) ; Default to 6 (don't profile)\n  (let [ns *ns*] (enc/qb 1e6 (get-min-level *min-level* ns))) ; 260.34\n  (binding [*min-level* [[\"taoensso.*\" 1] [\"*\" 4]]] (get-min-level \"foo\")))\n\n(let [valid-call-level valid-call-level\n      may-profile-ns?  may-profile-ns?\n      get-min-level    get-min-level]\n\n  (defn #?(:clj may-profile? :cljs ^boolean may-profile?)\n    \"Implementation detail.\n    Returns true iff level and ns are runtime unfiltered.\"\n    ([level   ] (may-profile? level *ns*))\n    ([level ns]\n     (if (>= ^long (valid-call-level     level)\n             (long (get-min-level 6 *min-level* ns)))\n       (if (may-profile-ns? *ns-filter* ns) true false)\n       false))))\n\n(comment\n  (enc/qb 1e6 (may-profile? 2)) ; 468.24\n\n  (binding [*min-level* [[\"foo.bar\" 1] [\"*\" 3]]\n            *ns-filter* \"*\"]\n    (may-profile? 2 \"baz\")))\n\n;;;; Compile-time filtering\n\n#?(:clj\n   (def ^:private compile-time-min-level\n     (when-let [level\n                (or\n                  (enc/read-sys-val \"taoensso.tufte.min-level.edn\" \"TAOENSSO_TUFTE_MIN_LEVEL_EDN\")\n                  (enc/read-sys-val \"taoensso.tufte.min-level\"     \"TAOENSSO_TUFTE_MIN_LEVEL\") ; Legacy\n                  (enc/read-sys-val \"TUFTE_MIN_LEVEL\") ; Legacy\n                  )]\n\n       (valid-min-level level)\n       (println (str \"Compile-time (elision) Tufte min-level: \" level))\n       level)))\n\n#?(:clj\n   (def ^:private compile-time-ns-filter\n     (let [ns-pattern\n           (or\n             (enc/read-sys-val \"taoensso.tufte.ns-pattern.edn\" \"TAOENSSO_TUFTE_NS_PATTERN_EDN\")\n             (enc/read-sys-val \"taoensso.tufte.ns-pattern\"     \"TAOENSSO_TUFTE_NS_PATTERN\") ; Legacy\n             (enc/read-sys-val \"TUFTE_NS_PATTERN\") ; Legacy\n             )]\n\n       (when ns-pattern (println (str \"Compile-time (elision) Tufte ns-pattern: \" ns-pattern)))\n       (or   ns-pattern \"*\"))))\n\n#?(:clj\n   (defn -elide?\n     \"Returns true iff level or ns are compile-time filtered.\n     Called only at macro-expansiom time.\"\n     [level-form ns-str-form]\n     (not\n       (and\n         (or ; Level okay\n           (nil? compile-time-min-level)\n           (not (valid-call-level? level-form)) ; Not a compile-time level const\n           (>= (long level-form) (long (get-min-level 6 compile-time-min-level ns-str-form))))\n\n         (or ; Namespace okay\n           (not (string? ns-str-form)) ; Not a compile-time ns-str const\n           (may-profile-ns? compile-time-ns-filter ns-str-form))))))\n\n;;;; Output handlers\n;; Handlers are used for `profile` output, let us nicely decouple stat\n;; creation and consumption.\n\n(defrecord HandlerVal [ns-str level ?id ?data pstats pstats-str_ ?file ?line])\n\n(def         handlers_ \"{<handler-id> <handler-fn>}\" impl/handlers_)\n(defn remove-handler! [handler-id] (set (keys (swap! handlers_ dissoc handler-id))))\n(defn    add-handler!\n  \"Use this to register interest in stats output produced by `profile` calls.\n  Each registered `handler-fn` will be called as:\n\n    (handler-fn {:ns-str _ :level _ :?id _ :?data _ :pstats _ :pstats-str_ _})\n\n  Map args:\n    :ns-str      - Namespace string where `profile` call took place\n    :level       - Level e/o #{0 1 2 3 4 5}, given in `(profile {:level _} ...)`\n    :?id         - Optional group id,        given in `(profile {:id    _} ...)`\n    :?data       - Optional arb data,        given in `(profile {:data  _} ...)`\n    :pstats      - As in `(second (profiled ...))`. Derefable, mergeable.\n    :pstats-str_ - `(delay (format-pstats pstats))\n\n  Error handling (NB):\n    Handler errors will be silently swallowed. Please `try`/`catch` and\n    appropriately deal with (e.g. log) possible errors *within* `handler-fn`.\n\n  Async/blocking:\n    `handler-fn` should ideally be non-blocking, or reasonably cheap. Handler\n     dispatch occurs through a 1-thread 1k-buffer dropping queue.\n\n  Ns filtering:\n    Provide an optional `ns-pattern` arg to only call handler for matching\n    namespaces. See `*ns-filter*` for example patterns.\n\n  Handler ideas:\n    Save to a db, log, `put!` to an appropriate `core.async` channel, filter,\n    aggregate, use for a realtime analytics dashboard, examine for outliers\n    or unexpected output, ...\"\n\n  ([handler-id handler-fn] (add-handler! handler-id nil handler-fn))\n  ([handler-id ns-pattern handler-fn]\n   (let [f\n         (if (or (nil? ns-pattern) (= ns-pattern \"*\"))\n           handler-fn\n           (let [nsf? (enc/compile-str-filter ns-pattern)]\n             (fn [m]\n               (when (nsf? (get m :ns-str))\n                 (handler-fn m)))))]\n\n     (set (keys (swap! handlers_ assoc handler-id f))))))\n\n(declare format-pstats)\n\n(defn add-basic-println-handler!\n  \"Adds a simple handler that logs `profile` stats output with `println`.\"\n  [{:keys [ns-pattern handler-id format-pstats-opts]\n    :or   {ns-pattern \"*\"\n           handler-id :basic-println}}]\n\n  (add-handler! handler-id ns-pattern\n    (fn [{:keys [?id ?data pstats]}]\n      (println\n        (str\n          (when ?id   (str \"\\nid: \"   ?id))\n          (when ?data (str \"\\ndata: \" ?data))\n          \"\\n\" (format-pstats pstats format-pstats-opts))))))\n\n(defn format-id-abbr\n  \"Returns a `format-id-fn` that abbreviates form ids (pids).\n  Takes `n` (default 1), the number of namespace parts to keep unabbreviated.\n\n  Examples:\n    ((format-id-abbr)   :foo)                     => \\\"foo\\\"\n    ((format-id-abbr)   :example.hello/foo)       => \\\"e.hello/foo\\\"\n    ((format-id-abbr 1) :example.hello/foo)       => \\\"e.hello/foo\\\"\n    ((format-id-abbr 1) :example.hello.world/foo) => \\\"e.h.world/foo\\\"\n    ((format-id-abbr 2) :example.hello.world/foo) => \\\"e.hello.world/foo\\\"\n    ((format-id-abbr 0) :example.hello.world/foo) => \\\"e.h.w/foo\\\"\"\n\n  ([ ] (format-id-abbr 1))\n  ([n]\n   (let [n (long (enc/have enc/int? n))]\n     (fn [s]\n       (let [ns-parts (pop (enc/explode-keyword s))\n             cnt      (count ns-parts)\n             sb\n             (enc/reduce-indexed\n               (fn [sb ^long idx in]\n                 (when-not (zero? idx) (enc/sb-append sb \".\"))\n                 (if (<= (- cnt idx) n)\n                   (enc/sb-append sb                 in)\n                   (enc/sb-append sb (enc/get-substr in 0 1))))\n               (enc/str-builder)\n               ns-parts)]\n\n         (when (pos? cnt) (enc/sb-append sb \"/\"))\n         (do              (enc/sb-append sb (enc/str-replace (name s) #\"^defn_\" \"\")))\n         (str sb))))))\n\n;;;; Some low-level primitives\n\n(defn profiling? \"Returns e/o #{nil :thread :dynamic}.\"\n  [] (if impl/*pdata* :dynamic (when (impl/pdata-proxy-get) :thread)))\n\n(comment (enc/qb 1e6 (profiling?))) ; 49.69\n\n(def ^:const ^:private default-nmax 8e5)\n(defn new-pdata\n  \"Note: this is a low-level primitive for advanced users!\n  Returns a new pdata object for use with `with-profiling` and/or `capture-time!`.\n  Deref to get pstats:\n\n    (let [pd (new-pdata)\n          t0 (System/nanoTime)]\n      (with-profiling pd {}\n        (p :foo (Thread/sleep 100))\n        (capture-time! pd :bar (- t0 (System/nanoTime))))\n      @pd)\n\n  Dynamic (thread-safe) by default.\n  *WARNING*: don't change this default unless you're very sure the resulting\n  pdata object will not be concurrently modified across threads. Concurrent\n  modification will lead to bad data and/or exceptions!\"\n  ([] (new-pdata nil))\n  ([{:keys [dynamic? nmax] :or {dynamic? true nmax default-nmax}}]\n   (if dynamic?\n     (impl/new-pdata-dynamic nmax)\n     (impl/new-pdata-local   nmax))))\n\n(comment\n  @@(new-pdata)\n\n  ;; Note that dynamic pdata with non-dynamic `with-profiling` is fine:\n  (let [pd (new-pdata)\n        t0 (System/nanoTime)]\n    (with-profiling pd {}\n      (p :foo (Thread/sleep 100))\n      (capture-time! pd :bar (- t0 (System/nanoTime))))\n    @pd) ; => pstats\n  )\n\n(defmacro with-profiling\n  \"Note: this is a low-level primitive for advanced users!\n  Enables `p` forms in body and returns body's result.\n\n  See `new-pdata` for more info on low-level primitives.\"\n  [pdata {:keys [dynamic? nmax] :or {nmax default-nmax}} & body]\n  (if dynamic?\n    `(binding [impl/*pdata* ~pdata] (do ~@body))\n    `(try\n       (impl/pdata-proxy-push ~pdata)\n       (do ~@body)\n       (finally (impl/pdata-proxy-pop)))))\n\n(defn capture-time!\n  \"Note: this is a low-level primitive for advanced users!\n  Can be useful when tracking time across arbitrary thread boundaries or for\n  async jobs / callbacks / etc.\n\n  See `new-pdata` for more info on low-level primitives.\"\n  ([pdata id nano-secs-elapsed] (impl/capture-time! pdata id nano-secs-elapsed))\n  ([      id nano-secs-elapsed]\n   (when-let [pd (or impl/*pdata* (impl/pdata-proxy-get))]\n     (impl/capture-time! pd id nano-secs-elapsed))))\n\n(comment\n  @(second\n     (profiled {}\n       (let [t0 (System/nanoTime)\n             _  (Thread/sleep 2200)\n             t1 (System/nanoTime)]\n         (capture-time! :foo (- t1 t0)))))\n\n  (let [pd (new-pdata)]\n    (enc/qb 1e6 (capture-time! pd :foo 100))\n    @@pd)\n\n  (let [pd (new-pdata)]\n    (with-profiling pd {}\n      (p :foo (Thread/sleep 100))\n      (p :bar (Thread/sleep 200)))\n    @@pd))\n\n;;;; Core macros\n\n#?(:clj\n   (defmacro profiled\n     \"Always executes body, and always returns [<body-result> <?pstats>].\n\n     When [ns level] unelided and [ns level `when`] unfiltered, executes body\n     with profiling active.\n\n     Handy if you'd like to consume stats output directly.\n     Otherwise see `profile`.\n\n     `pstats` objects are derefable and mergeable:\n       - @pstats                 -> {:stats {:n _ :min _ ...} :clock {:t0 _ :t1 _ :total _}}\n       - @(merge-pstats ps1 ps2) -> {:stats {:n _ :min _ ...} :clock {:t0 _ :t1 _ :total _}}\n\n     Full set of `:stats` keys:\n       :n :min :max :mean :mad :sum :p25 :p50 :p75 :p90 :p95 :p99\n\n     Compile-time opts:\n       :level    - e/o #{0 1 2 3 4 5} ; Default is `5`\n       :dynamic? - Use multi-threaded profiling? ; Default is `false`\n       :nmax     - ~Max captures per id before compaction ; Default is 8e5\n       :when     - Optional arbitrary conditional form (e.g. boolean expr)\n\n     Async code:\n       Execution time of any code in body that runs asynchronously on a\n       different thread will generally NOT be automatically captured by default.\n\n       :dynamic? can be used to support capture in cases where Clojure's\n       binding conveyance applies (e.g. futures, agents, pmap).\n\n       In other advanced cases (notably core.async `go` blocks), please see\n       `with-profiling` and `capture-time!`.\n\n     Laziness:\n       Lazy seqs and other forms of laziness (e.g. delays) will only contribute\n       to profiling results if/when evaluation actually occurs.\n       This is intentional and a useful property. Compare:\n\n       (profiled {}  (delay (Thread/sleep 2000))) ; Doesn't count sleep\n       (profiled {} @(delay (Thread/sleep 2000))) ; Does    count sleep\"\n\n     [opts & body]\n     (let [ns-str (str *ns*)]\n\n       (when-not (map? opts)\n         (throw\n           (ex-info \"`tufte/profiled` requires a compile-time map as first arg.\"\n             {:ns-str ns-str :line (:line (meta &form))\n              :form (cons 'profiled (cons opts body))})))\n\n       (let [level-form (get opts :level    5)\n             dynamic?   (get opts :dynamic? false)\n             test-form  (get opts :when     true)\n             nmax (long (get opts :nmax     default-nmax))]\n\n         (when (integer? level-form) (valid-call-level level-form))\n\n         (if (-elide? level-form ns-str)\n           `[(do ~@body)]\n           (let [runtime-check\n                 (if (= test-form true) ; Common case\n                        `(may-profile? ~level-form ~ns-str)\n                   `(and (may-profile? ~level-form ~ns-str) ~test-form))]\n\n             (if dynamic?\n               `(if ~runtime-check\n                  (let [pd# (impl/new-pdata-dynamic ~nmax)]\n                    (binding [impl/*pdata* pd#]\n                      [(do ~@body) @pd#]))\n                  [(do ~@body)])\n\n               `(if ~runtime-check\n                  (let [pd# (impl/new-pdata-local ~nmax)]\n                    (try\n                      (impl/pdata-proxy-push pd#)\n                      [(do ~@body) @pd#]\n                      (finally (impl/pdata-proxy-pop))))\n                  [(do ~@body)]))))))))\n\n(comment (enc/qb 1e6 (profiled {}))) ; 277.51\n\n#?(:clj\n   (defmacro profile\n     \"Always executes body, and always returns <body-result>.\n\n     When [ns level] unelided and [ns level `when`] unfiltered, executes body\n     with profiling active and dispatches stats to any registered handlers\n     (see `add-handler!`).\n\n     Handy if you'd like to consume/aggregate stats output later/elsewhere.\n     Otherwise see `profiled`.\n\n     Compile-time opts:\n       :level    - e/o #{0 1 2 3 4 5} ; Default is `5`\n       :dynamic? - Use multi-threaded profiling? ; Default is `false`\n       :nmax     - ~Max captures per id before compaction ; Default is 8e5\n       :when     - Optional arbitrary conditional form (e.g. boolean expr)\n       :id       - Optional group id provided to handlers (e.g. `::my-stats-1`)\n       :data     - Optional arbitrary data provided to handlers\n\n     Async code:\n       Execution time of any code in body that runs asynchronously on a\n       different thread will generally NOT be automatically captured by default.\n\n       :dynamic? can be used to support capture in cases where Clojure's\n       binding conveyance applies (e.g. futures, agents, pmap).\n\n       In other advanced cases (notably core.async `go` blocks), please see\n       `with-profiling` and `capture-time!`.\n\n     Laziness:\n       Lazy seqs and other forms of laziness (e.g. delays) will only contribute\n       to profiling results if/when evaluation actually occurs.\n       This is intentional and a useful property. Compare:\n\n       (profiled {}  (delay (Thread/sleep 2000))) ; Doesn't count sleep\n       (profiled {} @(delay (Thread/sleep 2000))) ; Does    count sleep\"\n\n     [opts & body]\n     (let [ns-str (str *ns*)]\n\n       (when-not (map? opts)\n         (throw\n           (ex-info \"`tufte/profile` requires a compile-time map as first arg.\"\n             {:ns-str ns-str :line (:line (meta &form))\n              :form (cons 'profile (cons opts body))})))\n\n       (let [level-form (get opts :level 5)\n             id-form    (get opts :id)\n             data-form  (get opts :data)]\n\n         (when (integer? level-form) (valid-call-level level-form))\n\n         `(let [[result# pstats#] (profiled ~opts ~@body)]\n            (when pstats#\n              (impl/handle!\n                (HandlerVal. ~ns-str ~level-form ~id-form ~data-form\n                  pstats# (delay (format-pstats pstats#))\n                  ~*file* ~(:line (meta &form)))))\n            result#)))))\n\n(comment\n  (profiled {} \"body\")\n  (profiled {:when (chance 0.5)} \"body\")\n  (profile  {:id ::my-id} \"body\"))\n\n#?(:clj\n   (defmacro p\n     \"Profiling spy. Always executes body, and always returns <body-result>.\n\n     When [ns level] unelided and profiling is active, records execution\n     time of body.\n\n     Compile-time opts:\n      :id    - Form id for this body in stats output (e.g. `::my-fn-call`)\n      :level - e/o #{0 1 2 3 4 5} ; Default is `5`\"\n\n     {:arglists '([id & body] [opts & body])}\n     [s1 & body]\n     (let [ns-str  (str *ns*)\n           opts    (if (map? s1) s1 {:level 5 :id s1})\n           level   (get opts :level)\n           id-form (get opts :id)]\n\n       ;; If *any* level is present, it must be a valid compile-time level\n       ;; since this macro doesn't offer runtime level checking\n       (when level (valid-call-level level))\n\n       (when (nil? id-form)\n         (throw\n           (ex-info \"`tufte/p` requires an id.\"\n             {:ns-str ns-str :line (:line (meta &form))\n              :opts opts\n              :form (cons 'p (cons s1 body))})))\n\n       (if (-elide? level ns-str)\n         `(do ~@body)\n         ;; Note no runtime `may-profile?` check\n         `(let [~'__pd-dynamic impl/*pdata*]\n            (if-let [~'__pd (or ~'__pd-dynamic (impl/pdata-proxy-get))]\n              (let [~'__t0     (enc/now-nano*)\n                    ~'__result (do ~@body)\n                    ~'__t1     (enc/now-nano*)]\n\n                ;; Note that `capture-time!` expense is excl. from p time\n                (impl/capture-time! ~'__pd ~id-form (- ~'__t1 ~'__t0))\n\n                ~'__result)\n              (do ~@body)))))))\n\n#?(:clj (defmacro pspy \"`p` alias\" [& args] `(p ~@args)))\n\n(comment\n  (p :p1 \"body\")\n  (profiled {} (p :p1))\n  (profiled {} (p {:level 5 :id :p1}))\n  (profiled {} (p (let [x :foo/id] x) \"body\"))\n  (enc/qb 1e5  (profiled {} 2 (p :p1))) ; 39.5\n  (enc/time-ms (profiled {} 2 (enc/qb 1e6 (p :p1)))) ; 3296\n  (profiled {:level 2 :when (chance 0.5)} (p :p1 \"body\"))\n  (profiled {} (p :foo (p :bar))))\n\n;;;; Public user utils\n\n(defn compile-ns-filter \"Wraps `taoensso.encore/compile-str-filter`.\"\n  [ns-pattern] (enc/compile-str-filter ns-pattern))\n\n(defn chance \"Returns true with 0<`p`<1 probability.\"\n  [p] (< ^double (rand) (double p)))\n\n#?(:clj\n   (defn refer-tufte\n     \"(require '[taoensso.tufte :as tufte :refer [defnp p profiled profile]])\"\n     [] (require '[taoensso.tufte :as tufte :refer [defnp p profiled profile]])))\n\n(comment (refer-tufte))\n\n(defn merge-pstats\n  \"Statistics are lossless unless data to merge are very large.\"\n  ([       ] nil)\n  ([ps0    ] ps0)\n  ([ps0 ps1] (impl/merge-pstats ps0 ps1)))\n\n(comment\n  (let [[_ ps1] (profiled {} (p :p1))\n        [_ ps2] (profiled {} (p :p1))]\n    (enc/qb 1e5 (merge-pstats ps1 ps2))))\n\n(defn format-pstats\n  \"Formats given pstats to a string table.\n    Accounted < Clock => Some work was done that wasn't tracked by any p forms.\n    Accounted > Clock => Nested p forms, and/or parallel threads.\"\n  ([ps     ] (format-pstats ps nil))\n  ([ps opts]\n   (when ps\n     (let [{:keys [clock stats]} (if (instance? PStats ps) @ps ps)]\n       (stats/format-stats (get clock :total) stats opts)))))\n\n(comment\n  ;; [:n-calls :min :p25 :p50 :p75 :p90 :p95 :p99 :max :mean :mad :clock :total]\n  (println\n    (str \"\\n\"\n      (format-pstats\n        (second\n          (profiled {}\n            (p :foo (Thread/sleep 200))\n            (p :bar (Thread/sleep 500))\n            (do     (Thread/sleep 800))))\n        {:columns [:clock :p50 :p95]}))))\n\n;;;; fnp stuff\n\n(defn- fn-sigs [def? ?meta-pid fn-sym sigs]\n  (let [single-arity? (vector? (first sigs))\n        sigs    (if single-arity? (list sigs) sigs)\n        base-id\n        (if ?meta-pid\n          (enc/as-qname ?meta-pid)\n          (str *ns* \"/\" (if def? \"defn_\" \"fn_\") (name fn-sym)))\n\n        get-id\n        (if single-arity?\n          (fn [fn-sym _params] (keyword      base-id))\n          (fn [fn-sym  params] (keyword (str base-id \"_\" (count params)))))\n\n        new-sigs\n        (map\n          (fn [[params & others]]\n            (let [has-prepost-map?      (and (map? (first others)) (next others))\n                  [?prepost-map & body] (if has-prepost-map? others (cons nil others))]\n              (if ?prepost-map\n                `(~params ~?prepost-map (p ~(get-id fn-sym params) ~@body))\n                `(~params               (p ~(get-id fn-sym params) ~@body)))))\n          sigs)]\n    new-sigs))\n\n(defmacro fnp \"Like `fn` but wraps fn bodies with `p` macro.\"\n  {:arglists '([name?  [params*] prepost-map? body]\n               [name? ([params*] prepost-map? body)+])}\n  [& sigs]\n  (let [[?fn-sym sigs] (if (symbol? (first sigs)) [(first sigs) (next sigs)] [nil sigs])\n        new-sigs       (fn-sigs (not :def) (:tufte/id (meta ?fn-sym)) (or ?fn-sym (gensym \"\")) sigs)]\n    (if ?fn-sym\n      `(fn ~?fn-sym ~@new-sigs)\n      `(fn          ~@new-sigs))))\n\n(comment\n  (fn-sigs \"foo\"       '([x]            (* x x)))\n  (macroexpand '(fnp     [x]            (* x x)))\n  (macroexpand '(fn      [x]            (* x x)))\n  (macroexpand '(fnp bob [x] {:pre [x]} (* x x)))\n  (macroexpand '(fn      [x] {:pre [x]} (* x x)))\n  (macroexpand '(fnp   ^{:tufte/id \"foo/bar\"} bob  [x]))\n  (macroexpand '(defnp ^{:tufte/id \"foo/bar\"} bob ([x]) ([x y])))\n  (macroexpand '(defnp                        bob ([x]) ([x y]))))\n\n(defmacro defnp \"Like `defn` but wraps fn bodies with `p` macro.\"\n  {:arglists\n   '([name doc-string? attr-map?  [params*] prepost-map? body]\n     [name doc-string? attr-map? ([params*] prepost-map? body)+ attr-map?])}\n  [& sigs]\n  (let [[fn-sym sigs] (enc/name-with-attrs (first sigs) (next sigs))\n        new-sigs      (fn-sigs :def (:tufte/id (meta fn-sym)) fn-sym sigs)]\n    `(defn ~fn-sym ~@new-sigs)))\n\n(defmacro defnp- \"Like `defn-` but wraps fn bodies with `p` macro.\"\n  {:arglists\n   '([name doc-string? attr-map?  [params*] prepost-map? body]\n     [name doc-string? attr-map? ([params*] prepost-map? body)+ attr-map?])}\n  [& sigs]\n  (let [[fn-sym sigs] (enc/name-with-attrs (first sigs) (next sigs) {:private true})\n        new-sigs      (fn-sigs :def (:tufte/id (meta fn-sym)) fn-sym sigs)]\n    `(defn ~fn-sym ~@new-sigs)))\n\n(comment\n  (defnp foo \"Docstring\"                [x]   (* x x))\n  (macroexpand '(defnp foo \"Docstring\"  [x]   (* x x)))\n  (macroexpand '(defn  foo \"Docstring\"  [x]   (* x x)))\n  (macroexpand '(defnp foo \"Docstring\" ([x]   (* x x))\n                                       ([x y] (* x y))))\n  (profiled {} (foo 5)))\n\n;;;; Stats accumulators (experimental)\n\n(defn- sacc-drain-and-merge! [pstats_] (enc/reset-in! pstats_ {}))\n(defn- sacc-add!             [pstats_ group-id ps]\n  (when (and group-id ps)\n    ;; Contention would be expensive, consumer should serialize:\n    (swap! pstats_ (fn [m] (assoc m group-id (impl/merge-pstats (get m group-id) ps))))\n    true))\n\n(deftype StatsAccumulator [pstats_] ; {<group-id> <pstats>}\n  #?@(:clj  [clojure.lang.IFn  (invoke [_ group-id ps] (sacc-add! pstats_ group-id ps))]\n      :cljs [             IFn (-invoke [_ group-id ps] (sacc-add! pstats_ group-id ps))])\n  #?@(:clj  [clojure.lang.IDeref  (deref [_] (sacc-drain-and-merge! pstats_))]\n      :cljs [             IDeref (-deref [_] (sacc-drain-and-merge! pstats_))]))\n\n(defn stats-accumulator\n  \"Alpha, subject to change.\n  Small util to help merge pstats from multiple runs or threads.\n\n  Returns a stateful StatsAccumulator (`sacc`) with:\n    - `(sacc <group-id> <pstats>)` ; Merges given pstats under given group id\n    - `@sacc`                      ; Drains accumulator and returns {<group-id> <merged-pstats>}\n\n  Note that you may want some kind of async/buffer/serialization\n  mechanism in front of merge calls for performance (e.g. by using an agent).\n\n  See also `add-accumulating-handler!`, example clj project.\"\n\n  [] (StatsAccumulator. (atom {})))\n\n(comment\n  (enc/qb 1e6 (stats-accumulator)) ; 66.75\n  (let [sacc (stats-accumulator)]\n    (sacc :profiled1 (second (profiled {} (p :p1))))\n    (Thread/sleep 100)\n    (sacc :profiled2 (second (profiled {} (p :p2))))\n    [@sacc @sacc]))\n\n(defn add-accumulating-handler!\n  \"Alpha, subject to change.\n\n  Creates a new StatsAccumulator (and agent in clj), then\n  registers a handler to accumulate `profile` output to the\n  StatsAccumulator using the agent.\n\n  Returns the StatsAccumulator. You can deref the result to\n  drain the accumulator and return {<group-id> <merged-pstats>}.\n\n  One common pattern is to deref the accumulator every n\n  minutes/etc. to get a view of total-system performance over\n  the period, e.g.:\n\n  (defonce my-sacc (add-accumulating-handler! \\\"*\\\"))\n  (defonce my-sacc-drainer\n    ;; Will drain and print formatted stats every minute\n    (future\n      (while true\n        (when-let [m (not-empty @my-sacc)]\n          (println (format-grouped-pstats m)))\n        (Thread/sleep 60000))))\n\n  (profile ...) ; Used elsewhere in your application, e.g.\n                ; wrapping relevant Ring routes in a web application.\n\n  See also `format-grouped-pstats`, example clj project.\"\n\n  [{:keys [ns-pattern handler-id]\n    :or   {handler-id :accumulating}}]\n\n  (let [sacc   (stats-accumulator)\n        agent_ #?(:clj (delay (agent nil :error-mode :continue)) :cljs nil)]\n\n    (add-handler! handler-id ns-pattern\n      (fn [{:keys [?id ?data pstats]}]\n        (let [id (or ?id :tufte/nil-id)]\n          #?(:clj (send @agent_ (fn [_] (sacc id pstats)))\n             :cljs                      (sacc id pstats)))))\n\n    sacc))\n\n(comment\n  (def my-sacc (add-accumulating-handler! \"*\"))\n  (future (profile {}         (p :p1 (Thread/sleep 900))))\n  (future (profile {:id :foo} (p :p1 (Thread/sleep 900))))\n  (future (profile {:id :bar} (p :p1 (Thread/sleep 500))))\n  (println (format-grouped-pstats @my-sacc {}\n             #_{:format-pstats-opts {:columns [:n-calls]}})))\n\n(defn format-grouped-pstats\n  \"Alpha, subject to change.\n  Takes a map of {<group-id> <PStats>} and formats a combined\n  output string using `format-pstats`.\n\n  See also example clj project.\"\n  ([m] (format-grouped-pstats m nil))\n  ([m {:keys [group-sort-fn format-pstats-opts]\n       :or   {group-sort-fn (fn [m] (get-in m [:clock :total] 0))}}]\n\n   (when m\n     (let [m ; {<group-id> <realised-pstats>}\n           (persistent!\n             (reduce-kv\n               (fn [m k v] (assoc! m k (enc/force-ref v)))\n               (transient m)\n               m))\n\n           sorted-group-ids\n           (sort-by (fn [id] (group-sort-fn (get m id)))\n             enc/rcompare (keys m))\n\n           ^long max-id-width\n           (reduce-kv\n             (fn [^long acc _ {:keys [clock stats]}]\n               (if-let [c (stats/get-max-id-width stats format-pstats-opts)]\n                 (if (> (long c) acc) c acc)\n                 acc))\n             0\n            m)]\n\n       (enc/str-join \"\\n\\n\"\n         (map (fn [id] (str id \",\\n\" (format-pstats (get m id) (assoc format-pstats-opts :max-id-width max-id-width)))))\n         sorted-group-ids)))))\n\n(comment\n  (future\n    (while true\n      (when-let [m (not-empty @my-sacc)]\n        (println (format-grouped-pstats m)))\n      (Thread/sleep 10000))))\n\n;;;; Deprecated\n\n(enc/deprecated\n  (defmacro with-min-level  \"Deprecated, just use `binding`\" [level & body] `(binding [*min-level* ~level] ~@body))\n  (defn      set-min-level! \"Deprecated, just use `alter-var-root`\" [level]\n    #?(:cljs (set!             *min-level*         level)\n       :clj  (alter-var-root #'*min-level* (fn [_] level))))\n\n  (defmacro with-ns-pattern  \"Deprecated, just use `binding`\" [ns-pattern & body] `(binding [*ns-filter* ~ns-pattern] ~@body))\n  (defn      set-ns-pattern! \"Deprecated, just use `alter-var-root`\" [ns-pattern]\n    #?(:cljs (set!             *ns-filter*         ns-pattern)\n       :clj  (alter-var-root #'*ns-filter* (fn [_] ns-pattern)))))\n\n;;;;\n\n(comment\n  (add-basic-println-handler! {})\n  (defn sleepy-threads []\n    (dotimes [n 5]\n      (Thread/sleep 100) ; Unaccounted\n      (p :future/outer @(future (Thread/sleep 500)))\n      @(future (p :future/inner (Thread/sleep 500)))\n      (p :1ms  (Thread/sleep 1))\n      (p :2s   (Thread/sleep 2000))\n      (p :50ms (Thread/sleep 50))\n      (p :rand (Thread/sleep (if (> 0.5 (rand)) 10 500)))\n      (p :10ms (Thread/sleep 10))\n      \"Result\"))\n\n  (profile {:level 2 :id ::sleepy :data \"foo\"}    (sleepy-threads))\n  (profile {:level 2 :id ::sleepy :dynamic? true} (sleepy-threads))\n  (p :hello \"Hello, this is a result\") ; Falls through (no pdata context)\n\n  (defnp arithmetic\n    []\n    (let [nums (vec (range 1000))]\n      (+ (p :fast-sleep (Thread/sleep 1) 10)\n         (p :slow-sleep (Thread/sleep 2) 32)\n         (p :add  (reduce + nums))\n         (p :sub  (reduce - nums))\n         (p :mult (reduce * nums))\n         (p :div  (reduce / nums)))))\n\n  (profiled {} \"foo\")\n  (profile  {} (dotimes [n 100] (arithmetic)))\n  (profile  {} (dotimes [n 1e5] (p :p1 nil)))\n  (profile  {} (dotimes [n 1e6] (p :p1 nil)))\n  (profiled {} (dotimes [n 1e6] (p :p1 nil)))\n  (profiled {:level 2 :when (chance 0.5)} \"body\")\n\n  @(second (profiled {:nmax 10000 :dynamic? true} (dotimes [n 200] (p :p1 nil))))\n\n  (profile {})\n  (profile {:nmax 10}                (dotimes [n 200] (p :p1 nil)))\n  (profile {:nmax 10 :dynamic? true} (dotimes [n 200] (p :p1 nil)))\n  (profile {}\n    (p :foo\n      (do       (Thread/sleep 100))\n      (p :foo/a (Thread/sleep 120))\n      (p :foo/b (Thread/sleep 220))))\n\n  (println \"\\n\" (format-pstats (second (profiled {} (p :p1 (p :p2 (p :p3 \"foo\")))))))\n  (println \"\\n\"\n    (time\n      (format-pstats\n        @(let [[_ ps0] (profiled {} (dotimes [_ 1e6] (p :foo  \"foo\")))\n               [_ ps1] (profiled {} (dotimes [_ 1e6] (p :foo  \"foo\")))\n               [_ ps2] (profiled {} (dotimes [_ 500] (p ::bar \"bar\")))]\n           (reduce (partial impl/merge-pstats 1e4) [ps0 ps1 ps2])))))\n\n  (println\n    (format-pstats\n      (second\n        (profiled {} (p :foo (Thread/sleep 100)))))))\n\n(comment ; Disjoint time union\n  (let [[_ ps1] (profiled {} (p :foo (Thread/sleep 100)))\n        _ (Thread/sleep 500)\n        [_ ps2] (profiled {} (p :foo (Thread/sleep 100)))]\n    (println (format-pstats (merge-pstats ps2 ps1)))\n    ;;@(merge-pstats ps2 ps1)\n    ))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["taoensso.encore/assert-min-encore-version","taoensso.tufte/valid-call-level?","x","fexpr__34878","taoensso.tufte/valid-min-level?","fexpr__34879","taoensso.tufte/invalid-call-level-msg","taoensso.tufte/invalid-min-level-msg","taoensso.tufte/valid-call-level","or__4253__auto__","fexpr__34882","cljs.core.ex_info","cljs.core/type","taoensso.tufte/valid-min-level","fexpr__34883","taoensso.tufte/*min-level*","taoensso.tufte/*ns-filter*","fn?","cljs.core/fn?","compile","taoensso.encore/fmemoize","taoensso.encore/compile-str-filter","conform?*","ns","fexpr__34885","conform?","ns-filter","var_args","G__34888","taoensso.tufte/may-profile-ns?","js/Error","taoensso.tufte/ns->?min-level","specs","taoensso.encore/rsome","p__34892","vec__34893","cljs.core.nth","ns-pattern","min-level","valid-min-level","ns->?min-level","taoensso.tufte/get-min-level","default","G__34900","cljs.core/vector?","valid-call-level","may-profile-ns?","get-min-level","G__34904","taoensso.tufte/may-profile?","level","taoensso.tufte.may_profile_QMARK_","cljs.core/*ns*","cljs.core/long","this__4502__auto__","k__4503__auto__","this__4504__auto__","k34908","else__4505__auto__","G__34916","cljs.core/Keyword","ns-str","?id","?data","pstats","pstats-str_","?file","?line","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__34921","vec__34922","k__4526__auto__","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__34907","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this34909","other34910","cljs.core._EQ_","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__34925","this__4510__auto__","k__4511__auto__","pred__34929","cljs.core/keyword-identical?","expr__34930","cljs.core.assoc","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/-nth","cljs.core/-conj","taoensso.tufte/HandlerVal","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__34914","extmap__4542__auto__","G__34934","cljs.core/record?","taoensso.tufte/->HandlerVal","taoensso.tufte/map->HandlerVal","taoensso.tufte/handlers_","taoensso.tufte.impl/handlers_","taoensso.tufte/remove-handler!","handler-id","cljs.core/set","cljs.core/keys","cljs.core.swap_BANG_","cljs.core/dissoc","G__34936","taoensso.tufte/add-handler!","handler-fn","taoensso.tufte.add_handler_BANG_","f","nsf?","m","cljs.core/assoc","p__34939","map__34940","cljs.core/--destructure-map","taoensso.tufte/add-basic-println-handler!","format-pstats-opts","p__34941","map__34942","cljs.core.println","taoensso.tufte/format-pstats","G__34948","taoensso.tufte/format-id-abbr","taoensso.tufte.format_id_abbr","n","e","taoensso.truss.impl/-dummy-error","e34951","taoensso.truss.impl/-invar-violation!","taoensso.encore/int?","s","ns-parts","cljs.core/pop","taoensso.encore/explode-keyword","cnt","sb","taoensso.encore/reduce-indexed","idx","in","taoensso.encore.sb_append","taoensso.encore.get_substr","taoensso.encore.str_builder","taoensso.encore/str-replace","cljs.core/name","taoensso.tufte/profiling?","taoensso.tufte.impl/*pdata*","taoensso.tufte.impl/pdata-proxy-get","taoensso.tufte/default-nmax","G__34958","taoensso.tufte/new-pdata","p__34959","map__34960","taoensso.tufte.new_pdata","dynamic?","nmax","taoensso.tufte.impl/new-pdata-dynamic","taoensso.tufte.impl/new-pdata-local","G__34964","taoensso.tufte/capture-time!","pdata","id","nano-secs-elapsed","taoensso.tufte.impl/capture-time!","temp__5753__auto__","pd","taoensso.tufte/compile-ns-filter","taoensso.tufte/chance","p","cljs.core.rand","G__34979","taoensso.tufte/merge-pstats","ps0","ps1","taoensso.tufte.impl.merge_pstats","G__34988","ps","taoensso.tufte.format_pstats","opts","map__34989","clock","stats","cljs.core/deref","taoensso.tufte.impl/PStats","taoensso.tufte.stats/format-stats","taoensso.tufte/fn-sigs","def?","?meta-pid","fn-sym","sigs","single-arity?","cljs.core/first","base-id","taoensso.encore/as-qname","get-id","_params","cljs.core.keyword","params","new-sigs","cljs.core.map","p__34992","vec__34993","seq__34994","first__34995","cljs.core/next","others","vec__34996","seq__34997","first__34998","has-prepost-map?","cljs.core/map?","?prepost-map","body","cljs.core/cons","cljs.core.sequence","taoensso.tufte/sacc-drain-and-merge!","pstats_","taoensso.encore.reset_in_BANG_","taoensso.tufte/sacc-add!","group-id","and__4251__auto__","unused__9632__auto__","self__","G__35005","args35003","cljs.core/aclone","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","taoensso.tufte/StatsAccumulator","taoensso.tufte/->StatsAccumulator","_","taoensso.tufte/stats-accumulator","cljs.core.atom","p__35009","map__35010","taoensso.tufte/add-accumulating-handler!","sacc","agent_","p__35013","map__35014","G__35017","taoensso.tufte/format-grouped-pstats","p__35022","map__35023","taoensso.tufte.format_grouped_pstats","group-sort-fn","cljs.core.get_in","cljs.core/persistent!","cljs.core/reduce-kv","k","v","cljs.core.assoc_BANG_","taoensso.encore/force-ref","cljs.core/transient","sorted-group-ids","cljs.core.sort_by","G__35024","taoensso.encore/rcompare","max-id-width","p__35025","map__35026","acc","temp__5751__auto__","c","taoensso.tufte.stats/get-max-id-width","taoensso.encore.str_join","ret__4913__auto__","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","taoensso.tufte/with-min-level","&form","&env","cljs.core/vec","seq35027","G__35028","G__35029","G__35030","self__4851__auto__","taoensso.tufte/set-min-level!","taoensso.tufte/with-ns-pattern","seq35035","G__35036","G__35037","G__35038","taoensso.tufte/set-ns-pattern!"]],"~:used-vars",["^H",["~$cljs.core/--destructure-map","~$cljs.core/keyword","~$taoensso.encore/fmemoize","~$taoensso.tufte.impl/handlers_","~$taoensso.tufte/new-pdata","~$cljs.core/pr-sequential-writer","~$taoensso.tufte/set-min-level!","~$cljs.core/vector?","~$taoensso.tufte/ns->?min-level","~$taoensso.tufte/valid-call-level?","~$cljs.core/=","~$cljs.core/keys","~$taoensso.encore/str-builder","~$cljs.core/-assoc","~$taoensso.truss.impl/-invar-violation!","~$cljs.core/-write","~$taoensso.tufte/may-profile-ns?","~$taoensso.tufte/compile-ns-filter","~$cljs.core/IndexedSeq","~$cljs.core/-iterator","~$taoensso.encore/rsome","~$cljs.core/count","~$taoensso.encore/as-qname","~$taoensso.tufte.impl/new-pdata-dynamic","~$cljs.core/deref","~$taoensso.tufte.impl/*pdata*","~$taoensso.encore/sb-append","~$taoensso.tufte.impl/merge-pstats","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/Keyword","~$cljs.core/rand","~$cljs.core/aclone","~$taoensso.tufte.stats/format-stats","~$taoensso.tufte/invalid-call-level-msg","^1F","~$taoensso.encore/explode-keyword","~$cljs.core/MapEntry","~$cljs.core/dissoc","~$taoensso.tufte/->HandlerVal","~$taoensso.tufte/stats-accumulator","~$cljs.core/keyword-identical?","~$taoensso.tufte/->StatsAccumulator","~$cljs.core/atom","~$cljs.core/-with-meta","~$cljs.core/concat","~$cljs.core/pop","~$taoensso.tufte/capture-time!","~$taoensso.tufte/valid-call-level","~$taoensso.tufte/*min-level*","~$taoensso.truss.impl/-dummy-error","~$cljs.core/set","~$taoensso.tufte/add-handler!","~$taoensso.tufte/valid-min-level?","~$taoensso.tufte/merge-pstats","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$taoensso.encore/get-substr","~$taoensso.encore/str-replace","~$cljs.core/-conj","~$taoensso.tufte/sacc-drain-and-merge!","~$taoensso.tufte/default-nmax","~$taoensso.tufte/sacc-add!","~$cljs.core/map","~$taoensso.tufte.impl/PStats","~$taoensso.tufte/invalid-min-level-msg","~$taoensso.encore/assert-min-encore-version","~$cljs.core/fn?","~$cljs.core/PersistentVector","~$taoensso.tufte/fn-sigs","~$cljs.core/get-in","~$cljs.core/List","~$taoensso.tufte/chance","~$cljs.core/swap!","~$taoensso.tufte.impl/capture-time!","~$cljs.core/long","~$cljs.core/get","~$taoensso.tufte/get-min-level","~$cljs.core/-nth","~$taoensso.encore/reduce-indexed","~$taoensso.tufte.stats/get-max-id-width","~$taoensso.tufte/set-ns-pattern!","~$taoensso.tufte/add-basic-println-handler!","~$cljs.core/not-empty","~$taoensso.tufte/format-grouped-pstats","~$taoensso.encore/force-ref","~$taoensso.encore/rcompare","~$taoensso.tufte/*ns-filter*","~$cljs.core/record?","~$cljs.core/persistent!","~$taoensso.tufte/format-id-abbr","~$cljs.core/-lookup","~$cljs.core/nth","~$cljs.core/ex-info","~$taoensso.tufte/may-profile?","~$cljs.core/nil-iter","~$taoensso.encore/str-join","~$cljs.core/println","~$taoensso.tufte/remove-handler!","~$cljs.core/next","~$cljs.core/vec","~$taoensso.tufte/handlers_","~$cljs.core/RecordIter","~$cljs.core/transient","~$taoensso.tufte/HandlerVal","~$cljs.core/sequence","~$cljs.core/not","~$taoensso.encore/reset-in!","~$cljs.core/cons","~$cljs.core/assoc","~$taoensso.tufte/StatsAccumulator","~$taoensso.tufte.impl/pdata-proxy-get","^1=","~$cljs.core/reduce-kv","~$cljs.core/hash-unordered-coll","~$taoensso.tufte/profiling?","~$taoensso.tufte/format-pstats","~$taoensso.tufte/valid-min-level","~$cljs.core/first","~$taoensso.encore/compile-str-filter","~$taoensso.tufte/add-accumulating-handler!","~$cljs.core/sort-by","~$cljs.core/assoc!","~$cljs.core/*ns*","~$cljs.core/name","~$js/Error","~$cljs.core/type","~$taoensso.tufte.impl/new-pdata-local","~$taoensso.tufte/map->HandlerVal","~$taoensso.encore/int?"]]],"~:cache-keys",["~#cmap",[["^25","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^1R","~$goog.dom.HtmlElement"]]],["^25","goog/async/freelist.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^25","goog/timer/timer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^25","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","~$clojure.string","~$goog.string"]]],["^25","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.asserts"]]],["^25","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5K"]]],["^25","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^25","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.array","~$goog.object","^5F","^5E"]]],["^25","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5E"]]],["^25","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L"]]],["^25","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5F","~$goog.reflect","^5E"]]],["^25","goog/structs/prioritypool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^25","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.events.Event","~$goog.events.EventId"]]],["^25","goog/async/run.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^25","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/async/workqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.async.FreeList","^5L"]]],["^25","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^5M","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^62","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^25","goog/promise/resolver.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5G"]]],["^25","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^5K","~$goog.string.StringBuffer"]]],["^25","goog/structs/priorityqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.structs.Heap"]]],["^25","goog/net/xhrio.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.Timer","^5O","^5L","~$goog.collections.maps","^67","^5H","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^5P","^5K","~$goog.uri.utils","^5N","~$goog.Uri","^6;","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^25","goog/promise/thenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5G"]]],["^25","goog/collections/iters.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q"]]],["^25","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^6A","^6B","^6C","^6@","^5O","^5K","^6E"]]],["^25","goog/net/wrapperxmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^6Q","^6R"]]],["^25","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.Disposable","^5L","~$goog.events","^61","^69","^6:","^5P","^62","^6<","^6>"]]],["^25","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^25","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L"]]],["^25","taoensso/encore.cljc"],["b3323c27a5e52116fd63b18ea4641ed8c11c9177","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^5J","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^5P","^5K","~$goog.string.format","^6E","^6T","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^6L","^6K","~$taoensso.truss"]]],["^25","goog/structs/set.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1645584859000,1645584859000,1645584856000],["^25","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","^5Z"]]],["^25","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^6>","^69"]]],["^25","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","~$goog.fs.blob","^5Q","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5S","^5T","^5U","^5V"]]],["^25","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5O","^6?","^5P","^62","^69","^6>"]]],["^25","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","~$taoensso.truss.impl"]]],["^25","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^25","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5U","~$goog.html.SafeUrl","^5V","^5L","^5E"]]],["^25","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^7:","~$goog.html.SafeStyle","^7?","^5R","~$goog.html.uncheckedconversions","^5U","^5E"]]],["^25","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^6X"]]],["^25","goog/net/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/structs/map.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.collections.iters","^77","~$goog.iter.StopIteration","~$goog.iter.es6"]]],["^25","goog/net/xhriopool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^70","~$goog.structs.PriorityPool","^76"]]],["^25","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5U","^5S","^5T","^7:","^7C","~$goog.html.SafeStyleSheet","^7?","~$goog.dom.TagName","^5R","^5V","^5L","^5W","^5O","^5P","^5E","~$goog.dom.tags","^7;"]]],["^25","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5P"]]],["^25","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/structs/queue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5O"]]],["^25","taoensso/tufte.cljc"],["60974123ff1b7e18d1665f5f0ea6393d4f6250ff","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^1K","^1M","^1O"]]],["^25","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5O","^5E","^5F"]]],["^25","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","cljs/reader.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^5P","^6D","^6Z","^6E"]]],["^25","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5O","^5L","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^7J","~$goog.dom.safe","^7B","^7D","~$goog.math.Coordinate","~$goog.math.Size","^5P","^5K","^5U","~$goog.string.Unicode","^5N"]]],["^25","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.debug.Error","^7M"]]],["^25","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5O","^5L","^6H","^5K","^74","^6O","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^25","goog/net/errorcode.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/iter/es6.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.iter.Iterable","^77","^7F"]]],["^25","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^6S","^5L","~$goog.debug.EntryPointMonitor","^7R"]]],["^25","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/promise/promise.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5I","^5L","^66","~$goog.async.run","^65","^7R","~$goog.promise.Resolver"]]],["^25","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",[]]],["^25","goog/json/hybrid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","~$goog.json"]]],["^25","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5O","^5P"]]],["^25","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^6A","^5J","~$cljs.tools.reader.impl.inspect"]]],["^25","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","clojure/string.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^5K","^6E"]]],["^25","goog/structs/pool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^6S","~$goog.structs.Queue","~$goog.structs.Set"]]],["^25","goog/net/httpstatus.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/structs/heap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5O","^5P","~$goog.structs.Node"]]],["^25","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L"]]],["^25","taoensso/tufte/impl.cljc"],["60974123ff1b7e18d1665f5f0ea6393d4f6250ff","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^5J","^1K","^1M"]]],["^25","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^7N","^7D","^5U","^5E"]]],["^25","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.labs.userAgent","^5E"]]],["^25","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5O","~$goog.debug.errorcontext"]]],["^25","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.math"]]],["^25","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^6B","^5K","^6E"]]],["^25","goog/iter/iter.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5O","^5L","~$goog.debug","^7A","^84"]]],["^25","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","taoensso/tufte/stats.cljc"],["60974123ff1b7e18d1665f5f0ea6393d4f6250ff","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^1K","^5J","^5O"]]],["^25","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^67","~$goog.dom","^7J","^7A","^5W","^5X"]]],["^25","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","^7B","^7:","^7C","^7I","^7?","^5R","^5U","^5E","^5S"]]],["^25","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^6S","^62"]]],["^25","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q","^6@","^6A","^6B"]]],["^25","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^6S","^6T","^5P","^61","^62","^5H","^6="]]],["^25","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","cljs/core.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","~$goog.math.Long","~$goog.math.Integer","^5K","^5P","^5O","^6P","^6E"]]],["^25","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5U","^5V","^7;","^5L"]]],["^25","goog/log/log.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","^85"]]],["^25","goog/async/throwexception.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5U","^7C","^5V","^5P","^5L","^5E"]]],["^25","goog/structs/collection.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^85","^61","~$goog.events.EventType","^5Z","^5N"]]],["^25","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5Z"]]],["^25","goog/structs/node.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5N"]]],["^25","clojure/set.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^1Q"]]],["^25","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","^5K"]]],["^25","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","^5V"]]],["^25","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^6V"]]],["^25","goog/json/json.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]],["^25","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^62","^6<","^6>"]]],["^25","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^69"]]],["^25","goog/net/xmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^6Q"]]],["^25","goog/net/xmlhttp.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R","^5L","~$goog.net.WrapperXmlHttpFactory","^6R","^6Q"]]],["^25","goog/net/xhrlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5@",["^ ","^5A",null,"^5B",["^H",[]],"^5C",["^1R"]]]]],"~:clj-info",["^ ","jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1627912789000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/impl.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/passes/and_or.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/com/taoensso/tufte/2.2.0/tufte-2.2.0.jar!/taoensso/tufte/impl.cljc",1619058311000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map/base64.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/instant.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/js_deps.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1619058311000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/core.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/reader.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/externs.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/compiler.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/com/taoensso/tufte/2.2.0/tufte-2.2.0.jar!/taoensso/tufte/stats.cljc",1619058311000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/com/taoensso/tufte/2.2.0/tufte-2.2.0.jar!/taoensso/tufte.cljc",1619058311000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map/base64_vlq.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/tagged_literals.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/env.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1619058311000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/util.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/passes.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/com/taoensso/encore/3.1.0/encore-3.1.0.jar!/taoensso/encore.cljc",1619058311000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1630576733000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Peter Taoussanis (@ptaoussanis)","^7","A simple, fast, monitoring profiler for Clojure/Script.\n\n  Usage: wrap+name interesting body exprs with the `p` macro. Then activate\n  profiling of these wrapped exprs using the `profiled` or `profile` macros:\n\n    (profiled {} (p :my-fn (my-fn))) ; Returns [<body-result> <?pstats>]\n    (profile  {} (p :my-fn (my-fn))) ; Returns  <body-result>, dispatches\n                                     ; ?pstats to any registered handlers.\n\n  Extensive facilities are provided for compile-time elision and runtime\n  filtering.\n\n  See the relevant docstrings for more info:\n    `p`, `profiled`, `profile`, `add-handler!` ; Core API\n\n    (p        [opts & body] [id & body]) ; e.g. `(p ::my-pid (do-work))`\n    (profiled [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n    (profile  [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n\n    (add-handler! [handler-id ns-pattern handler-fn])\n\n  How/where to use this library:\n    Tufte profiling is highly optimized: even without elision, you can usually\n    leave profiling enabled in production (e.g. for sampled profiling, or to\n    detect unusual performance behaviour). Tufte's stats maps are well suited\n    to programmatic monitoring.\n\n  Abbreviations, etc.\n    - form  id = pid = id given in `p`\n    - group id = gid = id given in `profile`","^8","taoensso/tufte.cljc","^9",1,"^:",5,"^;",1,"^<",19],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"^D",["^ ","^E","^F"],"^G",["^H",[]],"^I",["^ ","^J",["^ ","^K",["^L",[["^M","^N","^O",["^P"],"^Q","^R"],["^M","^N","^O",["^L",[["^P"],"^Q","^R"]],"~$+","^O"]]],"^7","Like `defn` but wraps fn bodies with `p` macro.","^9",679,"^:",1,"^8","taoensso/tufte.cljc","^S","^T","^U","^F","^V",true],"~$p",["^ ","^K",["^L",[["^W","~$&","^R"],["^X","~$&","^R"]]],"^7","Profiling spy. Always executes body, and always returns <body-result>.\n\n     When [ns level] unelided and profiling is active, records execution\n     time of body.\n\n     Compile-time opts:\n      :id    - Form id for this body in stats output (e.g. `::my-fn-call`)\n      :level - e/o #{0 1 2 3 4 5} ; Default is `5`","^9",530,"^:",4,"^8","taoensso/tufte.cljc","^S","^Y","^U","^F","^V",true],"^Z",["^ ","^K",["^L",[["^X","~$&","^R"]]],"^7","Always executes body, and always returns <body-result>.\n\n     When [ns level] unelided and [ns level `when`] unfiltered, executes body\n     with profiling active and dispatches stats to any registered handlers\n     (see `add-handler!`).\n\n     Handy if you'd like to consume/aggregate stats output later/elsewhere.\n     Otherwise see `profiled`.\n\n     Compile-time opts:\n       :level    - e/o #{0 1 2 3 4 5} ; Default is `5`\n       :dynamic? - Use multi-threaded profiling? ; Default is `false`\n       :nmax     - ~Max captures per id before compaction ; Default is 8e5\n       :when     - Optional arbitrary conditional form (e.g. boolean expr)\n       :id       - Optional group id provided to handlers (e.g. `::my-stats-1`)\n       :data     - Optional arbitrary data provided to handlers\n\n     Async code:\n       Execution time of any code in body that runs asynchronously on a\n       different thread will generally NOT be automatically captured by default.\n\n       :dynamic? can be used to support capture in cases where Clojure's\n       binding conveyance applies (e.g. futures, agents, pmap).\n\n       In other advanced cases (notably core.async `go` blocks), please see\n       `with-profiling` and `capture-time!`.\n\n     Laziness:\n       Lazy seqs and other forms of laziness (e.g. delays) will only contribute\n       to profiling results if/when evaluation actually occurs.\n       This is intentional and a useful property. Compare:\n\n       (profiled {}  (delay (Thread/sleep 2000))) ; Doesn't count sleep\n       (profiled {} @(delay (Thread/sleep 2000))) ; Does    count sleep","^9",465,"^:",4,"^8","taoensso/tufte.cljc","^S","^[","^U","^F","^V",true],"^10",["^ ","^K",["^L",[["^11",["^P"],"^Q","^R"],["^11",["^L",[["^P"],"^Q","^R"]],"~$+"]]],"^7","Like `fn` but wraps fn bodies with `p` macro.","^9",659,"^:",1,"^8","taoensso/tufte.cljc","^S","^12","^U","^F","^V",true],"^13",["^ ","^K",["^L",[["^14",["^ ","^15",["^16","^17"],"^18",["^ ","^17","^19"]],"~$&","^R"]]],"^7","Note: this is a low-level primitive for advanced users!\n  Enables `p` forms in body and returns body's result.\n\n  See `new-pdata` for more info on low-level primitives.","^9",339,"^:",1,"^8","taoensso/tufte.cljc","^S","^1:","^U","^F","^V",true],"^1;",["^ ","^K",["^L",[["^1<","~$&","^R"]]],"^7","Deprecated, just use `binding`","^9",838,"^:",3,"^8","taoensso/tufte.cljc","^S","^1=","^U","^F","^V",true],"^1>",["^ ","^K",["^L",[["^M","^N","^O",["^P"],"^Q","^R"],["^M","^N","^O",["^L",[["^P"],"^Q","^R"]],"~$+","^O"]]],"^7","Like `defn-` but wraps fn bodies with `p` macro.","^9",688,"^:",1,"^8","taoensso/tufte.cljc","^S","^1?","^U","^F","^V",true],"^E",["^ ","^K",["^L",[["^X","~$&","^R"]]],"^7","Always executes body, and always returns [<body-result> <?pstats>].\n\n     When [ns level] unelided and [ns level `when`] unfiltered, executes body\n     with profiling active.\n\n     Handy if you'd like to consume stats output directly.\n     Otherwise see `profile`.\n\n     `pstats` objects are derefable and mergeable:\n       - @pstats                 -> {:stats {:n _ :min _ ...} :clock {:t0 _ :t1 _ :total _}}\n       - @(merge-pstats ps1 ps2) -> {:stats {:n _ :min _ ...} :clock {:t0 _ :t1 _ :total _}}\n\n     Full set of `:stats` keys:\n       :n :min :max :mean :mad :sum :p25 :p50 :p75 :p90 :p95 :p99\n\n     Compile-time opts:\n       :level    - e/o #{0 1 2 3 4 5} ; Default is `5`\n       :dynamic? - Use multi-threaded profiling? ; Default is `false`\n       :nmax     - ~Max captures per id before compaction ; Default is 8e5\n       :when     - Optional arbitrary conditional form (e.g. boolean expr)\n\n     Async code:\n       Execution time of any code in body that runs asynchronously on a\n       different thread will generally NOT be automatically captured by default.\n\n       :dynamic? can be used to support capture in cases where Clojure's\n       binding conveyance applies (e.g. futures, agents, pmap).\n\n       In other advanced cases (notably core.async `go` blocks), please see\n       `with-profiling` and `capture-time!`.\n\n     Laziness:\n       Lazy seqs and other forms of laziness (e.g. delays) will only contribute\n       to profiling results if/when evaluation actually occurs.\n       This is intentional and a useful property. Compare:\n\n       (profiled {}  (delay (Thread/sleep 2000))) ; Doesn't count sleep\n       (profiled {} @(delay (Thread/sleep 2000))) ; Does    count sleep","^9",384,"^:",4,"^8","taoensso/tufte.cljc","^S","^1@","^U","^F","^V",true],"^1A",["^ ","^K",["^L",[["~$&","^1B"]]],"^7","~`p` alias","^9",573,"^:",9,"^8","taoensso/tufte.cljc","^S","^1C","^U","^F","^V",true],"^1D",["^ ","^K",["^L",[["^1E","~$&","^R"]]],"^7","Deprecated, just use `binding`","^9",843,"^:",3,"^8","taoensso/tufte.cljc","^S","^1F","^U","^F","^V",true]],"^S","^F","^1G",["^ "],"^1I",null,"^1J",["^ ","^1K","^1K","^1L","^1K","^1M","^1M","^1N","^1M","^1O","^1O","^1P","^1O","^1Q","^1Q","^1R","^1R"],"^1S",["^H",["^1T","^1U"]],"~:shadow/js-access-global",["^H",["Error"]],"^1V",["^ ","^1W","^1O"],"~:defs",["^ ","~$format-grouped-pstats",["^ ","~:protocol-inline",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",793,"^:",7,"^;",793,"^<",28,"^K",["^L",["~$quote",["^L",[["~$m"],["~$m",["^ ","^15",["~$group-sort-fn","~$format-pstats-opts"],"^18",["^ ","^9<",["^L",["~$fn",["~$m"],["^L",["~$get-in","~$m",["~:clock","~:total"],0]]]]]]]]]]],"^7","Alpha, subject to change.\n  Takes a map of {<group-id> <PStats>} and formats a combined\n  output string using `format-pstats`.\n\n  See also example clj project.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["~$m"],["~$m",["^ ","^15",["^9<","^9="],"^18",["^ ","^9<",["^L",["^9>",["~$m"],["^L",["^9?","~$m",["^9@","^9A"],0]]]]]]]],"^K",["^L",[["~$m"],["~$m",["^ ","^15",["^9<","^9="],"^18",["^ ","^9<",["^L",["^9>",["~$m"],["^L",["^9?","~$m",["^9@","^9A"],0]]]]]]]]],"~:arglists-meta",["^L",[null,null]]]],"^S","^4=","^8","taoensso/tufte.cljc","^<",28,"^9B",["^ ","^9C",false,"^9D",2,"^9E",2,"^9F",[["~$m"],["~$m",["^ ","^15",["^9<","^9="],"^18",["^ ","^9<",["^L",["^9>",["~$m"],["^L",["^9?","~$m",["^9@","^9A"],0]]]]]]]],"^K",["^L",[["~$m"],["~$m",["^ ","^15",["^9<","^9="],"^18",["^ ","^9<",["^L",["^9>",["~$m"],["^L",["^9?","~$m",["^9@","^9A"],0]]]]]]]]],"^9G",["^L",[null,null]]],"^9F",[["~$m"],["~$m",["^ ","^15",["^9<","^9="],"^18",["^ ","^9<",["^L",["^9>",["~$m"],["^L",["^9?","~$m",["^9@","^9A"],0]]]]]]]],"~:protocol-impl",null,"^9D",2,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"~:methods",[["^ ","^9D",1,"^9C",false,"~:tag","~$any"],["^ ","^9D",2,"^9C",false,"^9J",["^H",["^9K","~$string","~$clj-nil"]]]],"^9",793,"^;",793,"^9E",2,"~:fn-var",true,"^K",["^L",[["~$m"],["~$m",["^ ","^15",["^9<","^9="],"^18",["^ ","^9<",["^L",["^9>",["~$m"],["^L",["^9?","~$m",["^9@","^9A"],0]]]]]]]]],"^7","Alpha, subject to change.\n  Takes a map of {<group-id> <PStats>} and formats a combined\n  output string using `format-pstats`.\n\n  See also example clj project."],"~$may-profile?",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^<",57,"^9B",["^ ","^9C",false,"^9D",2,"^9E",2,"^9F",[["^1<"],["^1<","^1Y"]],"^K",["^L",[["^1<"],["^1<","^1Y"]]],"^9G",["^L",[null,null]]],"^:",45,"^9",138,"^;",138,"^9J","~$boolean","^K",["^L",["^9;",["^L",[["^1<"],["^1<","^1Y"]]]]],"^7","Implementation detail.\n    Returns true iff level and ns are runtime unfiltered."],"^S","^4G","^8","taoensso/tufte.cljc","^<",57,"^9B",["^ ","^9C",false,"^9D",2,"^9E",2,"^9F",[["^1<"],["^1<","^1Y"]],"^K",["^L",[["^1<"],["^1<","^1Y"]]],"^9G",["^L",[null,null]]],"^9F",[["^1<"],["^1<","^1Y"]],"^9H",null,"^9D",2,"^9G",["^L",[null,null]],"^:",3,"^9C",false,"^9I",[["^ ","^9D",1,"^9C",false,"^9J","^9P"],["^ ","^9D",2,"^9C",false,"^9J","^9P"]],"^9",138,"~:ret-tag","^9P","^;",138,"^9E",2,"^9J","^9P","^9N",true,"^K",["^L",[["^1<"],["^1<","^1Y"]]],"^7","Implementation detail.\n    Returns true iff level and ns are runtime unfiltered."],"~$handlers_",["^ ","^5",["^ ","^8","taoensso/tufte.cljc","^9",204,"^:",14,"^;",204,"^<",23],"^S","^4N","^8","taoensso/tufte.cljc","^<",23,"^:",1,"^9",204,"^;",204,"^9J","~$cljs.core/Atom","^7","{<handler-id> <handler-fn>}"],"~$->StatsAccumulator",["^ ","^9:",null,"^5",["^ ","~:protocols",["^H",["~$cljs.core/IFn","~$cljs.core/IDeref"]],"^8","taoensso/tufte.cljc","^<",26,"^:",10,"~:factory","~:positional","^9",714,"^;",714,"^K",["^L",["^9;",["^L",[["~$pstats_"]]]]],"~:skip-protocol-flag",["^H",["^9V","^9W"]],"^7","Positional factory function for taoensso.tufte/StatsAccumulator."],"^9U",["^H",["^9V","^9W"]],"^S","^3>","^8","taoensso/tufte.cljc","^<",26,"^9F",["^L",[["^9Z"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9X","^9Y","^9",714,"^9Q","^4W","^;",714,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["^9Z"]]]]],"^9[",["^H",["^9V","^9W"]],"^7","Positional factory function for taoensso.tufte/StatsAccumulator."],"~$set-ns-pattern!",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",844,"^:",14,"^;",844,"^<",29,"^K",["^L",["^9;",["^L",[["^1E"]]]]],"^7","Deprecated, just use `alter-var-root`"],"^S","^4:","^8","taoensso/tufte.cljc","^<",29,"^9F",["^L",[["^1E"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",3,"^9C",false,"^9",844,"^;",844,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["^1E"]]]]],"^7","Deprecated, just use `alter-var-root`"],"^1;",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^<",27,"^9B",["^ ","^9C",true,"^9D",1,"^9E",1,"^9F",["^L",[["^L",["^1<","^R"]]]],"^K",["^L",[["^1<","~$&","^R"]]],"^9G",["^L",[null]]],"^:",13,"^9",838,"^V",true,"^;",838,"^K",["^L",["^9;",["^L",[["^1<","~$&","^R"]]]]],"^7","Deprecated, just use `binding`"],"^S","^1=","^8","taoensso/tufte.cljc","^<",27,"^9B",["^ ","^9C",true,"^9D",1,"^9E",1,"^9F",["^L",[["^L",["^1<","^R"]]]],"^K",["^L",[["^1<","~$&","^R"]]],"^9G",["^L",[null]]],"^9F",["^L",[["^L",["^1<","^R"]]]],"^9H",null,"^9D",1,"^9G",["^L",[null]],"^:",3,"^9C",true,"^9I",[["^ ","^9D",1,"^9C",true,"^9J",["^H",["~$seq","~$cljs.core/IList"]]]],"^9",838,"^V",true,"^9Q","^9K","^;",838,"^9E",1,"^9N",false,"^K",["^L",[["^1<","~$&","^R"]]],"^7","Deprecated, just use `binding`"],"~$add-basic-println-handler!",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",251,"^:",7,"^;",251,"^<",33,"^K",["^L",["^9;",["^L",[[["^ ","^15",["^1E","~$handler-id","^9="],"^18",["^ ","^1E","*","^:4","~:basic-println"]]]]]]],"^7","Adds a simple handler that logs `profile` stats output with `println`."],"^S","^4;","^8","taoensso/tufte.cljc","^<",33,"^9F",["^L",[["~$p__34943"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",251,"^9Q",["^H",["~$clj","^9K","~$cljs.core/ISet","~$cljs.core/MetaFn","^9M"]],"^;",251,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[[["^ ","^15",["^1E","^:4","^9="],"^18",["^ ","^1E","*","^:4","^:5"]]]]]]],"^7","Adds a simple handler that logs `profile` stats output with `println`."],"~$*min-level*",["^ ","^5",["^ ","^8","taoensso/tufte.cljc","^9",67,"^:",16,"^;",67,"^<",27,"~:dynamic",true],"^S","^3E","^8","taoensso/tufte.cljc","^<",27,"^:",1,"^:;",true,"^9",67,"^;",67,"^9J","^9K","^7","Integer e/o #{0 1 2 3 4 5 6}, or vector mapping ns-patterns to min-levels:\n    [[<ns-pattern> <min-level>] ... [\"*\" <default-min-level>]]\n\n  See `*ns-filter*` for example patterns."],"~$*ns-filter*",["^ ","^5",["^ ","^8","taoensso/tufte.cljc","^9",78,"^:",16,"^;",78,"^<",27,"^:;",true],"^S","^4@","^8","taoensso/tufte.cljc","^<",27,"^:",1,"^:;",true,"^9",78,"^;",78,"^9J","^9K","^7","(fn may-profile-ns? [ns]) predicate, or ns-pattern.\n  Example ns-patterns:\n    #{}, \"*\", \"foo.bar\", \"foo.bar.*\", #{\"foo\" \"bar.*\"},\n    {:allow #{\"foo\" \"bar.*\"} :deny #{\"foo.*.bar.*\"}}"],"~$add-accumulating-handler!",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",743,"^:",7,"^;",743,"^<",32,"^K",["^L",["^9;",["^L",[[["^ ","^15",["^1E","^:4"],"^18",["^ ","^:4","~:accumulating"]]]]]]],"^7","Alpha, subject to change.\n\n  Creates a new StatsAccumulator (and agent in clj), then\n  registers a handler to accumulate `profile` output to the\n  StatsAccumulator using the agent.\n\n  Returns the StatsAccumulator. You can deref the result to\n  drain the accumulator and return {<group-id> <merged-pstats>}.\n\n  One common pattern is to deref the accumulator every n\n  minutes/etc. to get a view of total-system performance over\n  the period, e.g.:\n\n  (defonce my-sacc (add-accumulating-handler! \"*\"))\n  (defonce my-sacc-drainer\n    ;; Will drain and print formatted stats every minute\n    (future\n      (while true\n        (when-let [m (not-empty @my-sacc)]\n          (println (format-grouped-pstats m)))\n        (Thread/sleep 60000))))\n\n  (profile ...) ; Used elsewhere in your application, e.g.\n                ; wrapping relevant Ring routes in a web application.\n\n  See also `format-grouped-pstats`, example clj project."],"^S","^54","^8","taoensso/tufte.cljc","^<",32,"^9F",["^L",[["~$p__34999"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",743,"^9Q","^4W","^;",743,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[[["^ ","^15",["^1E","^:4"],"^18",["^ ","^:4","^:>"]]]]]]],"^7","Alpha, subject to change.\n\n  Creates a new StatsAccumulator (and agent in clj), then\n  registers a handler to accumulate `profile` output to the\n  StatsAccumulator using the agent.\n\n  Returns the StatsAccumulator. You can deref the result to\n  drain the accumulator and return {<group-id> <merged-pstats>}.\n\n  One common pattern is to deref the accumulator every n\n  minutes/etc. to get a view of total-system performance over\n  the period, e.g.:\n\n  (defonce my-sacc (add-accumulating-handler! \"*\"))\n  (defonce my-sacc-drainer\n    ;; Will drain and print formatted stats every minute\n    (future\n      (while true\n        (when-let [m (not-empty @my-sacc)]\n          (println (format-grouped-pstats m)))\n        (Thread/sleep 60000))))\n\n  (profile ...) ; Used elsewhere in your application, e.g.\n                ; wrapping relevant Ring routes in a web application.\n\n  See also `format-grouped-pstats`, example clj project."],"~$format-id-abbr",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",265,"^:",7,"^;",265,"^<",21,"^K",["^L",["^9;",["^L",[[],["~$n"]]]]],"^7","Returns a `format-id-fn` that abbreviates form ids (pids).\n  Takes `n` (default 1), the number of namespace parts to keep unabbreviated.\n\n  Examples:\n    ((format-id-abbr)   :foo)                     => \"foo\"\n    ((format-id-abbr)   :example.hello/foo)       => \"e.hello/foo\"\n    ((format-id-abbr 1) :example.hello/foo)       => \"e.hello/foo\"\n    ((format-id-abbr 1) :example.hello.world/foo) => \"e.h.world/foo\"\n    ((format-id-abbr 2) :example.hello.world/foo) => \"e.hello.world/foo\"\n    ((format-id-abbr 0) :example.hello.world/foo) => \"e.h.w/foo\"","^9B",["^ ","^9C",false,"^9D",1,"^9E",1,"^9F",[[],["~$n"]],"^K",["^L",[[],["~$n"]]],"^9G",["^L",[null,null]]]],"^S","^4C","^8","taoensso/tufte.cljc","^<",21,"^9B",["^ ","^9C",false,"^9D",1,"^9E",1,"^9F",[[],["~$n"]],"^K",["^L",[[],["~$n"]]],"^9G",["^L",[null,null]]],"^9F",[[],["~$n"]],"^9H",null,"^9D",1,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9I",[["^ ","^9D",0,"^9C",false,"^9J","^9K"],["^ ","^9D",1,"^9C",false,"^9J","~$function"]],"^9",265,"^;",265,"^9E",1,"^9N",true,"^K",["^L",[[],["~$n"]]],"^7","Returns a `format-id-fn` that abbreviates form ids (pids).\n  Takes `n` (default 1), the number of namespace parts to keep unabbreviated.\n\n  Examples:\n    ((format-id-abbr)   :foo)                     => \"foo\"\n    ((format-id-abbr)   :example.hello/foo)       => \"e.hello/foo\"\n    ((format-id-abbr 1) :example.hello/foo)       => \"e.hello/foo\"\n    ((format-id-abbr 1) :example.hello.world/foo) => \"e.h.world/foo\"\n    ((format-id-abbr 2) :example.hello.world/foo) => \"e.hello.world/foo\"\n    ((format-id-abbr 0) :example.hello.world/foo) => \"e.h.w/foo\""],"~$compile-ns-filter",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",587,"^:",7,"^;",587,"^<",24,"^K",["^L",["^9;",["^L",[["^1E"]]]]],"^7","Wraps `taoensso.encore/compile-str-filter`."],"^S","^2R","^8","taoensso/tufte.cljc","^<",24,"^9F",["^L",[["^1E"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",587,"^9Q","^:A","^;",587,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["^1E"]]]]],"^7","Wraps `taoensso.encore/compile-str-filter`."],"~$map->HandlerVal",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^<",22,"^:",12,"~:internal-ctor",true,"^9X","~:map","^9",202,"^;",202,"^K",["^L",["^9;",["^L",[["~$G__34913"]]]]],"^7","Factory function for taoensso.tufte/HandlerVal, taking a map of keywords to field values."],"^S","^5<","^8","taoensso/tufte.cljc","^<",22,"^9F",["^L",[["^:F"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^:D",true,"^9C",false,"^9X","^:E","^9",202,"^9Q","^4Q","^;",202,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["^:F"]]]]],"^7","Factory function for taoensso.tufte/HandlerVal, taking a map of keywords to field values."],"~$HandlerVal",["^ ","~:num-fields",8,"^9U",["^H",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^S","^4Q","^8","taoensso/tufte.cljc","^<",22,"~:type",true,"^:",12,"^:D",true,"^9",202,"~:record",true,"^;",202,"^9J","^:A","^9[",["^H",["^:I","^:J","^:K","^:L","^:M","^:N","^:O","^:P","^:Q","^:R","^:S","^:T","^:U","^:V","^:W"]]],"~$StatsAccumulator",["^ ","^:H",1,"^9U",["^H",["^9V","^9W"]],"^S","^4W","^8","taoensso/tufte.cljc","^<",26,"^:X",true,"^:",10,"^9",714,"^:Y",false,"^;",714,"^9J","^:A","^9[",["^H",["^9V","^9W"]]],"~$new-pdata",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",305,"^:",7,"^;",305,"^<",16,"^K",["^L",["^9;",["^L",[[],[["^ ","^15",["^16","^17"],"^18",["^ ","^16",true,"^17","^19"]]]]]]],"^7","Note: this is a low-level primitive for advanced users!\n  Returns a new pdata object for use with `with-profiling` and/or `capture-time!`.\n  Deref to get pstats:\n\n    (let [pd (new-pdata)\n          t0 (System/nanoTime)]\n      (with-profiling pd {}\n        (p :foo (Thread/sleep 100))\n        (capture-time! pd :bar (- t0 (System/nanoTime))))\n      @pd)\n\n  Dynamic (thread-safe) by default.\n  *WARNING*: don't change this default unless you're very sure the resulting\n  pdata object will not be concurrently modified across threads. Concurrent\n  modification will lead to bad data and/or exceptions!","^9B",["^ ","^9C",false,"^9D",1,"^9E",1,"^9F",[[],[["^ ","^15",["^16","^17"],"^18",["^ ","^16",true,"^17","^19"]]]],"^K",["^L",[[],[["^ ","^15",["^16","^17"],"^18",["^ ","^16",true,"^17","^19"]]]]],"^9G",["^L",[null,null]]]],"^S","^2E","^8","taoensso/tufte.cljc","^<",16,"^9B",["^ ","^9C",false,"^9D",1,"^9E",1,"^9F",[[],[["^ ","^15",["^16","^17"],"^18",["^ ","^16",true,"^17","^19"]]]],"^K",["^L",[[],[["^ ","^15",["^16","^17"],"^18",["^ ","^16",true,"^17","^19"]]]]],"^9G",["^L",[null,null]]],"^9F",[[],[["^ ","^15",["^16","^17"],"^18",["^ ","^16",true,"^17","^19"]]]],"^9H",null,"^9D",1,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9I",[["^ ","^9D",0,"^9C",false,"^9J","^9K"],["^ ","^9D",1,"^9C",false,"^9J","~$taoensso.tufte.impl/PData"]],"^9",305,"^;",305,"^9E",1,"^9N",true,"^K",["^L",[[],[["^ ","^15",["^16","^17"],"^18",["^ ","^16",true,"^17","^19"]]]]],"^7","Note: this is a low-level primitive for advanced users!\n  Returns a new pdata object for use with `with-profiling` and/or `capture-time!`.\n  Deref to get pstats:\n\n    (let [pd (new-pdata)\n          t0 (System/nanoTime)]\n      (with-profiling pd {}\n        (p :foo (Thread/sleep 100))\n        (capture-time! pd :bar (- t0 (System/nanoTime))))\n      @pd)\n\n  Dynamic (thread-safe) by default.\n  *WARNING*: don't change this default unless you're very sure the resulting\n  pdata object will not be concurrently modified across threads. Concurrent\n  modification will lead to bad data and/or exceptions!"],"~$valid-min-level?",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",58,"^:",8,"^;",58,"^<",24,"~:private",true,"^K",["^L",["^9;",["^L",[["~$x"]]]]]],"^;2",true,"^S","^3I","^8","taoensso/tufte.cljc","^<",24,"^9F",["^L",[["~$x"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",58,"^9Q","^9P","^;",58,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["~$x"]]]]]],"~$set-min-level!",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",839,"^:",14,"^;",839,"^<",28,"^K",["^L",["^9;",["^L",[["^1<"]]]]],"^7","Deprecated, just use `alter-var-root`"],"^S","^2G","^8","taoensso/tufte.cljc","^<",28,"^9F",["^L",[["^1<"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",3,"^9C",false,"^9",839,"^;",839,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["^1<"]]]]],"^7","Deprecated, just use `alter-var-root`"],"~$valid-call-level?",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",57,"^:",8,"^;",57,"^<",25,"^;2",true,"^K",["^L",["^9;",["^L",[["~$x"]]]]]],"^;2",true,"^S","^2J","^8","taoensso/tufte.cljc","^<",25,"^9F",["^L",[["~$x"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",57,"^9Q","^9P","^;",57,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["~$x"]]]]]],"~$valid-min-level",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",64,"^:",8,"^;",64,"^<",23,"^;2",true,"^K",["^L",["^9;",["^L",[["~$x"]]]]]],"^;2",true,"^S","^51","^8","taoensso/tufte.cljc","^<",23,"^9F",["^L",[["~$x"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",64,"^9Q","^9K","^;",64,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["~$x"]]]]]],"~$may-profile-ns?",["^ ","^9:",null,"^5",["^ ","^;2",true,"^8","taoensso/tufte.cljc","^<",64,"^9B",["^ ","^9C",false,"^9D",2,"^9E",2,"^9F",[["^1Y"],["~$ns-filter","^1Y"]],"^K",["^L",[["^1Y"],["^;7","^1Y"]]],"^9G",["^L",[null,null]]],"^:",49,"^9",95,"^;",95,"^9J","^9P","^K",["^L",["^9;",["^L",[["^1Y"],["^;7","^1Y"]]]]],"^7","Implementation detail."],"^;2",true,"^S","^2Q","^8","taoensso/tufte.cljc","^<",64,"^9B",["^ ","^9C",false,"^9D",2,"^9E",2,"^9F",[["^1Y"],["^;7","^1Y"]],"^K",["^L",[["^1Y"],["^;7","^1Y"]]],"^9G",["^L",[null,null]]],"^9F",[["^1Y"],["^;7","^1Y"]],"^9H",null,"^9D",2,"^9G",["^L",[null,null]],"^:",3,"^9C",false,"^9I",[["^ ","^9D",1,"^9C",false,"^9J","^9P"],["^ ","^9D",2,"^9C",false,"^9J","^9P"]],"^9",95,"^9Q","^9P","^;",95,"^9E",2,"^9J","^9P","^9N",true,"^K",["^L",[["^1Y"],["^;7","^1Y"]]],"^7","Implementation detail."],"~$sacc-add!",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",708,"^:",8,"^;",708,"^<",17,"^;2",true,"^K",["^L",["^9;",["^L",[["^9Z","~$group-id","~$ps"]]]]]],"^;2",true,"^S","^3S","^8","taoensso/tufte.cljc","^<",17,"^9F",["^L",[["^9Z","^;9","^;:"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",708,"^9Q",["^H",["^9P","^9M"]],"^;",708,"^9E",3,"^9N",true,"^K",["^L",["^9;",["^L",[["^9Z","^;9","^;:"]]]]]],"~$sacc-drain-and-merge!",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",707,"^:",8,"^;",707,"^<",29,"^;2",true,"^K",["^L",["^9;",["^L",[["^9Z"]]]]]],"^;2",true,"^S","^3Q","^8","taoensso/tufte.cljc","^<",29,"^9F",["^L",[["^9Z"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",707,"^9Q","^9K","^;",707,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["^9Z"]]]]]],"~$stats-accumulator",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",720,"^:",7,"^;",720,"^<",24,"^K",["^L",["^9;",["^L",[[]]]]],"^7","Alpha, subject to change.\n  Small util to help merge pstats from multiple runs or threads.\n\n  Returns a stateful StatsAccumulator (`sacc`) with:\n    - `(sacc <group-id> <pstats>)` ; Merges given pstats under given group id\n    - `@sacc`                      ; Drains accumulator and returns {<group-id> <merged-pstats>}\n\n  Note that you may want some kind of async/buffer/serialization\n  mechanism in front of merge calls for performance (e.g. by using an agent).\n\n  See also `add-accumulating-handler!`, example clj project."],"^S","^3<","^8","taoensso/tufte.cljc","^<",24,"^9F",["^L",[[]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",720,"^9Q","^4W","^;",720,"^9E",0,"^9N",true,"^K",["^L",["^9;",["^L",[[]]]]],"^7","Alpha, subject to change.\n  Small util to help merge pstats from multiple runs or threads.\n\n  Returns a stateful StatsAccumulator (`sacc`) with:\n    - `(sacc <group-id> <pstats>)` ; Merges given pstats under given group id\n    - `@sacc`                      ; Drains accumulator and returns {<group-id> <merged-pstats>}\n\n  Note that you may want some kind of async/buffer/serialization\n  mechanism in front of merge calls for performance (e.g. by using an agent).\n\n  See also `add-accumulating-handler!`, example clj project."],"^1D",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^<",28,"^9B",["^ ","^9C",true,"^9D",1,"^9E",1,"^9F",["^L",[["^L",["^1E","^R"]]]],"^K",["^L",[["^1E","~$&","^R"]]],"^9G",["^L",[null]]],"^:",13,"^9",843,"^V",true,"^;",843,"^K",["^L",["^9;",["^L",[["^1E","~$&","^R"]]]]],"^7","Deprecated, just use `binding`"],"^S","^1F","^8","taoensso/tufte.cljc","^<",28,"^9B",["^ ","^9C",true,"^9D",1,"^9E",1,"^9F",["^L",[["^L",["^1E","^R"]]]],"^K",["^L",[["^1E","~$&","^R"]]],"^9G",["^L",[null]]],"^9F",["^L",[["^L",["^1E","^R"]]]],"^9H",null,"^9D",1,"^9G",["^L",[null]],"^:",3,"^9C",true,"^9I",[["^ ","^9D",1,"^9C",true,"^9J",["^H",["^:1","^:2"]]]],"^9",843,"^V",true,"^9Q","^9K","^;",843,"^9E",1,"^9N",false,"^K",["^L",[["^1E","~$&","^R"]]],"^7","Deprecated, just use `binding`"],"~$profiling?",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",299,"^:",7,"^;",299,"^<",17,"^K",["^L",["^9;",["^L",[[]]]]],"^7","Returns e/o #{nil :thread :dynamic}."],"^S","^4[","^8","taoensso/tufte.cljc","^<",17,"^9F",["^L",[[]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",299,"^9Q",["^H",["^33","^9M"]],"^;",299,"^9E",0,"^9N",true,"^K",["^L",["^9;",["^L",[[]]]]],"^7","Returns e/o #{nil :thread :dynamic}."],"~$format-pstats",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",611,"^:",7,"^;",611,"^<",20,"^K",["^L",["^9;",["^L",[["^;:"],["^;:","^X"]]]]],"^7","Formats given pstats to a string table.\n    Accounted < Clock => Some work was done that wasn't tracked by any p forms.\n    Accounted > Clock => Nested p forms, and/or parallel threads.","^9B",["^ ","^9C",false,"^9D",2,"^9E",2,"^9F",[["^;:"],["^;:","^X"]],"^K",["^L",[["^;:"],["^;:","^X"]]],"^9G",["^L",[null,null]]]],"^S","^50","^8","taoensso/tufte.cljc","^<",20,"^9B",["^ ","^9C",false,"^9D",2,"^9E",2,"^9F",[["^;:"],["^;:","^X"]],"^K",["^L",[["^;:"],["^;:","^X"]]],"^9G",["^L",[null,null]]],"^9F",[["^;:"],["^;:","^X"]],"^9H",null,"^9D",2,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9I",[["^ ","^9D",1,"^9C",false,"^9J","^9K"],["^ ","^9D",2,"^9C",false,"^9J",["^H",["^9L","^9M"]]]],"^9",611,"^;",611,"^9E",2,"^9N",true,"^K",["^L",[["^;:"],["^;:","^X"]]],"^7","Formats given pstats to a string table.\n    Accounted < Clock => Some work was done that wasn't tracked by any p forms.\n    Accounted > Clock => Nested p forms, and/or parallel threads."],"~$ns->?min-level",["^ ","^5",["^ ","^8","taoensso/tufte.cljc","^9",100,"^:",18,"^;",100,"^<",32,"^;2",true],"^;2",true,"^S","^2I","^8","taoensso/tufte.cljc","^<",32,"^:",3,"^9",100,"^;",100,"^9J","^:A","^7","[[<ns-pattern> <min-level>] ... [\"*\" <default-min-level>]], ns -> ?min-level"],"~$add-handler!",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",206,"^:",10,"^;",206,"^<",22,"^K",["^L",["^9;",["^L",[["^:4","~$handler-fn"],["^:4","^1E","^;A"]]]]],"^7","Use this to register interest in stats output produced by `profile` calls.\n  Each registered `handler-fn` will be called as:\n\n    (handler-fn {:ns-str _ :level _ :?id _ :?data _ :pstats _ :pstats-str_ _})\n\n  Map args:\n    :ns-str      - Namespace string where `profile` call took place\n    :level       - Level e/o #{0 1 2 3 4 5}, given in `(profile {:level _} ...)`\n    :?id         - Optional group id,        given in `(profile {:id    _} ...)`\n    :?data       - Optional arb data,        given in `(profile {:data  _} ...)`\n    :pstats      - As in `(second (profiled ...))`. Derefable, mergeable.\n    :pstats-str_ - `(delay (format-pstats pstats))\n\n  Error handling (NB):\n    Handler errors will be silently swallowed. Please `try`/`catch` and\n    appropriately deal with (e.g. log) possible errors *within* `handler-fn`.\n\n  Async/blocking:\n    `handler-fn` should ideally be non-blocking, or reasonably cheap. Handler\n     dispatch occurs through a 1-thread 1k-buffer dropping queue.\n\n  Ns filtering:\n    Provide an optional `ns-pattern` arg to only call handler for matching\n    namespaces. See `*ns-filter*` for example patterns.\n\n  Handler ideas:\n    Save to a db, log, `put!` to an appropriate `core.async` channel, filter,\n    aggregate, use for a realtime analytics dashboard, examine for outliers\n    or unexpected output, ...","^9B",["^ ","^9C",false,"^9D",3,"^9E",3,"^9F",[["^:4","^;A"],["^:4","^1E","^;A"]],"^K",["^L",[["^:4","^;A"],["^:4","^1E","^;A"]]],"^9G",["^L",[null,null]]]],"^S","^3H","^8","taoensso/tufte.cljc","^<",22,"^9B",["^ ","^9C",false,"^9D",3,"^9E",3,"^9F",[["^:4","^;A"],["^:4","^1E","^;A"]],"^K",["^L",[["^:4","^;A"],["^:4","^1E","^;A"]]],"^9G",["^L",[null,null]]],"^9F",[["^:4","^;A"],["^:4","^1E","^;A"]],"^9H",null,"^9D",3,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9I",[["^ ","^9D",2,"^9C",false,"^9J","^9K"],["^ ","^9D",3,"^9C",false,"^9J",["^H",["^:7","^9K","^:8","^:9","^9M"]]]],"^9",206,"^;",206,"^9E",3,"^9N",true,"^K",["^L",[["^:4","^;A"],["^:4","^1E","^;A"]]],"^7","Use this to register interest in stats output produced by `profile` calls.\n  Each registered `handler-fn` will be called as:\n\n    (handler-fn {:ns-str _ :level _ :?id _ :?data _ :pstats _ :pstats-str_ _})\n\n  Map args:\n    :ns-str      - Namespace string where `profile` call took place\n    :level       - Level e/o #{0 1 2 3 4 5}, given in `(profile {:level _} ...)`\n    :?id         - Optional group id,        given in `(profile {:id    _} ...)`\n    :?data       - Optional arb data,        given in `(profile {:data  _} ...)`\n    :pstats      - As in `(second (profiled ...))`. Derefable, mergeable.\n    :pstats-str_ - `(delay (format-pstats pstats))\n\n  Error handling (NB):\n    Handler errors will be silently swallowed. Please `try`/`catch` and\n    appropriately deal with (e.g. log) possible errors *within* `handler-fn`.\n\n  Async/blocking:\n    `handler-fn` should ideally be non-blocking, or reasonably cheap. Handler\n     dispatch occurs through a 1-thread 1k-buffer dropping queue.\n\n  Ns filtering:\n    Provide an optional `ns-pattern` arg to only call handler for matching\n    namespaces. See `*ns-filter*` for example patterns.\n\n  Handler ideas:\n    Save to a db, log, `put!` to an appropriate `core.async` channel, filter,\n    aggregate, use for a realtime analytics dashboard, examine for outliers\n    or unexpected output, ..."],"~$merge-pstats",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",600,"^:",7,"^;",600,"^<",19,"^K",["^L",["^9;",["^L",[[],["~$ps0"],["^;C","~$ps1"]]]]],"^7","Statistics are lossless unless data to merge are very large.","^9B",["^ ","^9C",false,"^9D",2,"^9E",2,"^9F",[[],["^;C"],["^;C","^;D"]],"^K",["^L",[[],["^;C"],["^;C","^;D"]]],"^9G",["^L",[null,null,null]]]],"^S","^3J","^8","taoensso/tufte.cljc","^<",19,"^9B",["^ ","^9C",false,"^9D",2,"^9E",2,"^9F",[[],["^;C"],["^;C","^;D"]],"^K",["^L",[[],["^;C"],["^;C","^;D"]]],"^9G",["^L",[null,null,null]]],"^9F",[[],["^;C"],["^;C","^;D"]],"^9H",null,"^9D",2,"^9G",["^L",[null,null,null]],"^:",1,"^9C",false,"^9I",[["^ ","^9D",0,"^9C",false,"^9J","^9M"],["^ ","^9D",1,"^9C",false],["^ ","^9D",2,"^9C",false,"^9J","^9K"]],"^9",600,"^;",600,"^9E",2,"^9N",true,"^K",["^L",[[],["^;C"],["^;C","^;D"]]],"^7","Statistics are lossless unless data to merge are very large."],"^19",["^ ","^5",["^ ","^8","taoensso/tufte.cljc","^9",304,"^:",24,"^;",304,"^<",36,"^;2",true,"~:const",true],"^;2",true,"^S","^3R","^8","taoensso/tufte.cljc","^<",36,"~:const-expr",["^ ","^1H","^;E","~:val",800000.0,"~:env",["^ ","~:context","~:expr"],"^1X",800000.0,"^9J","~$number"],"^:",1,"^;E",true,"^9",304,"^;",304,"^9J","^;K"],"~$invalid-min-level-msg",["^ ","^5",["^ ","^8","taoensso/tufte.cljc","^9",61,"^:",24,"^;",61,"^<",45,"^;E",true,"^;2",true],"^;2",true,"^S","^3V","^8","taoensso/tufte.cljc","^<",45,"^;F",["^ ","^1H","^;E","^;G","Invalid minimum Tufte profiling level: should be int e/o #{0 1 2 3 4 5 6}","^;H",["^ ","^;I","^;J"],"^1X","Invalid minimum Tufte profiling level: should be int e/o #{0 1 2 3 4 5 6}","^9J","^9L"],"^:",1,"^;E",true,"^9",61,"^;",61,"^9J","^9L"],"~$remove-handler!",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",205,"^:",7,"^;",205,"^<",22,"^K",["^L",["^9;",["^L",[["^:4"]]]]]],"^S","^4K","^8","taoensso/tufte.cljc","^<",22,"^9F",["^L",[["^:4"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",205,"^9Q",["^H",["^:7","^9K","^:8","^:9","^9M"]],"^;",205,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["^:4"]]]]]],"~$fn-sigs",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",635,"^:",8,"^;",635,"^<",15,"^;2",true,"^K",["^L",["^9;",["^L",[["~$def?","~$?meta-pid","~$fn-sym","~$sigs"]]]]]],"^;2",true,"^S","^3Z","^8","taoensso/tufte.cljc","^<",15,"^9F",["^L",[["^;O","^;P","^;Q","^;R"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",635,"^9Q","~$cljs.core/LazySeq","^;",635,"^9E",4,"^9N",true,"^K",["^L",["^9;",["^L",[["^;O","^;P","^;Q","^;R"]]]]]],"~$chance",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",590,"^:",7,"^;",590,"^<",13,"^K",["^L",["^9;",["^L",[["~$p"]]]]],"^7","Returns true with 0<`p`<1 probability."],"^S","^41","^8","taoensso/tufte.cljc","^<",13,"^9F",["^L",[["~$p"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",590,"^9Q","^9P","^;",590,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["~$p"]]]]],"^7","Returns true with 0<`p`<1 probability."],"~$->HandlerVal",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^<",22,"^:",12,"^:D",true,"^9X","^9Y","^9",202,"^;",202,"^K",["^L",["^9;",["^L",[["~$ns-str","^1<","~$?id","~$?data","~$pstats","~$pstats-str_","~$?file","~$?line"]]]]],"^7","Positional factory function for taoensso.tufte/HandlerVal."],"^S","^3;","^8","taoensso/tufte.cljc","^<",22,"^9F",["^L",[["^;V","^1<","^;W","^;X","^;Y","^;Z","^;[","^<0"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^:D",true,"^9C",false,"^9X","^9Y","^9",202,"^9Q","^4Q","^;",202,"^9E",8,"^9N",true,"^K",["^L",["^9;",["^L",[["^;V","^1<","^;W","^;X","^;Y","^;Z","^;[","^<0"]]]]],"^7","Positional factory function for taoensso.tufte/HandlerVal."],"~$invalid-call-level-msg",["^ ","^5",["^ ","^8","taoensso/tufte.cljc","^9",60,"^:",24,"^;",60,"^<",46,"^;E",true,"^;2",true],"^;2",true,"^S","^37","^8","taoensso/tufte.cljc","^<",46,"^;F",["^ ","^1H","^;E","^;G","Invalid Tufte profiling level: should be int e/o #{0 1 2 3 4 5}","^;H",["^ ","^;I","^;J"],"^1X","Invalid Tufte profiling level: should be int e/o #{0 1 2 3 4 5}","^9J","^9L"],"^:",1,"^;E",true,"^9",60,"^;",60,"^9J","^9L"],"~$get-min-level",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",123,"^:",10,"^;",123,"^<",23,"^;2",true,"^K",["^L",["^9;",["^L",[["~$default","~$x","^1Y"]]]]]],"^;2",true,"^S","^46","^8","taoensso/tufte.cljc","^<",23,"^9F",["^L",[["^<3","~$x","^1Y"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",3,"^9C",false,"^9",123,"^9Q","^9K","^;",123,"^9E",3,"^9N",true,"^K",["^L",["^9;",["^L",[["^<3","~$x","^1Y"]]]]]],"~$capture-time!",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",352,"^:",7,"^;",352,"^<",20,"^K",["^L",["^9;",["^L",[["^14","^W","~$nano-secs-elapsed"],["^W","^<5"]]]]],"^7","Note: this is a low-level primitive for advanced users!\n  Can be useful when tracking time across arbitrary thread boundaries or for\n  async jobs / callbacks / etc.\n\n  See `new-pdata` for more info on low-level primitives.","^9B",["^ ","^9C",false,"^9D",3,"^9E",3,"^9F",[["^14","^W","^<5"],["^W","^<5"]],"^K",["^L",[["^14","^W","^<5"],["^W","^<5"]]],"^9G",["^L",[null,null]]]],"^S","^3C","^8","taoensso/tufte.cljc","^<",20,"^9B",["^ ","^9C",false,"^9D",3,"^9E",3,"^9F",[["^14","^W","^<5"],["^W","^<5"]],"^K",["^L",[["^14","^W","^<5"],["^W","^<5"]]],"^9G",["^L",[null,null]]],"^9F",[["^14","^W","^<5"],["^W","^<5"]],"^9H",null,"^9D",3,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9I",[["^ ","^9D",3,"^9C",false,"^9J","^9M"],["^ ","^9D",2,"^9C",false,"^9J","^9M"]],"^9",352,"^;",352,"^9E",3,"^9N",true,"^K",["^L",[["^14","^W","^<5"],["^W","^<5"]]],"^7","Note: this is a low-level primitive for advanced users!\n  Can be useful when tracking time across arbitrary thread boundaries or for\n  async jobs / callbacks / etc.\n\n  See `new-pdata` for more info on low-level primitives."],"~$valid-call-level",["^ ","^9:",null,"^5",["^ ","^8","taoensso/tufte.cljc","^9",63,"^:",8,"^;",63,"^<",24,"^;2",true,"^K",["^L",["^9;",["^L",[["~$x"]]]]]],"^;2",true,"^S","^3D","^8","taoensso/tufte.cljc","^<",24,"^9F",["^L",[["~$x"]]],"^9H",null,"^9G",["^L",[null,null]],"^:",1,"^9C",false,"^9",63,"^9Q","^9K","^;",63,"^9E",1,"^9N",true,"^K",["^L",["^9;",["^L",[["~$x"]]]]]]],"^1U",["^ ","^F","^F","^1Q","^1Q","^1K","^1K","^1L","^1K","^1O","^1O","^1P","^1O"],"~:cljs.analyzer/constants",["^ ","^1S",["^H",["~:given","~$cljs.core/binding","~:nmax","~:handler-id","~:else","~:ns-pattern","~:dynamic?","^3E","~:?file","^:X","~:ns-str","~:group-sort-fn","~:level","^Y","^9A","^;[","^:;","~:thread","^4@","^;V","~:pstats-str_","^1<","^:>","^:5","~:?data","~:?line","~:pstats","~:?id","^9@","~:max-id-width","^;Z","~:stats","^;X","~:tufte/nil-id","^<0","^9Z","~:format-pstats-opts","^;W","^;Y"]],"~:order",["^<8","^:X","^<@","^<B","^<H","^<E","^<G","^<D","^<?","^<F","^;V","^1<","^;W","^;X","^;Y","^;Z","^;[","^<0","^<=","^<;","^:5","^<L","^<<","^:;","^<C","^<>","^<:","^9@","^<J","^9A","^Y","^9Z","^:>","^<K","^<A","^<I","^<9","^3E","^4@"]],"^21",["^ ","^1T",["^H",[]],"^1U",["^H",[]]],"^22",["^ "],"^23",["^1R","^1Q","^1K","^1M","^1O"]],"^U","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^5?",[["^<P","~:static-fns"],true,["^<P","~:shadow-tweaks"],null,["^<P","~:source-map-inline"],null,["^<P","~:elide-asserts"],false,["^<P","~:optimize-constants"],null,["^<P","^28"],null,["^<P","~:external-config"],null,["^<P","~:tooling-config"],null,["^<P","~:emit-constants"],null,["^<P","~:load-tests"],null,["^<P","~:form-size-threshold"],null,["^<P","~:global-goog-object&array"],null,["^<P","~:data-readers"],null,["^<P","~:infer-externs"],"~:auto",["^<P","^2:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^<P","~:fn-invoke-direct"],null,["^<P","~:source-map"],"/dev/null"]]]