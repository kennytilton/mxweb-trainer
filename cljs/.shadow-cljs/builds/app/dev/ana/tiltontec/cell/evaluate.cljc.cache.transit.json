["^ ","~:output",["^ ","~:js","goog.provide('tiltontec.cell.evaluate');\n(cljs.core._STAR_print_level_STAR_ = (3));\ntiltontec.cell.evaluate.ephemeral_reset = (function tiltontec$cell$evaluate$ephemeral_reset(rc){\nif(cljs.core.truth_(tiltontec.cell.base.c_ephemeral_QMARK_(rc))){\nreturn tiltontec.cell.integrity.call_with_integrity(new cljs.core.Keyword(null,\"ephemeral-reset\",\"ephemeral-reset\",-1442676603),rc,(function (opcode,defer_info){\nvar temp__5753__auto___29343 = new cljs.core.Keyword(null,\"me\",\"me\",-139006693).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(rc));\nif(cljs.core.truth_(temp__5753__auto___29343)){\nvar me_29345 = temp__5753__auto___29343;\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(me_29345,cljs.core.assoc,new cljs.core.Keyword(null,\"slot\",\"slot\",240229571).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(rc)),null);\n} else {\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(rc,cljs.core.assoc,new cljs.core.Keyword(null,\"value\",\"value\",305978217),null);\n}));\n} else {\nreturn null;\n}\n});\ntiltontec.cell.evaluate.record_dependency = (function tiltontec$cell$evaluate$record_dependency(used){\nif(tiltontec.cell.base.c_optimized_away_QMARK_(used)){\nreturn null;\n} else {\nif(cljs.core.truth_(tiltontec.cell.base._STAR_depender_STAR_)){\n} else {\nthrow (new Error(\"Assert failed: *depender*\"));\n}\n\ntiltontec.util.base.call_trc.cljs$core$IFn$_invoke$arity$variadic(null,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"reco-dep!!!\",\"reco-dep!!!\",380319801),new cljs.core.Keyword(null,\"used\",\"used\",-1414786177),tiltontec.cell.base.c_slot(used),new cljs.core.Keyword(null,\"caller\",\"caller\",-1275362879),tiltontec.cell.base.c_slot(tiltontec.cell.base._STAR_depender_STAR_)], 0));\n\ntiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"useds\",\"useds\",621350967),tiltontec.cell.base._STAR_depender_STAR_], null),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(tiltontec.cell.base.c_useds(tiltontec.cell.base._STAR_depender_STAR_),used));\n\nreturn tiltontec.cell.base.caller_ensure(used,tiltontec.cell.base._STAR_depender_STAR_);\n}\n});\n/**\n * The key to data integrity: recursively check the known dependency\n *   graph to decide if we are current, and if not kick off recalculation\n *   and propagation.\n */\ntiltontec.cell.evaluate.ensure_value_is_current = (function tiltontec$cell$evaluate$ensure_value_is_current(c,debug_id,ensurer){\nif(cljs.core.truth_(tiltontec.cell.base._STAR_not_to_be_STAR_)){\nif(tiltontec.cell.base.c_unbound_QMARK_(c)){\ntiltontec.util.base.call_trc.cljs$core$IFn$_invoke$arity$variadic(\":unbound!!!\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([tiltontec.cell.base.c_slot], 0));\n\nreturn tiltontec.util.core.err.cljs$core$IFn$_invoke$arity$3(\"evic> unbound slot %s of model %s\",tiltontec.cell.base.c_slot(c),tiltontec.cell.base.c_model(c));\n} else {\nif(tiltontec.cell.base.c_valid_QMARK_(c)){\nreturn tiltontec.cell.base.c_value(c);\n} else {\nreturn null;\n}\n}\n} else {\nif(tiltontec.cell.integrity.c_current_QMARK_(c)){\nreturn tiltontec.cell.base.c_value(c);\n} else {\nif(cljs.core.truth_((function (){var and__4251__auto__ = tiltontec.cell.base.c_input_QMARK_(c);\nif(cljs.core.truth_(and__4251__auto__)){\nreturn ((tiltontec.cell.base.c_valid_QMARK_(c)) && ((!(((tiltontec.cell.base.c_formula_QMARK_(c)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tiltontec.cell.base.c_optimize(c),new cljs.core.Keyword(null,\"when-value-t\",\"when-value-t\",1756613336))) && ((tiltontec.cell.base.c_value(c) == null)))))))));\n} else {\nreturn and__4251__auto__;\n}\n})())){\nreturn tiltontec.cell.base.c_value(c);\n} else {\nif(cljs.core.truth_((function (){var temp__5753__auto__ = tiltontec.cell.base.c_model(c);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar md = temp__5753__auto__;\nreturn tiltontec.cell.base.mdead_QMARK_.cljs$core$IFn$_invoke$arity$1(tiltontec.cell.base.c_model(c));\n} else {\nreturn null;\n}\n})())){\nreturn tiltontec.util.core.err.cljs$core$IFn$_invoke$arity$4(cljs.core.str,\"evic> model %s of cell %s is dead\",tiltontec.cell.base.c_model(c),c);\n} else {\nif(cljs.core.truth_((function (){var or__4253__auto__ = (!(tiltontec.cell.base.c_valid_QMARK_(c)));\nif(or__4253__auto__){\nreturn or__4253__auto__;\n} else {\nvar G__29245 = cljs.core.seq(tiltontec.cell.base.c_useds(c));\nvar vec__29246 = G__29245;\nvar seq__29247 = cljs.core.seq(vec__29246);\nvar first__29248 = cljs.core.first(seq__29247);\nvar seq__29247__$1 = cljs.core.next(seq__29247);\nvar used = first__29248;\nvar urest = seq__29247__$1;\nvar G__29245__$1 = G__29245;\nwhile(true){\nvar vec__29249 = G__29245__$1;\nvar seq__29250 = cljs.core.seq(vec__29249);\nvar first__29251 = cljs.core.first(seq__29250);\nvar seq__29250__$1 = cljs.core.next(seq__29250);\nvar used__$1 = first__29251;\nvar urest__$1 = seq__29250__$1;\nif(cljs.core.truth_(used__$1)){\n(tiltontec.cell.evaluate.ensure_value_is_current.cljs$core$IFn$_invoke$arity$3 ? tiltontec.cell.evaluate.ensure_value_is_current.cljs$core$IFn$_invoke$arity$3(used__$1,new cljs.core.Keyword(null,\"nested\",\"nested\",18943849),c) : tiltontec.cell.evaluate.ensure_value_is_current.call(null,used__$1,new cljs.core.Keyword(null,\"nested\",\"nested\",18943849),c));\n\nvar or__4253__auto____$1 = (tiltontec.cell.base.c_pulse_last_changed(used__$1) > tiltontec.cell.base.c_pulse(c));\nif(or__4253__auto____$1){\nreturn or__4253__auto____$1;\n} else {\nvar G__29370 = urest__$1;\nG__29245__$1 = G__29370;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}\n})())){\nif(tiltontec.cell.integrity.c_current_QMARK_(c)){\n} else {\n(tiltontec.cell.evaluate.calculate_and_set.cljs$core$IFn$_invoke$arity$3 ? tiltontec.cell.evaluate.calculate_and_set.cljs$core$IFn$_invoke$arity$3(c,new cljs.core.Keyword(null,\"evic\",\"evic\",1309656753),ensurer) : tiltontec.cell.evaluate.calculate_and_set.call(null,c,new cljs.core.Keyword(null,\"evic\",\"evic\",1309656753),ensurer));\n}\n\nreturn tiltontec.cell.base.c_value(c);\n} else {\ntiltontec.cell.integrity.c_pulse_update(c,new cljs.core.Keyword(null,\"valid-uninfluenced\",\"valid-uninfluenced\",676756797));\n\nreturn tiltontec.cell.base.c_value(c);\n\n}\n}\n}\n}\n}\n});\n/**\n * The API for determing the value associated with a Cell.\n *   Ensures value is current, records any dependent, and\n *   notices if a standalone  cell has never been observed.\n */\ntiltontec.cell.evaluate.c_get = (function tiltontec$cell$evaluate$c_get(c){\nif(tiltontec.cell.base.c_ref_QMARK_(c)){\nvar result__26632__auto__ = tiltontec.cell.integrity.call_with_integrity(null,null,(function (opcode,defer_info){\nvar prior_value = tiltontec.cell.base.c_value(c);\nif(cljs.core.truth_(tiltontec.cell.base._STAR_depender_STAR_)){\n[\"asker=\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(tiltontec.cell.base.c_slot(tiltontec.cell.base._STAR_depender_STAR_)),cljs.core.str.cljs$core$IFn$_invoke$arity$1(tiltontec.cell.base.c_md_name(tiltontec.cell.base._STAR_depender_STAR_))].join('');\n} else {\n}\n\nvar result__26632__auto__ = (function (){var ev = tiltontec.cell.evaluate.ensure_value_is_current(c,new cljs.core.Keyword(null,\"c-read\",\"c-read\",-1481921085),null);\nreturn ev;\n})();\nif((((tiltontec.cell.base.c_model(c) == null)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tiltontec.cell.base.c_state(c),new cljs.core.Keyword(null,\"nascent\",\"nascent\",443401807))) && ((cljs.core.deref(tiltontec.cell.base._PLUS_pulse_PLUS_) > tiltontec.cell.base.c_pulse_observed(c))))))){\ntiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"tiltontec.cell.base\",\"state\",\"tiltontec.cell.base/state\",-1967920396),c], null),new cljs.core.Keyword(null,\"awake\",\"awake\",1922840899));\n\ntiltontec.cell.observer.c_observe.cljs$core$IFn$_invoke$arity$3(c,prior_value,new cljs.core.Keyword(null,\"cget\",\"cget\",1794378742));\n\ntiltontec.cell.evaluate.ephemeral_reset(c);\n} else {\n}\n\nreturn result__26632__auto__;\n}));\nif(cljs.core.truth_(tiltontec.cell.base._STAR_depender_STAR_)){\ntiltontec.cell.evaluate.record_dependency(c);\n} else {\n}\n\nreturn result__26632__auto__;\n} else {\nif(tiltontec.util.core.any_ref_QMARK_(c)){\nreturn cljs.core.deref(c);\n} else {\nreturn c;\n\n}\n}\n});\ntiltontec.cell.evaluate._LT_cget = (function tiltontec$cell$evaluate$_LT_cget(c){\nreturn tiltontec.cell.evaluate.c_get(c);\n});\n\n/**\n * Calculate, link, record, and propagate.\n */\ntiltontec.cell.evaluate.calculate_and_set = (function tiltontec$cell$evaluate$calculate_and_set(c,dbgid,dbgdata){\nvar vec__29252 = (tiltontec.cell.evaluate.calculate_and_link.cljs$core$IFn$_invoke$arity$1 ? tiltontec.cell.evaluate.calculate_and_link.cljs$core$IFn$_invoke$arity$1(c) : tiltontec.cell.evaluate.calculate_and_link.call(null,c));\nvar raw_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29252,(0),null);\nvar propagation_code = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__29252,(1),null);\nif(tiltontec.cell.base.c_optimized_away_QMARK_(c)){\nreturn null;\n} else {\nif(cljs.core.map_QMARK_(cljs.core.deref(c))){\n} else {\nthrow (new Error([\"Assert failed: \",\"calc-n-set\",\"\\n\",\"(map? (clojure.core/deref c))\"].join('')));\n}\n\nreturn (tiltontec.cell.evaluate.c_value_assume.cljs$core$IFn$_invoke$arity$3 ? tiltontec.cell.evaluate.c_value_assume.cljs$core$IFn$_invoke$arity$3(c,raw_value,propagation_code) : tiltontec.cell.evaluate.c_value_assume.call(null,c,raw_value,propagation_code));\n}\n});\n/**\n * The name is accurate: we do no more than invoke the\n *   rule of a formula and return its value*, but along the\n *   way the links between dependencies and dependents get\n *   determined anew.\n * \n *   * Well, we also look to see if a synaptic cell has attached a\n *   propagaion code to a vector used to wrap the raw value, which we then unpack.\n */\ntiltontec.cell.evaluate.calculate_and_link = (function tiltontec$cell$evaluate$calculate_and_link(c){\nvar _STAR_call_stack_STAR__orig_val__29255 = tiltontec.cell.base._STAR_call_stack_STAR_;\nvar _STAR_depender_STAR__orig_val__29256 = tiltontec.cell.base._STAR_depender_STAR_;\nvar _STAR_defer_changes_STAR__orig_val__29257 = tiltontec.cell.base._STAR_defer_changes_STAR_;\nvar _STAR_call_stack_STAR__temp_val__29258 = cljs.core.cons(c,tiltontec.cell.base._STAR_call_stack_STAR_);\nvar _STAR_depender_STAR__temp_val__29259 = c;\nvar _STAR_defer_changes_STAR__temp_val__29260 = true;\n(tiltontec.cell.base._STAR_call_stack_STAR_ = _STAR_call_stack_STAR__temp_val__29258);\n\n(tiltontec.cell.base._STAR_depender_STAR_ = _STAR_depender_STAR__temp_val__29259);\n\n(tiltontec.cell.base._STAR_defer_changes_STAR_ = _STAR_defer_changes_STAR__temp_val__29260);\n\ntry{(tiltontec.cell.evaluate.unlink_from_used.cljs$core$IFn$_invoke$arity$2 ? tiltontec.cell.evaluate.unlink_from_used.cljs$core$IFn$_invoke$arity$2(c,new cljs.core.Keyword(null,\"pre-rule-clear\",\"pre-rule-clear\",258781380)) : tiltontec.cell.evaluate.unlink_from_used.call(null,c,new cljs.core.Keyword(null,\"pre-rule-clear\",\"pre-rule-clear\",258781380)));\n\nif(cljs.core.truth_(tiltontec.cell.base.c_rule(c))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"No rule in %s type %s\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"slot\",\"slot\",240229571).cljs$core$IFn$_invoke$arity$1(c)),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type(cljs.core.deref(c)))].join(''),\"\\n\",\"(c-rule c)\"].join('')));\n}\n\nvar raw_value = (function (){var fexpr__29261 = tiltontec.cell.base.c_rule(c);\nreturn (fexpr__29261.cljs$core$IFn$_invoke$arity$1 ? fexpr__29261.cljs$core$IFn$_invoke$arity$1(c) : fexpr__29261.call(null,c));\n})();\nvar prop_code_QMARK_ = (function (){var and__4251__auto__ = tiltontec.cell.base.c_synaptic_QMARK_(c);\nif(cljs.core.truth_(and__4251__auto__)){\nreturn ((cljs.core.vector_QMARK_(raw_value)) && (cljs.core.contains_QMARK_(cljs.core.meta(raw_value),new cljs.core.Keyword(null,\"propagate\",\"propagate\",274376905))));\n} else {\nreturn and__4251__auto__;\n}\n})();\nif(cljs.core.truth_(prop_code_QMARK_)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(raw_value),new cljs.core.Keyword(null,\"propagate\",\"propagate\",274376905).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(raw_value))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [raw_value,null], null);\n}\n}finally {(tiltontec.cell.base._STAR_defer_changes_STAR_ = _STAR_defer_changes_STAR__orig_val__29257);\n\n(tiltontec.cell.base._STAR_depender_STAR_ = _STAR_depender_STAR__orig_val__29256);\n\n(tiltontec.cell.base._STAR_call_stack_STAR_ = _STAR_call_stack_STAR__orig_val__29255);\n}});\nif((typeof tiltontec !== 'undefined') && (typeof tiltontec.cell !== 'undefined') && (typeof tiltontec.cell.evaluate !== 'undefined') && (typeof tiltontec.cell.evaluate.c_awaken !== 'undefined')){\n} else {\ntiltontec.cell.evaluate.c_awaken = (function (){var method_table__4747__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4748__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4749__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4750__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__29262 = cljs.core.get_global_hierarchy;\nreturn (fexpr__29262.cljs$core$IFn$_invoke$arity$0 ? fexpr__29262.cljs$core$IFn$_invoke$arity$0() : fexpr__29262.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"tiltontec.cell.evaluate\",\"c-awaken\"),(function (c){\nreturn new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(c));\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4751__auto__,method_table__4747__auto__,prefer_table__4748__auto__,method_cache__4749__auto__,cached_hierarchy__4750__auto__));\n})();\n}\ntiltontec.cell.evaluate.c_awaken.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (c){\ntiltontec.util.base.call_trc.cljs$core$IFn$_invoke$arity$variadic(\":awk-fallthru-entry\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.type(c),cljs.core.seq_QMARK_(c),cljs.core.coll_QMARK_(c),cljs.core.vector_QMARK_(c)], 0));\n\nif(cljs.core.coll_QMARK_(c)){\nreturn cljs.core.doall.cljs$core$IFn$_invoke$arity$1((function (){var iter__4652__auto__ = (function tiltontec$cell$evaluate$iter__29266(s__29267){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__29267__$1 = s__29267;\nwhile(true){\nvar temp__5753__auto__ = cljs.core.seq(s__29267__$1);\nif(temp__5753__auto__){\nvar s__29267__$2 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__29267__$2)){\nvar c__4650__auto__ = cljs.core.chunk_first(s__29267__$2);\nvar size__4651__auto__ = cljs.core.count(c__4650__auto__);\nvar b__29269 = cljs.core.chunk_buffer(size__4651__auto__);\nif((function (){var i__29268 = (0);\nwhile(true){\nif((i__29268 < size__4651__auto__)){\nvar ce = cljs.core._nth(c__4650__auto__,i__29268);\ncljs.core.chunk_append(b__29269,tiltontec.cell.evaluate.c_awaken.cljs$core$IFn$_invoke$arity$1(ce));\n\nvar G__29386 = (i__29268 + (1));\ni__29268 = G__29386;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__29269),tiltontec$cell$evaluate$iter__29266(cljs.core.chunk_rest(s__29267__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__29269),null);\n}\n} else {\nvar ce = cljs.core.first(s__29267__$2);\nreturn cljs.core.cons(tiltontec.cell.evaluate.c_awaken.cljs$core$IFn$_invoke$arity$1(ce),tiltontec$cell$evaluate$iter__29266(cljs.core.rest(s__29267__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4652__auto__(c);\n})());\n} else {\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"c-awaken-fall-thru\",\"c-awaken-fall-thru\",-2004606871),((tiltontec.util.core.any_ref_QMARK_(c))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ref-of\",\"ref-of\",1886926194),cljs.core.type(c),cljs.core.deref(c)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"unref\",\"unref\",-1884894186),c,cljs.core.type(c)], null))], 0));\n\n}\n}));\ntiltontec.cell.evaluate.c_awaken.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"tiltontec.cell.base\",\"cell\",\"tiltontec.cell.base/cell\",608738071),(function (c){\nif(cljs.core.truth_(tiltontec.cell.base.c_input_QMARK_(c))){\n} else {\nthrow (new Error(\"Assert failed: (c-input? c)\"));\n}\n\nif((cljs.core.deref(tiltontec.cell.base._PLUS_pulse_PLUS_) > tiltontec.cell.base.c_pulse_observed(c))){\nvar temp__5753__auto___29390 = tiltontec.cell.base.c_me(c);\nif(cljs.core.truth_(temp__5753__auto___29390)){\nvar me_29391 = temp__5753__auto___29390;\ntiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tiltontec.cell.base.c_slot(c),me_29391], null),tiltontec.cell.base.c_value(c));\n} else {\n}\n\ntiltontec.cell.observer.c_observe.cljs$core$IFn$_invoke$arity$2(c,new cljs.core.Keyword(null,\"cell-awaken\",\"cell-awaken\",2137807704));\n\nreturn tiltontec.cell.evaluate.ephemeral_reset(c);\n} else {\nreturn null;\n}\n}));\ntiltontec.cell.evaluate.c_awaken.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"tiltontec.cell.base\",\"c-formula\",\"tiltontec.cell.base/c-formula\",-1020749037),(function (c){\nvar _STAR_depender_STAR__orig_val__29278 = tiltontec.cell.base._STAR_depender_STAR_;\nvar _STAR_depender_STAR__temp_val__29279 = null;\n(tiltontec.cell.base._STAR_depender_STAR_ = _STAR_depender_STAR__temp_val__29279);\n\ntry{if(tiltontec.cell.integrity.c_current_QMARK_(c)){\nreturn null;\n} else {\nreturn tiltontec.cell.evaluate.calculate_and_set(c,new cljs.core.Keyword(null,\"fn-c-awaken\",\"fn-c-awaken\",1597115821),null);\n}\n}finally {(tiltontec.cell.base._STAR_depender_STAR_ = _STAR_depender_STAR__orig_val__29278);\n}}));\n\n\n\ntiltontec.cell.evaluate.md_slot_value_store = (function tiltontec$cell$evaluate$md_slot_value_store(me,slot,value){\nif(cljs.core.truth_(me)){\n} else {\nthrow (new Error(\"Assert failed: me\"));\n}\n\nif(tiltontec.util.core.any_ref_QMARK_(me)){\n} else {\nthrow (new Error(\"Assert failed: (any-ref? me)\"));\n}\n\nreturn tiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [slot,me], null),value);\n});\n/**\n * The Cell assumes a new value at awakening, on c-reset!, or\n * after formula recalculation.\n * \n *   We record the new value, set the Cell state to :awake, make\n *   its pulse current, check to see if a formula cell can be\n *   optimized away, and then propagate to any dependent formula\n *   cells.\n */\ntiltontec.cell.evaluate.c_value_assume = (function tiltontec$cell$evaluate$c_value_assume(c,new_value,propagation_code){\nif(tiltontec.cell.base.c_ref_QMARK_(c)){\n} else {\nthrow (new Error(\"Assert failed: (c-ref? c)\"));\n}\n\nvar result__26632__auto__ = new_value;\nvar _STAR_depender_STAR__orig_val__29281_29392 = tiltontec.cell.base._STAR_depender_STAR_;\nvar _STAR_depender_STAR__temp_val__29282_29393 = null;\n(tiltontec.cell.base._STAR_depender_STAR_ = _STAR_depender_STAR__temp_val__29282_29393);\n\ntry{var prior_value_29394 = tiltontec.cell.base.c_value(c);\nvar prior_state_29395 = tiltontec.cell.base.c_value_state(c);\ntiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),c], null),new_value);\n\ntiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"tiltontec.cell.base\",\"state\",\"tiltontec.cell.base/state\",-1967920396),c], null),new cljs.core.Keyword(null,\"awake\",\"awake\",1922840899));\n\nif(cljs.core.truth_((function (){var and__4251__auto__ = tiltontec.cell.base.c_model(c);\nif(cljs.core.truth_(and__4251__auto__)){\nreturn cljs.core.not(tiltontec.cell.base.c_synaptic_QMARK_(c));\n} else {\nreturn and__4251__auto__;\n}\n})())){\ntiltontec.cell.evaluate.md_slot_value_store(tiltontec.cell.base.c_model(c),tiltontec.cell.base.c_slot(c),new_value);\n} else {\n}\n\ntiltontec.cell.integrity.c_pulse_update(c,new cljs.core.Keyword(null,\"slotv-assume\",\"slotv-assume\",-1071260275));\n\nif(cljs.core.truth_((function (){var or__4253__auto__ = cljs.core.not(cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([prior_state_29395]),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"valid\",\"valid\",155614240),new cljs.core.Keyword(null,\"uncurrent\",\"uncurrent\",-217246265)], null)));\nif(or__4253__auto__){\nreturn or__4253__auto__;\n} else {\nvar or__4253__auto____$1 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(propagation_code,true);\nif(or__4253__auto____$1){\nreturn or__4253__auto____$1;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(propagation_code,false)){\nreturn null;\n} else {\nreturn (tiltontec.cell.evaluate.c_value_changed_QMARK_.cljs$core$IFn$_invoke$arity$3 ? tiltontec.cell.evaluate.c_value_changed_QMARK_.cljs$core$IFn$_invoke$arity$3(c,new_value,prior_value_29394) : tiltontec.cell.evaluate.c_value_changed_QMARK_.call(null,c,new_value,prior_value_29394));\n}\n}\n}\n})())){\nvar callers_29420 = tiltontec.cell.base.c_callers(c);\nvar temp__5753__auto___29422 = (function (){var and__4251__auto__ = tiltontec.cell.base.c_formula_QMARK_(c);\nif(and__4251__auto__){\nreturn tiltontec.cell.base.c_optimize(c);\n} else {\nreturn and__4251__auto__;\n}\n})();\nif(cljs.core.truth_(temp__5753__auto___29422)){\nvar optimize_29423 = temp__5753__auto___29422;\nvar G__29284_29424 = optimize_29423;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"when-value-t\",\"when-value-t\",1756613336),G__29284_29424)){\nif(cljs.core.truth_(tiltontec.cell.base.c_value(c))){\ntiltontec.util.base.call_trc.cljs$core$IFn$_invoke$arity$variadic(null,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"when-value-t\",\"when-value-t\",1756613336),tiltontec.cell.base.c_slot(c)], 0));\n\n(tiltontec.cell.evaluate.unlink_from_used.cljs$core$IFn$_invoke$arity$2 ? tiltontec.cell.evaluate.unlink_from_used.cljs$core$IFn$_invoke$arity$2(c,new cljs.core.Keyword(null,\"when-value-t\",\"when-value-t\",1756613336)) : tiltontec.cell.evaluate.unlink_from_used.call(null,c,new cljs.core.Keyword(null,\"when-value-t\",\"when-value-t\",1756613336)));\n} else {\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(true,G__29284_29424)){\n(tiltontec.cell.evaluate.optimize_away_QMARK__BANG_.cljs$core$IFn$_invoke$arity$2 ? tiltontec.cell.evaluate.optimize_away_QMARK__BANG_.cljs$core$IFn$_invoke$arity$2(c,prior_value_29394) : tiltontec.cell.evaluate.optimize_away_QMARK__BANG_.call(null,c,prior_value_29394));\n} else {\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__29284_29424)].join('')));\n\n}\n}\n} else {\n}\n\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(propagation_code,new cljs.core.Keyword(null,\"no-propagate\",\"no-propagate\",-573850970))) || (tiltontec.cell.base.c_optimized_away_QMARK_(c)))){\n} else {\nif(cljs.core.map_QMARK_(cljs.core.deref(c))){\n} else {\nthrow (new Error(\"Assert failed: (map? (clojure.core/deref c))\"));\n}\n\n(tiltontec.cell.evaluate.propagate.cljs$core$IFn$_invoke$arity$3 ? tiltontec.cell.evaluate.propagate.cljs$core$IFn$_invoke$arity$3(c,prior_value_29394,callers_29420) : tiltontec.cell.evaluate.propagate.call(null,c,prior_value_29394,callers_29420));\n}\n} else {\n}\n}finally {(tiltontec.cell.base._STAR_depender_STAR_ = _STAR_depender_STAR__orig_val__29281_29392);\n}\nreturn result__26632__auto__;\n});\ntiltontec.cell.evaluate.unlink_from_used = (function tiltontec$cell$evaluate$unlink_from_used(c,why){\n\nvar iter__4652__auto___29431 = (function tiltontec$cell$evaluate$unlink_from_used_$_iter__29286(s__29287){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__29287__$1 = s__29287;\nwhile(true){\nvar temp__5753__auto__ = cljs.core.seq(s__29287__$1);\nif(temp__5753__auto__){\nvar s__29287__$2 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__29287__$2)){\nvar c__4650__auto__ = cljs.core.chunk_first(s__29287__$2);\nvar size__4651__auto__ = cljs.core.count(c__4650__auto__);\nvar b__29289 = cljs.core.chunk_buffer(size__4651__auto__);\nif((function (){var i__29288 = (0);\nwhile(true){\nif((i__29288 < size__4651__auto__)){\nvar used = cljs.core._nth(c__4650__auto__,i__29288);\ncljs.core.chunk_append(b__29289,tiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"callers\",\"callers\",-1991542784),used], null),cljs.core.disj.cljs$core$IFn$_invoke$arity$2(tiltontec.cell.base.c_callers(used),c)));\n\nvar G__29433 = (i__29288 + (1));\ni__29288 = G__29433;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__29289),tiltontec$cell$evaluate$unlink_from_used_$_iter__29286(cljs.core.chunk_rest(s__29287__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__29289),null);\n}\n} else {\nvar used = cljs.core.first(s__29287__$2);\nreturn cljs.core.cons(tiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"callers\",\"callers\",-1991542784),used], null),cljs.core.disj.cljs$core$IFn$_invoke$arity$2(tiltontec.cell.base.c_callers(used),c)),tiltontec$cell$evaluate$unlink_from_used_$_iter__29286(cljs.core.rest(s__29287__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\niter__4652__auto___29431(tiltontec.cell.base.c_useds(c));\n\nreturn tiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"useds\",\"useds\",621350967),c], null),cljs.core.PersistentHashSet.EMPTY);\n});\ntiltontec.cell.evaluate.md_cell_flush = (function tiltontec$cell$evaluate$md_cell_flush(c){\nif(tiltontec.cell.base.c_ref_QMARK_(c)){\n} else {\nthrow (new Error(\"Assert failed: (c-ref? c)\"));\n}\n\nvar temp__5753__auto__ = tiltontec.cell.base.c_model(c);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar me = temp__5753__auto__;\nreturn tiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"cells-flushed\",\"cells-flushed\",-1653073949),me], null),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"cells-flushed\",\"cells-flushed\",-1653073949).cljs$core$IFn$_invoke$arity$1(me),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tiltontec.cell.base.c_slot(c),tiltontec.cell.base.c_pulse_observed(c)], null)));\n} else {\nreturn null;\n}\n});\n/**\n * Optimizes away cells who turn out not to depend on anyone, \n *   saving a lot of work at runtime. A caller/user will not bother\n *   establishing a link, and when we get to models cget will \n *   find a non-cell in a slot and Just Use It.\n */\ntiltontec.cell.evaluate.optimize_away_QMARK__BANG_ = (function tiltontec$cell$evaluate$optimize_away_QMARK__BANG_(c,prior_value){\nif(cljs.core.truth_((function (){var and__4251__auto__ = tiltontec.cell.base.c_formula_QMARK_(c);\nif(and__4251__auto__){\nvar and__4251__auto____$1 = cljs.core.empty_QMARK_(tiltontec.cell.base.c_useds(c));\nif(and__4251__auto____$1){\nvar and__4251__auto____$2 = tiltontec.cell.base.c_optimize(c);\nif(cljs.core.truth_(and__4251__auto____$2)){\nreturn (((!(tiltontec.cell.base.c_optimized_away_QMARK_(c)))) && (((tiltontec.cell.base.c_valid_QMARK_(c)) && (((cljs.core.not(tiltontec.cell.base.c_synaptic_QMARK_(c))) && (cljs.core.not(tiltontec.cell.base.c_input_QMARK_(c))))))));\n} else {\nreturn and__4251__auto____$2;\n}\n} else {\nreturn and__4251__auto____$1;\n}\n} else {\nreturn and__4251__auto__;\n}\n})())){\ntiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"tiltontec.cell.base\",\"state\",\"tiltontec.cell.base/state\",-1967920396),c], null),new cljs.core.Keyword(null,\"optimized-away\",\"optimized-away\",876765856));\n\ntiltontec.cell.observer.c_observe.cljs$core$IFn$_invoke$arity$3(c,prior_value,new cljs.core.Keyword(null,\"opti-away\",\"opti-away\",1290785499));\n\nvar temp__5753__auto___29439 = tiltontec.cell.base.c_model(c);\nif(cljs.core.truth_(temp__5753__auto___29439)){\nvar me_29440 = temp__5753__auto___29439;\ntiltontec.util.core.rmap_meta_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"cz\",\"cz\",1670864932),me_29440], null),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.Keyword(null,\"cz\",\"cz\",1670864932).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(me_29440)),tiltontec.cell.base.c_slot(c),null));\n\ntiltontec.cell.evaluate.md_cell_flush(c);\n} else {\n}\n\nvar seq__29294_29441 = cljs.core.seq(cljs.core.seq(tiltontec.cell.base.c_callers(c)));\nvar chunk__29295_29442 = null;\nvar count__29296_29443 = (0);\nvar i__29297_29444 = (0);\nwhile(true){\nif((i__29297_29444 < count__29296_29443)){\nvar caller_29445 = chunk__29295_29442.cljs$core$IIndexed$_nth$arity$2(null,i__29297_29444);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(caller_29445,cljs.core.assoc,new cljs.core.Keyword(null,\"useds\",\"useds\",621350967),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.createAsIfByAssoc([c]),tiltontec.cell.base.c_useds(caller_29445)));\n\ntiltontec.cell.base.caller_drop(c,caller_29445);\n\ntiltontec.cell.evaluate.ensure_value_is_current(caller_29445,new cljs.core.Keyword(null,\"opti-used\",\"opti-used\",660350789),c);\n\n\nvar G__29453 = seq__29294_29441;\nvar G__29454 = chunk__29295_29442;\nvar G__29455 = count__29296_29443;\nvar G__29456 = (i__29297_29444 + (1));\nseq__29294_29441 = G__29453;\nchunk__29295_29442 = G__29454;\ncount__29296_29443 = G__29455;\ni__29297_29444 = G__29456;\ncontinue;\n} else {\nvar temp__5753__auto___29457 = cljs.core.seq(seq__29294_29441);\nif(temp__5753__auto___29457){\nvar seq__29294_29458__$1 = temp__5753__auto___29457;\nif(cljs.core.chunked_seq_QMARK_(seq__29294_29458__$1)){\nvar c__4679__auto___29459 = cljs.core.chunk_first(seq__29294_29458__$1);\nvar G__29460 = cljs.core.chunk_rest(seq__29294_29458__$1);\nvar G__29461 = c__4679__auto___29459;\nvar G__29462 = cljs.core.count(c__4679__auto___29459);\nvar G__29463 = (0);\nseq__29294_29441 = G__29460;\nchunk__29295_29442 = G__29461;\ncount__29296_29443 = G__29462;\ni__29297_29444 = G__29463;\ncontinue;\n} else {\nvar caller_29464 = cljs.core.first(seq__29294_29458__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(caller_29464,cljs.core.assoc,new cljs.core.Keyword(null,\"useds\",\"useds\",621350967),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.createAsIfByAssoc([c]),tiltontec.cell.base.c_useds(caller_29464)));\n\ntiltontec.cell.base.caller_drop(c,caller_29464);\n\ntiltontec.cell.evaluate.ensure_value_is_current(caller_29464,new cljs.core.Keyword(null,\"opti-used\",\"opti-used\",660350789),c);\n\n\nvar G__29465 = cljs.core.next(seq__29294_29458__$1);\nvar G__29466 = null;\nvar G__29467 = (0);\nvar G__29468 = (0);\nseq__29294_29441 = G__29465;\nchunk__29295_29442 = G__29466;\ncount__29296_29443 = G__29467;\ni__29297_29444 = G__29468;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.core.reset_BANG_(c,tiltontec.cell.base.c_value(c));\n} else {\nreturn null;\n}\n});\ntiltontec.cell.evaluate.c_quiesce = (function tiltontec$cell$evaluate$c_quiesce(c){\nif(cljs.core.truth_(c)){\n} else {\nthrow (new Error(\"Assert failed: c\"));\n}\n\ntiltontec.cell.base.unlink_from_callers(c);\n\ntiltontec.cell.evaluate.unlink_from_used(c,new cljs.core.Keyword(null,\"quiesce\",\"quiesce\",-798294121));\n\nreturn cljs.core.reset_BANG_(c,new cljs.core.Keyword(null,\"dead-c\",\"dead-c\",385485497));\n});\ntiltontec.cell.evaluate.not_to_be_self = (function tiltontec$cell$evaluate$not_to_be_self(me){\nvar seq__29300_29473 = cljs.core.seq(cljs.core.vals(new cljs.core.Keyword(null,\"cz\",\"cz\",1670864932).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(me))));\nvar chunk__29301_29474 = null;\nvar count__29302_29475 = (0);\nvar i__29303_29476 = (0);\nwhile(true){\nif((i__29303_29476 < count__29302_29475)){\nvar c_29477 = chunk__29301_29474.cljs$core$IIndexed$_nth$arity$2(null,i__29303_29476);\nif(cljs.core.truth_(c_29477)){\ntiltontec.cell.evaluate.c_quiesce(c_29477);\n} else {\n}\n\n\nvar G__29479 = seq__29300_29473;\nvar G__29480 = chunk__29301_29474;\nvar G__29481 = count__29302_29475;\nvar G__29482 = (i__29303_29476 + (1));\nseq__29300_29473 = G__29479;\nchunk__29301_29474 = G__29480;\ncount__29302_29475 = G__29481;\ni__29303_29476 = G__29482;\ncontinue;\n} else {\nvar temp__5753__auto___29483 = cljs.core.seq(seq__29300_29473);\nif(temp__5753__auto___29483){\nvar seq__29300_29484__$1 = temp__5753__auto___29483;\nif(cljs.core.chunked_seq_QMARK_(seq__29300_29484__$1)){\nvar c__4679__auto___29485 = cljs.core.chunk_first(seq__29300_29484__$1);\nvar G__29486 = cljs.core.chunk_rest(seq__29300_29484__$1);\nvar G__29487 = c__4679__auto___29485;\nvar G__29488 = cljs.core.count(c__4679__auto___29485);\nvar G__29489 = (0);\nseq__29300_29473 = G__29486;\nchunk__29301_29474 = G__29487;\ncount__29302_29475 = G__29488;\ni__29303_29476 = G__29489;\ncontinue;\n} else {\nvar c_29490 = cljs.core.first(seq__29300_29484__$1);\nif(cljs.core.truth_(c_29490)){\ntiltontec.cell.evaluate.c_quiesce(c_29490);\n} else {\n}\n\n\nvar G__29494 = cljs.core.next(seq__29300_29484__$1);\nvar G__29495 = null;\nvar G__29496 = (0);\nvar G__29497 = (0);\nseq__29300_29473 = G__29494;\nchunk__29301_29474 = G__29495;\ncount__29302_29475 = G__29496;\ni__29303_29476 = G__29497;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\ncljs.core.reset_BANG_(me,null);\n\nreturn tiltontec.util.core.rmap_meta_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"tiltontec.cell.base\",\"state\",\"tiltontec.cell.base/state\",-1967920396),me], null),new cljs.core.Keyword(null,\"dead\",\"dead\",-1946604091));\n});\nif((typeof tiltontec !== 'undefined') && (typeof tiltontec.cell !== 'undefined') && (typeof tiltontec.cell.evaluate !== 'undefined') && (typeof tiltontec.cell.evaluate.not_to_be !== 'undefined')){\n} else {\ntiltontec.cell.evaluate.not_to_be = (function (){var method_table__4747__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4748__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4749__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4750__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__29307 = cljs.core.get_global_hierarchy;\nreturn (fexpr__29307.cljs$core$IFn$_invoke$arity$0 ? fexpr__29307.cljs$core$IFn$_invoke$arity$0() : fexpr__29307.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"tiltontec.cell.evaluate\",\"not-to-be\"),(function (me){\nif(tiltontec.cell.base.md_ref_QMARK_(me)){\n} else {\nthrow (new Error(\"Assert failed: (md-ref? me)\"));\n}\n\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tiltontec.cell.base.ia_type(me)], null);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4751__auto__,method_table__4747__auto__,prefer_table__4748__auto__,method_cache__4749__auto__,cached_hierarchy__4750__auto__));\n})();\n}\ntiltontec.cell.evaluate.not_to_be.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (me){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"not2be-default\",\"not2be-default\",-728051456),cljs.core.type((cljs.core.truth_(me)?cljs.core.deref(me):null)),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(me)),me], 0));\n\nreturn tiltontec.cell.evaluate.not_to_be_self(me);\n}));\nif((typeof tiltontec !== 'undefined') && (typeof tiltontec.cell !== 'undefined') && (typeof tiltontec.cell.evaluate !== 'undefined') && (typeof tiltontec.cell.evaluate.unchanged_test !== 'undefined')){\n} else {\n/**\n * Cells does not propagate when nothing changes. By default, the\n *   test is =, but cells can inject a different test, and when we get\n *   to models it will be possible for a slot to have associated\n *   with it a different test.\n */\ntiltontec.cell.evaluate.unchanged_test = (function (){var method_table__4747__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4748__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4749__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4750__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__29309 = cljs.core.get_global_hierarchy;\nreturn (fexpr__29309.cljs$core$IFn$_invoke$arity$0 ? fexpr__29309.cljs$core$IFn$_invoke$arity$0() : fexpr__29309.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"tiltontec.cell.evaluate\",\"unchanged-test\"),(function (me,slot){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_(me)?cljs.core.type(cljs.core.deref(me)):null),slot], null);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4751__auto__,method_table__4747__auto__,prefer_table__4748__auto__,method_cache__4749__auto__,cached_hierarchy__4750__auto__));\n})();\n}\ntiltontec.cell.evaluate.unchanged_test.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (self,slotname){\nreturn cljs.core._EQ_;\n}));\ntiltontec.cell.evaluate.c_value_changed_QMARK_ = (function tiltontec$cell$evaluate$c_value_changed_QMARK_(c,new_value,old_value){\nreturn cljs.core.not((function (){var fexpr__29311 = (function (){var or__4253__auto__ = new cljs.core.Keyword(null,\"unchanged-if\",\"unchanged-if\",-923210106).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(c));\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn tiltontec.cell.evaluate.unchanged_test.cljs$core$IFn$_invoke$arity$2(tiltontec.cell.base.c_model(c),tiltontec.cell.base.c_slot(c));\n}\n})();\nreturn (fexpr__29311.cljs$core$IFn$_invoke$arity$2 ? fexpr__29311.cljs$core$IFn$_invoke$arity$2(new_value,old_value) : fexpr__29311.call(null,new_value,old_value));\n})());\n});\ntiltontec.cell.evaluate._STAR_custom_propagater_STAR_ = null;\n\n/**\n * A cell:\n *   - notifies its callers of its change;\n *   - calls any observer; and\n *   - if ephemeral, silently reverts to nil.\n */\ntiltontec.cell.evaluate.propagate = (function tiltontec$cell$evaluate$propagate(c,prior_value,callers){\nif(cljs.core.truth_(tiltontec.cell.integrity._STAR_one_pulse_QMARK__STAR_)){\nif(cljs.core.truth_(tiltontec.cell.evaluate._STAR_custom_propagater_STAR_)){\nreturn tiltontec.cell.evaluate._STAR_custom_propagater_STAR_.call(null,c,prior_value);\n} else {\nreturn null;\n}\n} else {\ntiltontec.util.core.rmap_setf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"pulse-last-changed\",\"pulse-last-changed\",1035703380),c], null),cljs.core.deref(tiltontec.cell.base._PLUS_pulse_PLUS_));\n\nvar _STAR_depender_STAR__orig_val__29316 = tiltontec.cell.base._STAR_depender_STAR_;\nvar _STAR_call_stack_STAR__orig_val__29317 = tiltontec.cell.base._STAR_call_stack_STAR_;\nvar _STAR_c_prop_depth_STAR__orig_val__29318 = tiltontec.cell.base._STAR_c_prop_depth_STAR_;\nvar _STAR_defer_changes_STAR__orig_val__29319 = tiltontec.cell.base._STAR_defer_changes_STAR_;\nvar _STAR_depender_STAR__temp_val__29320 = null;\nvar _STAR_call_stack_STAR__temp_val__29321 = null;\nvar _STAR_c_prop_depth_STAR__temp_val__29322 = (tiltontec.cell.base._STAR_c_prop_depth_STAR_ + (1));\nvar _STAR_defer_changes_STAR__temp_val__29323 = true;\n(tiltontec.cell.base._STAR_depender_STAR_ = _STAR_depender_STAR__temp_val__29320);\n\n(tiltontec.cell.base._STAR_call_stack_STAR_ = _STAR_call_stack_STAR__temp_val__29321);\n\n(tiltontec.cell.base._STAR_c_prop_depth_STAR_ = _STAR_c_prop_depth_STAR__temp_val__29322);\n\n(tiltontec.cell.base._STAR_defer_changes_STAR_ = _STAR_defer_changes_STAR__temp_val__29323);\n\ntry{if(cljs.core.truth_((function (){var and__4251__auto__ = prior_value;\nif(cljs.core.truth_(and__4251__auto__)){\nvar and__4251__auto____$1 = tiltontec.cell.base.c_model(c);\nif(cljs.core.truth_(and__4251__auto____$1)){\nreturn tiltontec.cell.base.md_slot_owning_QMARK_(cljs.core.type(tiltontec.cell.base.c_model(c)),tiltontec.cell.base.c_slot(c));\n} else {\nreturn and__4251__auto____$1;\n}\n} else {\nreturn and__4251__auto__;\n}\n})())){\nvar temp__5753__auto___29507 = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(tiltontec.util.core.set_ify(prior_value),tiltontec.util.core.set_ify(tiltontec.cell.base.c_value(c)));\nif(cljs.core.truth_(temp__5753__auto___29507)){\nvar ownees_29508 = temp__5753__auto___29507;\nvar seq__29324_29509 = cljs.core.seq(ownees_29508);\nvar chunk__29325_29510 = null;\nvar count__29326_29511 = (0);\nvar i__29327_29512 = (0);\nwhile(true){\nif((i__29327_29512 < count__29326_29511)){\nvar ownee_29513 = chunk__29325_29510.cljs$core$IIndexed$_nth$arity$2(null,i__29327_29512);\ntiltontec.cell.evaluate.not_to_be.cljs$core$IFn$_invoke$arity$1(ownee_29513);\n\n\nvar G__29514 = seq__29324_29509;\nvar G__29515 = chunk__29325_29510;\nvar G__29516 = count__29326_29511;\nvar G__29517 = (i__29327_29512 + (1));\nseq__29324_29509 = G__29514;\nchunk__29325_29510 = G__29515;\ncount__29326_29511 = G__29516;\ni__29327_29512 = G__29517;\ncontinue;\n} else {\nvar temp__5753__auto___29518__$1 = cljs.core.seq(seq__29324_29509);\nif(temp__5753__auto___29518__$1){\nvar seq__29324_29519__$1 = temp__5753__auto___29518__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__29324_29519__$1)){\nvar c__4679__auto___29520 = cljs.core.chunk_first(seq__29324_29519__$1);\nvar G__29521 = cljs.core.chunk_rest(seq__29324_29519__$1);\nvar G__29522 = c__4679__auto___29520;\nvar G__29523 = cljs.core.count(c__4679__auto___29520);\nvar G__29524 = (0);\nseq__29324_29509 = G__29521;\nchunk__29325_29510 = G__29522;\ncount__29326_29511 = G__29523;\ni__29327_29512 = G__29524;\ncontinue;\n} else {\nvar ownee_29525 = cljs.core.first(seq__29324_29519__$1);\ntiltontec.cell.evaluate.not_to_be.cljs$core$IFn$_invoke$arity$1(ownee_29525);\n\n\nvar G__29526 = cljs.core.next(seq__29324_29519__$1);\nvar G__29527 = null;\nvar G__29528 = (0);\nvar G__29529 = (0);\nseq__29324_29509 = G__29526;\nchunk__29325_29510 = G__29527;\ncount__29326_29511 = G__29528;\ni__29327_29512 = G__29529;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n} else {\n}\n} else {\n}\n\n(tiltontec.cell.evaluate.propagate_to_callers.cljs$core$IFn$_invoke$arity$2 ? tiltontec.cell.evaluate.propagate_to_callers.cljs$core$IFn$_invoke$arity$2(c,callers) : tiltontec.cell.evaluate.propagate_to_callers.call(null,c,callers));\n\nif(tiltontec.cell.base.c_optimized_away_QMARK_(c)){\n} else {\nif(cljs.core.truth_((function (){var or__4253__auto__ = (cljs.core.deref(tiltontec.cell.base._PLUS_pulse_PLUS_) > tiltontec.cell.base.c_pulse_observed(c));\nif(or__4253__auto__){\nreturn or__4253__auto__;\n} else {\nreturn cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([tiltontec.cell.base.c_lazy(c)]),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-asked\",\"once-asked\",-1758934854),new cljs.core.Keyword(null,\"always\",\"always\",-1772028770),true], null));\n}\n})())){\ntiltontec.cell.observer.c_observe.cljs$core$IFn$_invoke$arity$3(c,prior_value,new cljs.core.Keyword(null,\"propagate\",\"propagate\",274376905));\n} else {\n}\n}\n\nreturn tiltontec.cell.evaluate.ephemeral_reset(c);\n}finally {(tiltontec.cell.base._STAR_defer_changes_STAR_ = _STAR_defer_changes_STAR__orig_val__29319);\n\n(tiltontec.cell.base._STAR_c_prop_depth_STAR_ = _STAR_c_prop_depth_STAR__orig_val__29318);\n\n(tiltontec.cell.base._STAR_call_stack_STAR_ = _STAR_call_stack_STAR__orig_val__29317);\n\n(tiltontec.cell.base._STAR_depender_STAR_ = _STAR_depender_STAR__orig_val__29316);\n}\n}\n});\ntiltontec.cell.evaluate.propagate_to_callers = (function tiltontec$cell$evaluate$propagate_to_callers(c,callers){\nif(cljs.core.empty_QMARK_(callers)){\nreturn null;\n} else {\nvar causation = cljs.core.cons(c,tiltontec.cell.base._STAR_causation_STAR_);\nreturn tiltontec.cell.integrity.call_with_integrity(new cljs.core.Keyword(null,\"tell-dependents\",\"tell-dependents\",1916330388),c,(function (opcode,defer_info){\nif(cljs.core.truth_(tiltontec.cell.base.mdead_QMARK_.cljs$core$IFn$_invoke$arity$1(tiltontec.cell.base.c_model(c)))){\nreturn tiltontec.util.base.call_trc.cljs$core$IFn$_invoke$arity$variadic(\"WHOAA!!!! dead by time :tell-deps dispatched; bailing\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([c], 0));\n} else {\nvar _STAR_causation_STAR__orig_val__29330 = tiltontec.cell.base._STAR_causation_STAR_;\nvar _STAR_causation_STAR__temp_val__29331 = causation;\n(tiltontec.cell.base._STAR_causation_STAR_ = _STAR_causation_STAR__temp_val__29331);\n\ntry{var seq__29332 = cljs.core.seq(cljs.core.seq(callers));\nvar chunk__29333 = null;\nvar count__29334 = (0);\nvar i__29335 = (0);\nwhile(true){\nif((i__29335 < count__29334)){\nvar caller = chunk__29333.cljs$core$IIndexed$_nth$arity$2(null,i__29335);\nif(cljs.core.truth_((function (){var or__4253__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tiltontec.cell.base.c_state(caller),new cljs.core.Keyword(null,\"quiesced\",\"quiesced\",421940903));\nif(or__4253__auto__){\nreturn or__4253__auto__;\n} else {\nvar or__4253__auto____$1 = tiltontec.cell.integrity.c_current_QMARK_(caller);\nif(or__4253__auto____$1){\nreturn or__4253__auto____$1;\n} else {\nvar or__4253__auto____$2 = cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([tiltontec.cell.base.c_lazy(caller)]),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [true,new cljs.core.Keyword(null,\"always\",\"always\",-1772028770),new cljs.core.Keyword(null,\"once-asked\",\"once-asked\",-1758934854)], null));\nif(cljs.core.truth_(or__4253__auto____$2)){\nreturn or__4253__auto____$2;\n} else {\nreturn ((cljs.core.not(cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([c]),tiltontec.cell.base.c_useds(caller)))) && ((!(tiltontec.cell.base.c_optimized_away_QMARK_(c)))));\n}\n}\n}\n})())){\n} else {\ntiltontec.cell.evaluate.calculate_and_set(caller,new cljs.core.Keyword(null,\"propagate\",\"propagate\",274376905),c);\n\n}\n\n\nvar G__29531 = seq__29332;\nvar G__29532 = chunk__29333;\nvar G__29533 = count__29334;\nvar G__29534 = (i__29335 + (1));\nseq__29332 = G__29531;\nchunk__29333 = G__29532;\ncount__29334 = G__29533;\ni__29335 = G__29534;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__29332);\nif(temp__5753__auto__){\nvar seq__29332__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__29332__$1)){\nvar c__4679__auto__ = cljs.core.chunk_first(seq__29332__$1);\nvar G__29535 = cljs.core.chunk_rest(seq__29332__$1);\nvar G__29536 = c__4679__auto__;\nvar G__29537 = cljs.core.count(c__4679__auto__);\nvar G__29538 = (0);\nseq__29332 = G__29535;\nchunk__29333 = G__29536;\ncount__29334 = G__29537;\ni__29335 = G__29538;\ncontinue;\n} else {\nvar caller = cljs.core.first(seq__29332__$1);\nif(cljs.core.truth_((function (){var or__4253__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tiltontec.cell.base.c_state(caller),new cljs.core.Keyword(null,\"quiesced\",\"quiesced\",421940903));\nif(or__4253__auto__){\nreturn or__4253__auto__;\n} else {\nvar or__4253__auto____$1 = tiltontec.cell.integrity.c_current_QMARK_(caller);\nif(or__4253__auto____$1){\nreturn or__4253__auto____$1;\n} else {\nvar or__4253__auto____$2 = cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([tiltontec.cell.base.c_lazy(caller)]),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [true,new cljs.core.Keyword(null,\"always\",\"always\",-1772028770),new cljs.core.Keyword(null,\"once-asked\",\"once-asked\",-1758934854)], null));\nif(cljs.core.truth_(or__4253__auto____$2)){\nreturn or__4253__auto____$2;\n} else {\nreturn ((cljs.core.not(cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([c]),tiltontec.cell.base.c_useds(caller)))) && ((!(tiltontec.cell.base.c_optimized_away_QMARK_(c)))));\n}\n}\n}\n})())){\n} else {\ntiltontec.cell.evaluate.calculate_and_set(caller,new cljs.core.Keyword(null,\"propagate\",\"propagate\",274376905),c);\n\n}\n\n\nvar G__29539 = cljs.core.next(seq__29332__$1);\nvar G__29540 = null;\nvar G__29541 = (0);\nvar G__29542 = (0);\nseq__29332 = G__29539;\nchunk__29333 = G__29540;\ncount__29334 = G__29541;\ni__29335 = G__29542;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}finally {(tiltontec.cell.base._STAR_causation_STAR_ = _STAR_causation_STAR__orig_val__29330);\n}}\n}));\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","tiltontec/cell/evaluate.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",["^ ","~$wtrx","~$tiltontec.util.base","~$trx","^D","~$prog1","^D","~$without-c-dependency","~$tiltontec.cell.base","~$pcell","^H","~$with-integrity","~$tiltontec.cell.integrity"],"~:excludes",["~#set",[]],"~:name","~$tiltontec.cell.evaluate","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$tiltontec.cell.observer","^U","^H","^H","~$tiltontec.util.core","^V","~$cty","^H","~$cljs.core","^X","~$goog","^Y","~$clojure.set","^Z","^D","^D","^K","^K"],"~:seen",["^M",["~:require"]],"~:uses",["^ ","~$c-md-name","^H","~$set-ify","^V","~$caller-ensure","^H","~$*not-to-be*","^H","~$caller-drop","^H","~$c-input?","^H","~$c-synaptic?","^H","~$c-value-state","^H","~$c-optimized-away?","^H","~$c-current?","^K","~$c-optimize","^H","~$*one-pulse?*","^K","~$c-valid?","^H","~$any-ref?","^V","~$*causation*","^H","~$*defer-changes*","^H","~$c-pulse","^H","~$+pulse+","^H","~$c-pulse-last-changed","^H","~$md-ref?","^H","~$rmap-meta-setf","^V","~$c-value","^H","~$mdead?","^H","~$err","^V","~$c-callers","^H","~$c-ephemeral?","^H","~$c-ref?","^H","~$c-model","^H","~$c-pulse-observed","^H","~$ia-type","^H","~$c-slot","^H","~$c-rule","^H","~$c-observe","^U","~$unlink-from-callers","^H","~$c-formula?","^H","~$c-me","^H","~$c-lazy","^H","~$difference","^Z","~$md-slot-owning?","^H","~$c-useds","^H","~$*call-stack*","^H","~$*c-prop-depth*","^H","~$c-pulse-update","^K","~$c-unbound?","^H","~$*depender*","^H","~$rmap-setf","^V","~$c-state","^H"],"~:require-macros",["^ ","^D","^D","^H","^H","^W","^H","^K","^K","^X","^X"],"~:form",["~#list",["~$ns","^O",["^27",["^10",["^Z","~:refer",["^1W"]],["^D","~:refer-macros",["^C","^E","^F"]],["^V","^29",["^1?","^23","^1I","^1F","^13"]],["^H","^2:",["^G","^I"],"^29",["^1:","^1T","^1G","^1<","^21","^17","^1O","^1M","^1H","^1>","^1Y","^1L","^1E","^24","^1C","^1N","^1Z","^1A","^1Q","^1U","^19","^1J","^14","^1S","^1@","^18","^16","^12","^1B","^1D","^1K","^1P","^22","^15","^1[","^1X","^1V"],"~:as","^W"],["^U","^29",["^1R"]],["^K","^2:",["^J"],"^29",["^1=","^1;","^20"]]]]]],"~:flags",["^ ","^10",["^M",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^X","^Z","^D","^V","^H","^U","^K"]],"^R","^O","~:resource-id",["~:shadow.build.classpath/resource","tiltontec/cell/evaluate.cljc"],"~:compiled-at",1645592439871,"^P",["^ ","^U","^U","^H","^H","^V","^V","^W","^H","^X","^X","^Y","^Y","^Z","^Z","^D","^D","^K","^K"],"~:resource-name","tiltontec/cell/evaluate.cljc","~:warnings",[],"~:source","(ns tiltontec.cell.evaluate\n  (:require\n      [clojure.set :refer [difference]]\n      ;#?(:clj [taoensso.tufte :as tufte :refer :all]\n      ;   :cljs [taoensso.tufte :as tufte :refer-macros (defnp p profiled profile)])\n      #?(:cljs [tiltontec.util.base\n                      :refer-macros [wtrx trx prog1]]\n               :clj  [tiltontec.util.base\n                      :refer :all])\n      [tiltontec.util.core\n       :refer [any-ref? rmap-setf err rmap-meta-setf set-ify]]\n      #?(:clj [tiltontec.cell.base :refer :all :as cty]\n         :cljs [tiltontec.cell.base\n                :refer-macros [without-c-dependency pcell]\n                :refer [c-optimized-away? c-formula? c-value c-optimize\n                        c-unbound? c-input?  ia-type\n                        c-model mdead? c-valid? c-useds c-ref? md-ref?\n                        c-state +pulse+ c-pulse-observed\n                        *call-stack* *defer-changes*\n                        c-rule c-me c-value-state c-callers caller-ensure\n                        unlink-from-callers *causation*\n                         c-synaptic? caller-drop c-md-name\n                        c-pulse c-pulse-last-changed c-ephemeral? c-slot\n                        *depender* *not-to-be* \n                        *c-prop-depth* md-slot-owning? c-lazy] :as cty])\n      [tiltontec.cell.observer :refer [ c-observe]]\n      #?(:cljs [tiltontec.cell.integrity\n                :refer-macros [with-integrity]\n                :refer [*one-pulse?* c-current?  c-pulse-update]]\n         :clj [tiltontec.cell.integrity :refer :all])))\n\n\n\n#?(:cljs (set! *print-level* 3))\n\n(defn ephemeral-reset [rc]\n  ;; (trx :eph-reset?????? (:slot @rc)(:ephemeral? @rc)) \n  (when (c-ephemeral? rc)                                   ;; allow call on any cell, catch here\n    ;\n    ; as of Cells3 we defer resetting ephemerals because everything\n    ; else gets deferred and we cannot /really/ reset it until\n    ; within finish_business we are sure all callers have been recalculated\n    ; and all observers completed (which happens with recalc).\n    ;\n    ;;(trx :ephh-reset!!! (:slot @rc))\n    (with-integrity (:ephemeral-reset rc)\n      (when-let [me (:me @rc)]\n        ;; presumption next is that model cells live in\n        ;; their own internal slot of model FNYI\n        (#?(:clj alter :cljs swap!) me assoc (:slot @rc) nil))\n      (#?(:clj alter :cljs swap!) rc assoc :value nil))))\n\n(defn record-dependency [used]\n  (when-not (c-optimized-away? used)\n    (assert *depender*)\n    (trx nil :reco-dep!!! :used (c-slot used) :caller (c-slot *depender*))\n    (rmap-setf [:useds *depender*]\n               (conj (c-useds *depender*) used))\n    (caller-ensure used *depender*)))\n\n(declare calculate-and-set)\n\n(defn ensure-value-is-current\n  \"The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation.\"\n  \n  [c debug-id ensurer]\n\n  (cond\n                                        ; --------------------------------------------------\n    *not-to-be*                                             ; we got kicked off during not-to-be processing\n                                        ; just return what we have if valid, else nil\n    (cond\n      (c-unbound? c)\n      (do\n        (trx :unbound!!! c-slot)\n        (err \"evic> unbound slot %s of model %s\"\n             (c-slot c) (c-model c)))\n      \n      (c-valid? c)                                          ;; probably accomplishes nothing\n      (c-value c))\n\n    ;; --- easy way out: our pulse is current ---------------\n    (c-current? c)\n    (c-value c)\n\n    ;; --- also easy with an optimize edge case lost to history -------\n    (and (c-input? c)\n      (c-valid? c)                                          ;; a cFn (ruled-then-input) cell will not be valid at first\n      (not (and (c-formula? c)\n             (= (c-optimize c) :when-value-t)\n             (nil? (c-value c)))))\n    (c-value c)\n\n    ;; --- above we had valid values so did not care. now... -------\n    (when-let [md (c-model c)]\n      (mdead? (c-model c)))\n    (err #?(:clj format :cljs str) \"evic> model %s of cell %s is dead\" (c-model c) c)\n\n    ;; --- no more early exits  -------------------\n    (or (not (c-valid? c))\n      (loop [[used & urest] (seq (c-useds c))]\n        (when used\n          ;;(pcell :cnset-evicing used)\n          ;;(pcell :cnset-user c)\n          (ensure-value-is-current used :nested c)\n          ;; now see if it actually changed\n          ;; (println :pulse-checks (c-slot used)(c-pulse-last-changed used)(c-slot c)(c-pulse c))\n          (or (> (c-pulse-last-changed used)(c-pulse c))\n            (recur urest)))))\n    (do                                                     ;; we seem to need update, but...\n      (when-not (c-current? c)\n        ;;(println :not-current-so-calc!!!!!!! (c-slot c)(c-state c)(c-valid? c))\n        ;; happens if dependent changed and its observer read/updated me\n        (calculate-and-set c :evic ensurer))\n      (c-value c))\n\n    ;; we were behind the pulse but not affected by the changes that moved the pulse\n    ;; record that we are current to avoid future checking:\n    :else (do\n            ;;(trx :just-pulse!!!!! (c-slot c))\n            (c-pulse-update c :valid-uninfluenced)\n            (c-value c))))\n                         \n(defn c-get\n  \"The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been observed.\"\n\n  [c]\n  #_(when (= (c-slot c) :title)\n      (println :cget-entry (c-slot c) (ia-type (c-model c))\n               (if *depender* (c-slot *depender*) :nodepender)))\n  (cond\n    (c-ref? c) (prog1\n                (with-integrity ()\n                  (let [prior-value (c-value c)]\n                    #_(println :cget-to-evic (c-slot c) (ia-type (c-model c)))\n                      (when *depender*\n                        (str \"asker=\"\n                          (c-slot *depender*)\n                          (c-md-name *depender*)))\n                    (prog1\n\n                     (let [ev (ensure-value-is-current c :c-read nil)]\n                        ;; (when (= (c-slot c) :title) (println :evic ev))\n                        ev)\n                     ;; this is new here, intended to awaken standalone cells JIT\n                     ;; /do/ might be better inside evic, or test here\n                     ;; to see if c-model is nil? (trying latter...)\n                     (when (and (nil? (c-model c))\n                                (= (c-state c) :nascent)\n                                (> @+pulse+ (c-pulse-observed c)))\n                       (rmap-setf [::cty/state c] :awake)\n                       (c-observe c prior-value :cget)\n                       (ephemeral-reset c)))))\n                (when *depender*\n                  (record-dependency c)))\n    (any-ref? c) @c\n    :else c))\n\n(defn <cget [c]\n  (c-get c))\n\n(declare calculate-and-link\n         c-value-assume)\n\n(defn calculate-and-set\n  \"Calculate, link, record, and propagate.\"\n  [c dbgid dbgdata]\n  (do                                                       ;; (wtrx [0 20 :cnset-entry (c-slot c)]\n    (let [[raw-value propagation-code] (calculate-and-link c)]\n      ;;(trx :cn-set-sees!!!! (c-slot c) raw-value propagation-code)\n      (when-not (c-optimized-away? c)\n        (assert (map? @c) \"calc-n-set\")\n\n        ;; this check for optimized-away? arose because a rule using without-c-dependency\n        ;; can be re-entered unnoticed since that clears *call-stack*. If re-entered, a subsequent\n        ;; re-exit will be of an optimized away cell, which will have been assumed\n        ;; as part of the opti-away processing.\n        ;;(trx :calc-n-set->assume raw-value)\n        (c-value-assume c raw-value propagation-code)))))\n\n(declare unlink-from-used)\n\n(defn calculate-and-link\n  \"The name is accurate: we do no more than invoke the\n  rule of a formula and return its value*, but along the\n  way the links between dependencies and dependents get\n  determined anew.\n\n  * Well, we also look to see if a synaptic cell has attached a\n  propagaion code to a vector used to wrap the raw value, which we then unpack.\"\n  [c]\n  (binding [*call-stack* (cons c *call-stack*)\n            *depender* c\n            *defer-changes* true]\n    (unlink-from-used c :pre-rule-clear)\n    (assert (c-rule c) (#?(:clj format :cljs str) \"No rule in %s type %s\" (:slot c)(type @c)))\n\n    (let [raw-value ((c-rule c) c)\n          prop-code? (and (c-synaptic? c)\n                         (vector? raw-value)\n                         (contains? (meta raw-value) :propagate))]\n\n      (if prop-code?\n        [(first raw-value) (:propagate  (meta raw-value) )]\n        [raw-value nil]))))\n\n;;; --- awakening ------------------------------------\n\n(defmulti c-awaken (fn [c]\n                     #?(:clj (type c)\n                        :cljs (:type (meta c)))))\n\n(defmethod c-awaken :default [c]\n  (trx :awk-fallthru-entry (type c)(seq? c)(coll? c)(vector? c))\n  (cond\n    (coll? c) (doall (for [ce c]\n                       (c-awaken ce)))\n    :else\n    (println :c-awaken-fall-thru (if (any-ref? c)\n                                   [:ref-of (type c) @c]\n                                   [:unref c (type c)]))))\n\n(defmethod c-awaken ::cty/cell [c]\n  (assert (c-input? c))\n  ;\n  ; nothing to calculate, but every cellular slot should be output on birth\n  ;\n\n  (#?(:clj dosync :cljs do)\n  ;;(prn :awk-c c @+pulse+ (c-pulse-observed c)(c-value-state c))\n   (when (> @+pulse+ (c-pulse-observed c))                  ;; safeguard against double-call\n     (when-let [me (c-me c)]\n       (rmap-setf [(c-slot c) me] (c-value c)))\n     (c-observe c :cell-awaken)\n     (ephemeral-reset c))))\n\n(defmethod c-awaken ::cty/c-formula [c]\n  (#?(:clj dosync :cljs do)\n   ;; hhack -- bundle this up into reusable with evic\n   ;;(trx :c-formula-awk (c-slot c)(c-current? c))\n   (binding [*depender* nil]\n     (when-not (c-current? c)\n       (calculate-and-set c :fn-c-awaken nil)))))\n\n;; ------------------------------------------------------------\n\n(declare c-absorb-value\n         optimize-away?!\n         propagate\n         c-value-changed?)\n\n(defn md-slot-value-store [me slot value]\n  (assert me)\n  (assert (any-ref? me))\n  ;(trx :mdsv-store slot (flz value))\n  (rmap-setf [slot me] value))\n\n(defn c-value-assume\n  \"The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells.\"\n\n  [c new-value propagation-code]\n\n  (assert (c-ref? c))\n  ;; (println :cva-entry (c-slot c) new-value)\n  (do                                                       ;; (wtrx (0 100 :cv-ass (:slot @c) new-value)\n        (prog1 new-value                                    ;; sans doubt\n               (without-c-dependency\n                (let [prior-value (c-value c)\n                      prior-state (c-value-state c)]\n\n                  ;; --- cell maintenance ---\n                  ;; hhhack: new for 4/19/2016: even if no news at\n                  ;; least honor the reset!\n                  ;;\n                  (rmap-setf [:value c] new-value)\n                  (rmap-setf [::cty/state c] :awake)\n                  #_ (trx :new-vlue-installed (c-slot c) \n                       new-value\n                       (:value c))\n                  ;; \n                  ;; --- model maintenance ---\n                  (when (and (c-model c)\n                             (not (c-synaptic? c)))\n                    (md-slot-value-store (c-model c) (c-slot c) new-value))\n                  ;;(trx :val-stored new-value)\n                  (c-pulse-update c :slotv-assume)\n                  #_(println :maybe-propping  (c-slot c) new-value\n                           :priorstate prior-state\n                           :propcode propagation-code\n                           :changed? (c-value-changed? c new-value prior-value))\n                  (when (or (not (some #{prior-state} [:valid :uncurrent]))\n                            (= propagation-code true)       ;; forcing\n                            (when-not (= propagation-code false)\n                              (c-value-changed? c new-value prior-value)))\n                    ;;\n                    ;; --- something happened ---\n                    ;;\n                    ;; we may be overridden by a :no-propagate below, but anyway\n                    ;; we now can look to see if we can be optimized away\n                    ;;(trx :sth-happened)\n                    (let [callers (c-callers c)]            ;; get a copy before we might optimize away\n                      (when-let [optimize (and (c-formula? c)\n                                               (c-optimize c))]\n\n                        (case optimize\n                          :when-value-t (when (c-value c)\n                                          (trx nil :when-value-t (c-slot c))\n                                          (unlink-from-used c :when-value-t))\n                          true (optimize-away?! c prior-value)))\n\n                      ;; --- data flow propagation -----------\n\n                      (when-not (or (= propagation-code :no-propagate)\n                                    (c-optimized-away? c))\n                        (assert (map? @c))\n                        #_(println :propping!!!! (c-slot c) new-value prior-value\n                                 :to-caller-ct (count callers))\n                        (propagate c prior-value callers)))))))))\n\n\n;; --- unlinking ----------------------------------------------\n(defn unlink-from-used [c why]\n  \"Tell dependencies they need not notify us when they change,\nthen clear our record of them.\"\n  (for [used (c-useds c)]\n    (do\n        (rmap-setf [:callers used] (disj (c-callers used) c))))\n\n  (rmap-setf [:useds c] #{}))\n\n(defn md-cell-flush [c]\n  (assert (c-ref? c))\n  (when-let [me (c-model c)]\n    (rmap-setf [:cells-flushed me]\n               (conj (:cells-flushed me)\n                     [(c-slot c)(c-pulse-observed c)]))))\n\n;; --- optimize away ------------------------------------------\n;; optimizing away cells who turn out not to depend on anyone \n;; saves a lot of work at runtime.\n\n\n(defn optimize-away?!\n  \"Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a slot and Just Use It.\"\n\n  [c prior-value]\n  (when (and (c-formula? c)\n             (empty? (c-useds c))\n             (c-optimize c)\n             (not (c-optimized-away? c))                    ;; c-streams (FNYI) may come this way repeatedly even if optimized away\n             (c-valid? c)                                   ;; /// when would this not be the case? and who cares?\n             (not (c-synaptic? c))                          ;; no slot to cache invariant result, so they have to stay around)\n             (not (c-input? c)))                            ;; yes, dependent cells can be inputp\n\n    ;;(println :optimizing-away!!!! (c-slot c)(c-useds c))\n    (rmap-setf [::cty/state c] :optimized-away)             ;; leaving this for now, but we toss\n                                        ; the cell below. hhack\n    (c-observe c prior-value :opti-away)\n\n    (when-let [me (c-model c)]\n      ;; (when (= :login (:name @me))   (println :opti-away-nails-cz!!!!!!!!!! (c-slot c)))\n      (rmap-meta-setf [:cz me] (assoc (:cz (meta me)) (c-slot c) nil))\n      (md-cell-flush c))\n    \n    ;; let callers know they need not check us for currency again\n    (doseq [caller (seq (c-callers c))]\n      (#?(:clj alter :cljs swap!) caller assoc :useds (remove #{c} (c-useds caller)))\n      (caller-drop c caller)\n      ;;; (trc \"nested opti\" c caller)\n      ;;(optimize-away?! caller) ;; rare but it happens when rule says (or .cache ...)\n      (ensure-value-is-current caller :opti-used c))        ;; this will get round to optimizing\n                                        ; them if necessary, and if not they do need\n                                        ; to have one last notification if this was\n                                        ; a rare mid-life optimization\n    (#?(:clj ref-set :cljs reset!) c (c-value c))\n    ))\n\n;; --- c-quiesce -----------\n\n(defn c-quiesce [c]\n  (assert c)\n  (unlink-from-callers c)\n  (unlink-from-used c :quiesce)\n  (#?(:clj ref-set :cljs reset!) c :dead-c))\n\n;; --- not-to-be --\n\n(defn not-to-be-self [me]\n  (doseq [c (vals (:cz (meta me)))]\n    (when c                                                 ;; not if optimized away\n      (c-quiesce c)))\n  (#?(:clj ref-set :cljs reset!) me nil)\n  (rmap-meta-setf [::cty/state me] :dead))\n\n(defmulti not-to-be (fn [me]\n                      (assert (md-ref? me))\n                      [(ia-type me)]))\n\n(defmethod not-to-be :default [me]\n  (println :not2be-default (type (when me @me)) (:id @me) me)\n  (not-to-be-self me))\n\n;----------------- change detection ---------------------------------\n\n(defmulti unchanged-test\n  \"Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a slot to have associated\n  with it a different test.\"\n\n  (fn [me slot]\n    [(when me (type @me)) slot]))\n\n(defmethod unchanged-test :default [self slotname]\n  =)\n\n(defn c-value-changed? [c new-value old-value]\n  (not ((or (:unchanged-if @c)\n            (unchanged-test (c-model c) (c-slot c)))\n        new-value old-value)))\n\n;;--------------- change propagation  ----------------------------\n\n(def ^:dynamic *custom-propagater* nil)\n\n(declare propagate-to-callers\n\n         md-slot-cell-flushed)\n\n(defn propagate\n  \"A cell:\n  - notifies its callers of its change;\n  - calls any observer; and\n  - if ephemeral, silently reverts to nil.\"\n\n  ;; /do/ support other values besides nil as the \"resting\" value \n\n  [c prior-value callers]\n\n  ;; (trx :propagate (:slot @c))\n\n  (cond\n    *one-pulse?* (when *custom-propagater*\n                   (*custom-propagater* c prior-value))\n    ;; ----------------------------------\n    :else\n    (do\n      ;;(println :upd-pulse-last-chg-to @+pulse+ c)\n      (rmap-setf [:pulse-last-changed c] @+pulse+)\n\n      (binding [*depender* nil\n                *call-stack* nil\n                *c-prop-depth*  (inc *c-prop-depth*)\n                *defer-changes* true]\n        ;; --- manifest new value as needed ---\n        ;;\n        ;; 20061030 Trying not.to.be first because doomed instances may be interested in callers\n        ;; who will decide to propagate. If a family instance kids slot is changing, a doomed kid\n        ;; will be out of the kids but not yet quiesced. If the propagation to this rule asks the kid\n        ;; to look at its siblings (say a view instance being deleted from a stack who looks to the psib\n        ;; pb to decide its own pt), the doomed kid will still have a parent but not be in its kids slot\n        ;; when it goes looking for a sibling relative to its position.\n        (when (and prior-value\n                   (c-model c)\n                   (md-slot-owning? (type (c-model c)) (c-slot c)))\n          (when-let [ownees (difference (set-ify prior-value) (set-ify (c-value c)))]\n            (doseq [ownee ownees]\n              (not-to-be ownee))))\n\n        (propagate-to-callers c callers)\n        ;;(trx :obs-chkpulse!!!!!!!! @+pulse+ (c-pulse-observed c))\n\n        (when-not (c-optimized-away? c)                     ;; they get observed at the time\n          ;;(trx :not-opti!!!! @c)\n          (when (or (> @+pulse+ (c-pulse-observed c))\n                  (some #{(c-lazy c)}\n                    [:once-asked :always true]))            ;; messy: these can get setfed/propagated twice in one pulse+\n            ;;(println :observing!!!!!!!!!!! (c-slot c) (c-value c))\n            (c-observe c prior-value :propagate)))\n\n        ;;\n        ;; with propagation done, ephemerals can be reset. we also do this in c-awaken, so\n        ;; let the fn decide if C really is ephemeral. Note that it might be possible to leave\n        ;; this out and use the pulse to identify obsolete ephemerals and clear them\n        ;; when read. That would avoid ever making again bug I had in which I had the reset\n        ;; inside slot-value-observe,\n        ;; thinking that that always followed propagation to callers. It would also make\n        ;; debugging easier in that I could find the last ephemeral value in the inspector.\n        ;; would this be bad for persistent CLOS, in which a DB would think there was still a link\n        ;; between two records until the value actually got cleared?\n        ;;\n        (ephemeral-reset c)))))\n\n(defn propagate-to-callers [c callers]\n  ;;\n  ;;  We must defer propagation to callers because of an edge case in which:\n  ;;    - X tells A to recalculate\n  ;;    - A asks B for its current value\n  ;;    - B must recalculate because it too uses X\n  ;;    - if B propagates to its callers after recalculating instead of deferring it\n  ;;       - B might tell H to reclaculate, where H decides this time to use A\n  ;;       - but A is in the midst of recalculating, and cannot complete until B returns.\n  ;;         but B is busy eagerly propagating. \"This time\" is important because it means\n  ;;         there is no way one can reliably be sure H will not ask for A\n  ;;\n  (when-not (empty? callers)\n    (let [causation (cons c *causation*)]                   ;; closed over below\n      (with-integrity (:tell-dependents c)\n        (if (mdead? (c-model c))\n          (do (trx \"WHOAA!!!! dead by time :tell-deps dispatched; bailing\" c))\n          (binding [*causation* causation]\n            (doseq [caller (seq callers)]\n              (cond\n               (or                                          ;; lotsa reasons NOT to proceed\n                (= (c-state caller) :quiesced)\n                (c-current? caller)                         ;; happens if I changed when caller used me in current pulse+\n                (some #{(c-lazy caller)} [true :always :once-asked])\n\n                (and (not (some #{c} (c-useds caller)))     ; hard to follow, but it is trying to say\n                     (not (c-optimized-away? c)))   )       ; \"go ahead and notify caller one more time\n                                        ; even if I have been optimized away cuz they need to know.\"\n                                        ; Note this is why callers must be supplied, having been copied\n                                        ; before the optimization step.\n               (do #_ (trx :not-propping @+pulse+ (c-slot c)\n                     ;; :val (c-value c)\n                     :to (c-slot caller) :caller            ;; @caller\n                     (c-state caller) :current (c-current? caller)\n                     :c-not-used? (not (some #{c} (c-useds caller)))\n                     :c-not-opti (not (c-optimized-away? c))))\n\n               :else\n               (calculate-and-set caller :propagate c)))))))))\n","~:reader-features",["^M",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["cljs.core/*print-level*","tiltontec.cell.evaluate/ephemeral-reset","rc","tiltontec.cell.base/c-ephemeral?","tiltontec.cell.integrity/call-with-integrity","opcode","defer-info","temp__5753__auto__","me","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","tiltontec.cell.evaluate/record-dependency","used","tiltontec.cell.base/c-optimized-away?","js/Error","tiltontec.cell.base/*depender*","tiltontec.util.base.call_trc","tiltontec.cell.base/c-slot","tiltontec.util.core/rmap-setf","cljs.core.conj","tiltontec.cell.base/c-useds","tiltontec.cell.base/caller-ensure","tiltontec.cell.evaluate/ensure-value-is-current","c","debug-id","ensurer","tiltontec.cell.base/*not-to-be*","tiltontec.cell.base/c-unbound?","tiltontec.util.core/err","tiltontec.cell.base/c-model","tiltontec.cell.base/c-valid?","tiltontec.cell.base/c-value","tiltontec.cell.integrity/c-current?","and__4251__auto__","tiltontec.cell.base/c-input?","tiltontec.cell.base/c-formula?","cljs.core._EQ_","tiltontec.cell.base/c-optimize","md","tiltontec.cell.base/mdead?","cljs.core/str","or__4253__auto__","G__29245","vec__29246","seq__29247","cljs.core/seq","first__29248","cljs.core/first","cljs.core/next","vec__29249","seq__29250","first__29251","urest","tiltontec.cell.base/c-pulse-last-changed","tiltontec.cell.base/c-pulse","tiltontec.cell.evaluate/calculate-and-set","tiltontec.cell.integrity/c-pulse-update","tiltontec.cell.evaluate/c-get","tiltontec.cell.base/c-ref?","result__26632__auto__","prior-value","tiltontec.cell.base/c-md-name","ev","tiltontec.cell.base/c-state","tiltontec.cell.base/+pulse+","tiltontec.cell.base/c-pulse-observed","tiltontec.cell.observer.c_observe","tiltontec.util.core/any-ref?","tiltontec.cell.evaluate/<cget","dbgid","dbgdata","vec__29252","cljs.core.nth","raw-value","propagation-code","tiltontec.cell.evaluate/calculate-and-link","cljs.core/map?","tiltontec.cell.evaluate/c-value-assume","*call-stack*-orig-val__29255","*depender*-orig-val__29256","*defer-changes*-orig-val__29257","*call-stack*-temp-val__29258","*depender*-temp-val__29259","*defer-changes*-temp-val__29260","tiltontec.cell.base/*call-stack*","cljs.core/cons","tiltontec.cell.base/*defer-changes*","tiltontec.cell.evaluate/unlink-from-used","tiltontec.cell.base/c-rule","cljs.core/type","fexpr__29261","prop-code?","tiltontec.cell.base/c-synaptic?","cljs.core/vector?","cljs.core/contains?","cljs.core/meta","js/tiltontec","js/tiltontec.cell","js/tiltontec.cell.evaluate","js/tiltontec.cell.evaluate.c-awaken","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__29262","cljs.core/MultiFn","cljs.core.symbol","tiltontec.cell.evaluate/c-awaken","cljs.core/seq?","cljs.core/coll?","cljs.core.doall","iter__4652__auto__","s__29267","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__29269","cljs.core/chunk-buffer","i__29268","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29266","cljs.core/chunk-rest","cljs.core/rest","ce","cljs.core.println","tiltontec.cell.base/c-me","*depender*-orig-val__29278","*depender*-temp-val__29279","tiltontec.cell.evaluate/md-slot-value-store","slot","value","new-value","*depender*-orig-val__29281","*depender*-temp-val__29282","prior-state","tiltontec.cell.base/c-value-state","cljs.core/not","cljs.core/some","tiltontec.cell.evaluate/c-value-changed?","callers","tiltontec.cell.base/c-callers","optimize","G__29284","tiltontec.cell.evaluate/optimize-away?!","tiltontec.cell.evaluate/propagate","why","s__29287","b__29289","i__29288","iter__29286","cljs.core.disj","tiltontec.cell.evaluate/md-cell-flush","cljs.core/empty?","tiltontec.util.core/rmap-meta-setf","cljs.core.assoc","seq__29294","chunk__29295","count__29296","i__29297","c__4679__auto__","cljs.core/chunk-first","caller","cljs.core.remove","tiltontec.cell.base/caller-drop","cljs.core/reset!","tiltontec.cell.evaluate/c-quiesce","tiltontec.cell.base/unlink-from-callers","tiltontec.cell.evaluate/not-to-be-self","seq__29300","chunk__29301","count__29302","i__29303","cljs.core/vals","js/tiltontec.cell.evaluate.not-to-be","fexpr__29307","tiltontec.cell.evaluate/not-to-be","tiltontec.cell.base/md-ref?","tiltontec.cell.base/ia-type","js/tiltontec.cell.evaluate.unchanged-test","fexpr__29309","tiltontec.cell.evaluate/unchanged-test","self","slotname","cljs.core/=","old-value","fexpr__29311","tiltontec.cell.evaluate/*custom-propagater*","tiltontec.cell.integrity/*one-pulse?*","*depender*-orig-val__29316","*call-stack*-orig-val__29317","*c-prop-depth*-orig-val__29318","*defer-changes*-orig-val__29319","*depender*-temp-val__29320","*call-stack*-temp-val__29321","*c-prop-depth*-temp-val__29322","*defer-changes*-temp-val__29323","tiltontec.cell.base/*c-prop-depth*","tiltontec.cell.base/md-slot-owning?","ownees","clojure.set.difference","tiltontec.util.core/set-ify","seq__29324","chunk__29325","count__29326","i__29327","ownee","tiltontec.cell.evaluate/propagate-to-callers","tiltontec.cell.base/c-lazy","causation","tiltontec.cell.base/*causation*","*causation*-orig-val__29330","*causation*-temp-val__29331","seq__29332","chunk__29333","count__29334","i__29335"]],"~:used-vars",["^M",["~$js/tiltontec","~$tiltontec.cell.base/c-synaptic?","~$cljs.core/rest","~$tiltontec.cell.observer/c-observe","~$tiltontec.cell.base/c-valid?","~$tiltontec.cell.evaluate/record-dependency","~$tiltontec.cell.base/c-input?","~$tiltontec.cell.base/*depender*","~$tiltontec.cell.base/caller-drop","~$cljs.core/str","~$cljs.core/MultiFn","~$cljs.core/*print-level*","~$tiltontec.cell.base/c-optimized-away?","~$tiltontec.cell.base/c-unbound?","~$tiltontec.util.core/rmap-setf","~$tiltontec.cell.base/c-value-state","~$tiltontec.util.base/call-trc","~$tiltontec.cell.base/md-ref?","~$js/tiltontec.cell.evaluate","~$tiltontec.cell.integrity/c-pulse-update","~$cljs.core/vector?","~$cljs.core/=","~$tiltontec.cell.evaluate/c-awaken","~$tiltontec.cell.evaluate/md-cell-flush","~$tiltontec.cell.evaluate/md-slot-value-store","~$cljs.core/doall","~$tiltontec.cell.evaluate/ensure-value-is-current","~$tiltontec.cell.base/c-lazy","~$cljs.core/count","~$cljs.core/deref","~$tiltontec.cell.base/c-formula?","~$tiltontec.cell.base/c-me","~$cljs.core/seq","~$cljs.core/chunk-first","~$js/tiltontec.cell.evaluate.not-to-be","~$tiltontec.util.core/err","~$tiltontec.cell.evaluate/c-get","~$tiltontec.cell.evaluate/calculate-and-link","~$tiltontec.cell.evaluate/not-to-be","~$cljs.core/chunk","~$tiltontec.cell.base/c-pulse-last-changed","~$tiltontec.cell.base/c-pulse","~$tiltontec.cell.evaluate/calculate-and-set","~$tiltontec.cell.base/*causation*","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$cljs.core/atom","~$tiltontec.cell.base/*defer-changes*","~$tiltontec.cell.evaluate/*custom-propagater*","~$tiltontec.cell.evaluate/c-absorb-value","~$tiltontec.cell.base/c-rule","~$tiltontec.cell.base/caller-ensure","~$tiltontec.cell.evaluate/<cget","~$cljs.core/empty?","~$tiltontec.cell.base/c-value","~$tiltontec.cell.base/c-optimize","~$tiltontec.cell.base/c-md-name","~$tiltontec.cell.base/ia-type","~$tiltontec.cell.integrity/call-with-integrity","~$cljs.core/contains?","~$cljs.core/map?","~$cljs.core/reset!","~$cljs.core/conj","~$tiltontec.cell.evaluate/c-value-changed?","~$tiltontec.cell.base/c-callers","~$tiltontec.cell.integrity/c-current?","~$cljs.core/vals","~$cljs.core/swap!","~$cljs.core/-add-method","~$tiltontec.cell.base/c-pulse-observed","~$tiltontec.cell.evaluate/propagate-to-callers","~$cljs.core/get","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/remove","~$tiltontec.cell.base/+pulse+","~$tiltontec.util.core/set-ify","~$tiltontec.cell.integrity/*one-pulse?*","~$clojure.set/difference","~$tiltontec.cell.base/c-slot","~$cljs.core/symbol","~$tiltontec.cell.base/c-model","~$tiltontec.cell.evaluate/md-slot-cell-flushed","~$tiltontec.cell.evaluate/unlink-from-used","~$tiltontec.cell.base/mdead?","~$cljs.core/nth","~$cljs.core/meta","~$tiltontec.cell.base/*c-prop-depth*","~$cljs.core/println","~$tiltontec.cell.base/c-useds","~$cljs.core/next","~$js/tiltontec.cell.evaluate.c-awaken","~$cljs.core/chunk-cons","~$cljs.core/not","~$tiltontec.util.core/rmap-meta-setf","~$tiltontec.cell.base/*call-stack*","~$tiltontec.cell.base/md-slot-owning?","~$cljs.core/disj","~$cljs.core/cons","~$cljs.core/assoc","~$tiltontec.cell.evaluate/optimize-away?!","~$cljs.core/chunk-buffer","~$tiltontec.cell.base/*not-to-be*","~$tiltontec.cell.base/c-state","~$cljs.core/coll?","~$tiltontec.cell.evaluate/unchanged-test","~$tiltontec.cell.evaluate/ephemeral-reset","~$tiltontec.cell.evaluate/c-quiesce","~$cljs.core/first","~$cljs.core/seq?","~$tiltontec.cell.evaluate/c-value-assume","~$tiltontec.cell.evaluate/not-to-be-self","~$js/Error","~$tiltontec.cell.base/unlink-from-callers","~$js/tiltontec.cell","~$cljs.core/type","~$cljs.core/some","~$tiltontec.util.core/any-ref?","~$js/tiltontec.cell.evaluate.unchanged-test","~$tiltontec.cell.evaluate/propagate","~$cljs.core/chunked-seq?","~$tiltontec.cell.base/c-ref?","~$tiltontec.cell.base/c-ephemeral?"]]],"~:cache-keys",["~#cmap",[["^2@","tiltontec/util/core.cljc"],["f40f0a7999587a6438e21dd23037c1b6ea226634","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^M",[]],"~:deps-syms",["^Y","^X","~$clojure.string","~$cognitect.transit","^D"]]],["^2@","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","~$goog.dom.HtmlElement"]]],["^2@","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^2@","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5O"]]],["^2@","tiltontec/model/macros.cljc"],["f40f0a7999587a6438e21dd23037c1b6ea226634","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X","^H"]]],["^2@","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5P"]]],["^2@","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^2@","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","tiltontec/util/base.cljc"],["f40f0a7999587a6438e21dd23037c1b6ea226634","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X","^5I"]]],["^2@","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5M"]]],["^2@","cljs/pprint.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X","^5I","~$goog.string","~$goog.string.StringBuffer"]]],["^2@","tiltontec/cell/evaluate.cljc"],["f40f0a7999587a6438e21dd23037c1b6ea226634","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X","^Z","^D","^V","^H","^U","^K"]]],["^2@","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5P"]]],"~:SHADOW-TIMESTAMP",[1645584859000,1645584859000,1645584856000],["^2@","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5P","~$goog.reflect"]]],["^2@","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5P","~$goog.fs.blob","^5Q","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5S","^5T","^5U","^5V"]]],["^2@","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5U","~$goog.html.SafeUrl","^5V","^5P","^5O"]]],["^2@","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5P","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^62","~$goog.html.SafeStyle","^64","^5R","~$goog.html.uncheckedconversions","^5U","^5O"]]],["^2@","tiltontec/cell/observer.cljc"],["f40f0a7999587a6438e21dd23037c1b6ea226634","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X","^D","^V","^H","~$tiltontec.model.macros"]]],["^2@","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5U","^5S","^5T","^62","^68","~$goog.html.SafeStyleSheet","^64","~$goog.dom.TagName","^5R","^5V","^5P","~$goog.labs.userAgent.browser","^5L","^5M","^5O","~$goog.dom.tags","^63"]]],["^2@","tiltontec/cell/integrity.cljc"],["f40f0a7999587a6438e21dd23037c1b6ea226634","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X","^D","^V","^H"]]],["^2@","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5M"]]],["^2@","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^5X","~$com.cognitect.transit.types"]]],["^2@","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^2@","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5L","^5P","~$goog.collections.maps","^5Y","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^2@","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","tiltontec/cell/base.cljc"],["f40f0a7999587a6438e21dd23037c1b6ea226634","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X","^D","~$cljs.test","^V"]]],["^2@","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",[]]],["^2@","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5L","^5M"]]],["^2@","clojure/string.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X","^5Y","^5Z"]]],["^2@","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^6?","^6A","~$goog.math.Long"]]],["^2@","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","~$goog.dom.safe","^69","^5U","^5O"]]],["^2@","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^6?","~$com.cognitect.transit.eq","^6J"]]],["^2@","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","~$goog.labs.userAgent","^5O"]]],["^2@","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^6?"]]],["^2@","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5P","^67","^62","^68","^6;","^64","^5R","^5U","^5O","^5S"]]],["^2@","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^6@"]]],["^2@","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y"]]],["^2@","cljs/core.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^6J","~$goog.math.Integer","^5Y","^5M","^5L","~$goog.Uri","^5Z"]]],["^2@","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^6?","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^6A","^6L","^5W","^5X"]]],["^2@","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5U","^5V","^63","^5P"]]],["^2@","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5U","^68","^5V","^5M","^5P","^5O"]]],["^2@","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^60"]]],["^2@","clojure/set.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X"]]],["^2@","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5P","^5Y"]]],["^2@","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^5P","^5V"]]],["^2@","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^6?","^5X","~$com.cognitect.transit.handlers","^6A","^6@","^6J"]]],["^2@","cljs/test.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X","^5I","^?"]]],["^2@","cognitect/transit.cljs"],["ae688999ee978d238bffd4df0c0323e552d6d8dc","^5E",["^ ","^5F",null,"^5G",["^M",[]],"^5H",["^Y","^X","~$com.cognitect.transit","^6A","^6L","^6J"]]]]],"~:clj-info",["^ ","jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1627912789000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/impl.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/passes/and_or.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/tiltontec/matrix/4.1.7-SNAPSHOT/matrix-4.1.7-SNAPSHOT.jar!/tiltontec/cell/integrity.cljc",1641339238000,"jar:file:/Users/kennethtilton/.m2/repository/tiltontec/matrix/4.1.7-SNAPSHOT/matrix-4.1.7-SNAPSHOT.jar!/tiltontec/util/base.cljc",1641339238000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map/base64.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/instant.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/template.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/js_deps.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/tiltontec/matrix/4.1.7-SNAPSHOT/matrix-4.1.7-SNAPSHOT.jar!/tiltontec/util/core.cljc",1641339238000,"jar:file:/Users/kennethtilton/.m2/repository/tiltontec/matrix/4.1.7-SNAPSHOT/matrix-4.1.7-SNAPSHOT.jar!/tiltontec/cell/base.cljc",1641339238000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/core.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/api.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/externs.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/test.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/pprint.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/compiler.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1620434168000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map/base64_vlq.clj",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/tagged_literals.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/env.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/util.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/passes.cljc",1645584856000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1630576733000,"jar:file:/Users/kennethtilton/.m2/repository/tiltontec/matrix/4.1.7-SNAPSHOT/matrix-4.1.7-SNAPSHOT.jar!/tiltontec/model/macros.cljc",1641339238000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",1,"^8",5,"^9",1,"^:",28],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",["^ ","^C","^D","^E","^D","^F","^D","^G","^H","^I","^H","^J","^K"],"^L",["^M",[]],"^N","^O","^P",["^ "],"^S",null,"^T",["^ ","^U","^U","^H","^H","^V","^V","^W","^H","^X","^X","^Y","^Y","^Z","^Z","^D","^D","^K","^K"],"^[",["^M",["^10"]],"~:shadow/js-access-global",["^M",["Error"]],"^11",["^ ","^12","^H","^13","^V","^14","^H","^15","^H","^16","^H","^17","^H","^18","^H","^19","^H","^1:","^H","^1;","^K","^1<","^H","^1=","^K","^1>","^H","^1?","^V","^1@","^H","^1A","^H","^1B","^H","^1C","^H","^1D","^H","^1E","^H","^1F","^V","^1G","^H","^1H","^H","^1I","^V","^1J","^H","^1K","^H","^1L","^H","^1M","^H","^1N","^H","^1O","^H","^1P","^H","^1Q","^H","^1R","^U","^1S","^H","^1T","^H","^1U","^H","^1V","^H","^1W","^Z","^1X","^H","^1Y","^H","^1Z","^H","^1[","^H","^20","^K","^21","^H","^22","^H","^23","^V","^24","^H"],"~:defs",["^ ","~$calculate-and-set",["^ ","~:protocol-inline",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",169,"^8",7,"^9",169,"^:",24,"~:arglists",["^27",["~$quote",["^27",[["~$c","~$dbgid","~$dbgdata"]]]]],"~:doc","Calculate, link, record, and propagate."],"^N","^3J","^6","tiltontec/cell/evaluate.cljc","^:",24,"~:method-params",["^27",[["~$c","^7V","^7W"]]],"~:protocol-impl",null,"~:arglists-meta",["^27",[null,null]],"^8",1,"~:variadic?",false,"^7",169,"~:ret-tag",["^M",["~$any","~$clj-nil"]],"^9",169,"~:max-fixed-arity",3,"~:fn-var",true,"^7T",["^27",["^7U",["^27",[["~$c","^7V","^7W"]]]]],"^7X","Calculate, link, record, and propagate."],"~$c-quiesce",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",393,"^8",7,"^9",393,"^:",16,"^7T",["^27",["^7U",["^27",[["~$c"]]]]]],"^N","^53","^6","tiltontec/cell/evaluate.cljc","^:",16,"^7Y",["^27",[["~$c"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",393,"^81",["^M",[null,"^82"]],"^9",393,"^84",1,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c"]]]]]],"~$c-absorb-value",["^ ","^N","^3Q","^6","tiltontec/cell/evaluate.cljc","^7",251,"^8",1,"^9",251,"^:",24,"~:declared",true,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",251,"^8",10,"^9",251,"^:",24,"^88",true]],"~$md-slot-cell-flushed",["^ ","^N","^4F","^6","tiltontec/cell/evaluate.cljc","^7",439,"^8",1,"^9",441,"^:",30,"^88",true,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",441,"^8",10,"^9",441,"^:",30,"^88",true]],"~$unlink-from-used",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",332,"^8",7,"^9",332,"^:",23,"^7T",["^27",["^7U",["^27",[["~$c","~$why"]]]]]],"^N","^4G","^6","tiltontec/cell/evaluate.cljc","^:",23,"^7Y",["^27",[["~$c","^8;"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",332,"^81","^82","^9",332,"^84",2,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c","^8;"]]]]]],"~$unchanged-test",["^ ","^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",418,"^8",11,"^9",418,"^:",25,"^7X","Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a slot to have associated\n  with it a different test."],"^N","^51","^6","tiltontec/cell/evaluate.cljc","^:",25,"^8",1,"^7",418,"^9",418,"~:tag","^2V","^7X","Cells does not propagate when nothing changes. By default, the\n  test is =, but cells can inject a different test, and when we get\n  to models it will be possible for a slot to have associated\n  with it a different test."],"~$record-dependency",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",53,"^8",7,"^9",53,"^:",24,"^7T",["^27",["^7U",["^27",[["~$used"]]]]]],"^N","^2Q","^6","tiltontec/cell/evaluate.cljc","^:",24,"^7Y",["^27",[["^8?"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",53,"^81",["^M",[null,"^82","^83"]],"^9",53,"^84",1,"^85",true,"^7T",["^27",["^7U",["^27",[["^8?"]]]]]],"~$ephemeral-reset",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",36,"^8",7,"^9",36,"^:",22,"^7T",["^27",["^7U",["^27",[["~$rc"]]]]]],"^N","^52","^6","tiltontec/cell/evaluate.cljc","^:",22,"^7Y",["^27",[["^8A"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",36,"^81",["^M",[null,"^82","~$cljs.core/Keyword","^83"]],"^9",36,"^84",1,"^85",true,"^7T",["^27",["^7U",["^27",[["^8A"]]]]]],"~$optimize-away?!",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",353,"^8",7,"^9",353,"^:",22,"^7T",["^27",["^7U",["^27",[["~$c","~$prior-value"]]]]],"^7X","Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a slot and Just Use It."],"^N","^4X","^6","tiltontec/cell/evaluate.cljc","^:",22,"^7Y",["^27",[["~$c","^8D"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",353,"^81",["^M",[null,"^82","^83"]],"^9",353,"^84",2,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c","^8D"]]]]],"^7X","Optimizes away cells who turn out not to depend on anyone, \n  saving a lot of work at runtime. A caller/user will not bother\n  establishing a link, and when we get to models cget will \n  find a non-cell in a slot and Just Use It."],"~$ensure-value-is-current",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",63,"^8",7,"^9",63,"^:",30,"^7T",["^27",["^7U",["^27",[["~$c","~$debug-id","~$ensurer"]]]]],"^7X","The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation."],"^N","^3:","^6","tiltontec/cell/evaluate.cljc","^:",30,"^7Y",["^27",[["~$c","^8F","^8G"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",63,"^81",["^M",["^82","^83"]],"^9",63,"^84",3,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c","^8F","^8G"]]]]],"^7X","The key to data integrity: recursively check the known dependency\n  graph to decide if we are current, and if not kick off recalculation\n  and propagation."],"~$propagate",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",443,"^8",7,"^9",443,"^:",16,"^7T",["^27",["^7U",["^27",[["~$c","^8D","~$callers"]]]]],"^7X","A cell:\n  - notifies its callers of its change;\n  - calls any observer; and\n  - if ephemeral, silently reverts to nil."],"^N","^5?","^6","tiltontec/cell/evaluate.cljc","^:",16,"^7Y",["^27",[["~$c","^8D","^8I"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",443,"^81",["^M",[null,"^82","^83"]],"^9",443,"^84",3,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c","^8D","^8I"]]]]],"^7X","A cell:\n  - notifies its callers of its change;\n  - calls any observer; and\n  - if ephemeral, silently reverts to nil."],"~$md-cell-flush",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",341,"^8",7,"^9",341,"^:",20,"^7T",["^27",["^7U",["^27",[["~$c"]]]]]],"^N","^37","^6","tiltontec/cell/evaluate.cljc","^:",20,"^7Y",["^27",[["~$c"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",341,"^81",["^M",["^82","^83"]],"^9",341,"^84",1,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c"]]]]]],"~$c-awaken",["^ ","^N","^36","^6","tiltontec/cell/evaluate.cljc","^7",213,"^8",1,"^9",213,"^:",19,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",213,"^8",11,"^9",213,"^:",19],"^8=","^2V"],"~$c-get",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",126,"^8",7,"^9",126,"^:",12,"^7T",["^27",["^7U",["^27",[["~$c"]]]]],"^7X","The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been observed."],"^N","^3D","^6","tiltontec/cell/evaluate.cljc","^:",12,"^7Y",["^27",[["~$c"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",126,"^81",["^M",[null,"^82","^8B"]],"^9",126,"^84",1,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c"]]]]],"^7X","The API for determing the value associated with a Cell.\n  Ensures value is current, records any dependent, and\n  notices if a standalone  cell has never been observed."],"~$not-to-be-self",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",401,"^8",7,"^9",401,"^:",21,"^7T",["^27",["^7U",["^27",[["~$me"]]]]]],"^N","^57","^6","tiltontec/cell/evaluate.cljc","^:",21,"^7Y",["^27",[["^8N"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",401,"^81","^82","^9",401,"^84",1,"^85",true,"^7T",["^27",["^7U",["^27",[["^8N"]]]]]],"~$c-value-assume",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",262,"^8",7,"^9",262,"^:",21,"^7T",["^27",["^7U",["^27",[["~$c","~$new-value","~$propagation-code"]]]]],"^7X","The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells."],"^N","^56","^6","tiltontec/cell/evaluate.cljc","^:",21,"^7Y",["^27",[["~$c","^8P","^8Q"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",262,"^9",262,"^84",3,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c","^8P","^8Q"]]]]],"^7X","The Cell assumes a new value at awakening, on c-reset!, or\n   after formula recalculation.\n\n  We record the new value, set the Cell state to :awake, make\n  its pulse current, check to see if a formula cell can be\n  optimized away, and then propagate to any dependent formula\n  cells."],"~$not-to-be",["^ ","^N","^3F","^6","tiltontec/cell/evaluate.cljc","^7",408,"^8",1,"^9",408,"^:",20,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",408,"^8",11,"^9",408,"^:",20],"^8=","^2V"],"~$md-slot-value-store",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",256,"^8",7,"^9",256,"^:",26,"^7T",["^27",["^7U",["^27",[["^8N","~$slot","~$value"]]]]]],"^N","^38","^6","tiltontec/cell/evaluate.cljc","^:",26,"^7Y",["^27",[["^8N","^8T","^8U"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",256,"^81","^82","^9",256,"^84",3,"^85",true,"^7T",["^27",["^7U",["^27",[["^8N","^8T","^8U"]]]]]],"~$<cget",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",163,"^8",7,"^9",163,"^:",12,"^7T",["^27",["^7U",["^27",[["~$c"]]]]]],"^N","^3T","^6","tiltontec/cell/evaluate.cljc","^:",12,"^7Y",["^27",[["~$c"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",163,"^81",["^M",[null,"^82","^8B"]],"^9",163,"^84",1,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c"]]]]]],"~$calculate-and-link",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",187,"^8",7,"^9",187,"^:",25,"^7T",["^27",["^7U",["^27",[["~$c"]]]]],"^7X","The name is accurate: we do no more than invoke the\n  rule of a formula and return its value*, but along the\n  way the links between dependencies and dependents get\n  determined anew.\n\n  * Well, we also look to see if a synaptic cell has attached a\n  propagaion code to a vector used to wrap the raw value, which we then unpack."],"^N","^3E","^6","tiltontec/cell/evaluate.cljc","^:",25,"^7Y",["^27",[["~$c"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",187,"^9",187,"^84",1,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c"]]]]],"^7X","The name is accurate: we do no more than invoke the\n  rule of a formula and return its value*, but along the\n  way the links between dependencies and dependents get\n  determined anew.\n\n  * Well, we also look to see if a synaptic cell has attached a\n  propagaion code to a vector used to wrap the raw value, which we then unpack."],"~$c-value-changed?",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",430,"^8",7,"^9",430,"^:",23,"^7T",["^27",["^7U",["^27",[["~$c","^8P","~$old-value"]]]]]],"^N","^43","^6","tiltontec/cell/evaluate.cljc","^:",23,"^7Y",["^27",[["~$c","^8P","^8Y"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",430,"^81","~$boolean","^9",430,"^84",3,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c","^8P","^8Y"]]]]]],"~$propagate-to-callers",["^ ","^7S",null,"^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",507,"^8",7,"^9",507,"^:",27,"^7T",["^27",["^7U",["^27",[["~$c","^8I"]]]]]],"^N","^4:","^6","tiltontec/cell/evaluate.cljc","^:",27,"^7Y",["^27",[["~$c","^8I"]]],"^7Z",null,"^7[",["^27",[null,null]],"^8",1,"^80",false,"^7",507,"^81",["^M",[null,"^82","^8B","^83"]],"^9",507,"^84",2,"^85",true,"^7T",["^27",["^7U",["^27",[["~$c","^8I"]]]]]],"~$*custom-propagater*",["^ ","^5",["^ ","^6","tiltontec/cell/evaluate.cljc","^7",437,"^8",16,"^9",437,"^:",35,"~:dynamic",true],"^N","^3P","^6","tiltontec/cell/evaluate.cljc","^:",35,"^8",1,"^91",true,"^7",437,"^9",437,"^8=","^82"]],"^25",["^ ","^D","^D","^H","^H","^W","^H","^K","^K","^X","^X"],"~:cljs.analyzer/constants",["^ ","^[",["^M",["~:callers","~:valid","~:not2be-default","~:optimized-away","~:caller","~:slot","~:awake","~:c-read","~:cells-flushed","~:cz","~:pre-rule-clear","~:ephemeral-reset","~:dead","~:opti-used","~:else","~:unchanged-if","~:no-propagate","~:uncurrent","~:quiesced","~:default","~:c-awaken-fall-thru","~:propagate","~:nested","~:value","~:type","~:slotv-assume","~:fn-c-awaken","~:nascent","~:evic","~:ref-of","~:tiltontec.cell.base/c-formula","~:pulse-last-changed","~:tell-dependents","~:id","~:tiltontec.cell.base/state","~:unref","~:cget","~:useds","~:tiltontec.cell.base/cell","~:quiesce","~:when-value-t","~:cell-awaken","~:reco-dep!!!","~:dead-c","~:once-asked","~:me","~:hierarchy","~:opti-away","~:valid-uninfluenced","~:always","~:used"]],"~:order",["^9>","^:4","^98","^9J","^:1","^:9","^97","^9X","^9[","^9I","^9O","^9A","^:7","^9:","^9N","^9U","^99","^9W","^9=","^9H","^:5","^9K","^9F","^9G","^9P","^9V","^9Y","^:0","^9Q","^9M","^9L","^94","^9D","^9C","^93","^9;","^96","^:6","^9<","^9@","^9Z","^:2","^9?","^95","^9T","^9B","^9R","^:3","^:8","^9S","^9E"]],"^2<",["^ ","^10",["^M",[]]],"^2=",["^ "],"^2>",["^Y","^X","^Z","^D","^V","^H","^U","^K"]],"^R","^O","~:ns-specs",["^ "],"~:ns-spec-vars",["^M",[]],"~:compiler-options",["^5D",[["^:=","~:static-fns"],true,["^:=","~:shadow-tweaks"],null,["^:=","~:source-map-inline"],null,["^:=","~:elide-asserts"],false,["^:=","~:optimize-constants"],null,["^:=","^2C"],null,["^:=","~:external-config"],null,["^:=","~:tooling-config"],null,["^:=","~:emit-constants"],null,["^:=","~:load-tests"],null,["^:=","~:form-size-threshold"],null,["^:=","~:global-goog-object&array"],null,["^:=","~:data-readers"],null,["^:=","~:infer-externs"],"~:auto",["^:=","^2E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^:=","~:fn-invoke-direct"],null,["^:=","~:source-map"],"/dev/null"]]]